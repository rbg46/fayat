
using System;
using System.Collections.Generic;
using Fred.Entities.Bareme;

namespace Fred.DataAccess.Interfaces

{
    /// <summary>
    ///   Référentiel de données pour les barèmes exploitation organisation.
    /// </summary>
    public interface IBaremeExploitationOrganisationRepository : IRepository<BaremeExploitationOrganisationEnt>
    {
        /// <summary>
        /// Retourne la liste des barèmes en fonction d'une période et d'une organisation.
        /// </summary>
        /// <param name="periode">Période</param>
        /// <param name="organisationId">Identifiant de l'organisation</param>
        /// <param name="withParents">Si vrai, charge également les barèmes des organisations parentes</param>
        /// <returns>Liste de baremes organisation</returns>
        List<BaremeExploitationOrganisationEnt> GetBaremeByOrganisationIdAndPeriode(DateTime periode, int organisationId, bool withParents = false);

        IReadOnlyList<BaremeExploitationOrganisationEnt> GetBaremeByOrganisationIdAndPeriode(DateTime periode, IEnumerable<int> organisationIds);

        /// <summary>
        /// Retourne Vrai si le parent ne contient aucun barème
        /// </summary>
        /// <param name="periode">Periode</param>
        /// <param name="organisationId">Identifiant de l'organisation</param>
        /// <returns>Vrai si le parent ne contient aucun barème</returns>
        bool ParentIsEmpty(DateTime periode, int organisationId);

        /// <summary>
        /// Retourne un barème s'il existe, sinon null.
        /// </summary>
        /// <param name="organisationId">Identifiant du CI</param>
        /// <param name="periode">Période</param>
        /// <param name="ressourceId">Identifiant de la ressource</param>
        /// <returns>Le barème ou null s'il n'existe pas</returns>
        BaremeExploitationOrganisationEnt Get(int organisationId, DateTime periode, int ressourceId);

        /// <summary>
        /// Retourne la période de début du barème courant ou null s'il n'y en a pas.
        /// </summary>
        /// <param name="organisationId">Identifiant de l'organisation CI</param>
        /// <returns>La période de début du barème courant ou null s'il n'y en a pas</returns>
        DateTime? GetPeriodeDebutBaremeCourant(int organisationId);

        /// <summary>
        /// Supprime la liste de barèmes de la base
        /// </summary>
        /// <param name="listBaremes">Liste des barèmes à supprimer</param>
        void DeleteListBareme(List<BaremeExploitationOrganisationEnt> listBaremes);

        /// <summary>
        /// Retourne la date de début du barème ouvert (en cours)
        /// </summary>
        /// <param name="periode">Période</param>
        /// <param name="orgaId">Identifiant de l'organisation</param>
        /// <returns>La date de début du barème ouvert (en cours)</returns>
        DateTime? GetBeginPeriodOfOpenedBareme(DateTime periode, int orgaId);

        /// <summary>
        /// Retourne la liste des barèmes STORM en fonction d'une période et d'une organisation.
        /// </summary>
        /// <param name="periode">Période</param>
        /// <param name="organisationId">Identifiant de l'organisation</param>
        /// <returns>Liste de baremes organisation</returns>
        List<BaremeExploitationOrganisationEnt> GetBaremeStormByOrganisationIdAndPeriode(DateTime periode, int organisationId);

        /// <summary>
        /// Retourne l'historique d'une ressource.
        /// </summary>
        /// <param name="organisationId">L'identifiant de l'organisation</param>
        /// <param name="ressourceId">L'identifiant de la ressource</param>
        /// <returns>L'historique de la ressource</returns>
        List<BaremeExploitationOrganisationEnt> GetHistorique(int organisationId, int ressourceId);
    }
}
