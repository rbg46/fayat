using System;
using System.Collections.Generic;
using System.Linq;
using Fred.DataAccess.Common;
using Fred.DataAccess.Interfaces;
using Fred.Entities.Bareme;
using Fred.EntityFramework;
using Fred.Framework.Exceptions;
using Fred.Framework.Extensions;
using Microsoft.EntityFrameworkCore;

namespace Fred.DataAccess.BaremeExploitation
{

    public class BaremeExploitationCIRepository : FredRepository<BaremeExploitationCIEnt>, IBaremeExploitationCIRepository
    {
        public BaremeExploitationCIRepository(FredDbContext context)
          : base(context)
        {
        }

        /// <summary>
        /// Retourne la liste des barèmes en fonction d'une période et d'un CI.
        /// </summary>
        /// <param name="periode">Periode</param>
        /// <param name="ciId">Identifiant du CI</param>
        /// <returns>Liste de baremes CI</returns>
        public List<BaremeExploitationCIEnt> GetBaremeByCIIdAndPeriode(DateTime periode, int ciId)
        {
            try
            {
                periode = periode.GetPeriode();
                return Context.BaremeExploitationCIs
                  .Include(b => b.ReferentielEtendu.Ressource.TypeRessource)
                  .Include(b => b.Unite)
                  .Where(b => b.CIId == ciId
                    && periode >= b.PeriodeDebut
                    && (!b.PeriodeFin.HasValue || periode < b.PeriodeFin.Value))
                  .ToList();
            }
            catch (FredRepositoryException)
            {
                throw;
            }
            catch (Exception e)
            {
                throw new FredRepositoryException(e.Message, e);
            }
        }

        /// <summary>
        /// Retourne la liste des barèmes en fonction d'un CI.
        /// </summary>
        /// <param name="ciId">Identifiant du CI</param>
        /// <returns>Liste de baremes CI</returns>
        public List<BaremeExploitationCIEnt> GetBaremeByCIId(int ciId)
        {
            try
            {
                return Context.BaremeExploitationCIs
                  .Include(b => b.ReferentielEtendu.Ressource.TypeRessource)
                  .Where(b => b.CIId == ciId)
                  .ToList();
            }
            catch (FredRepositoryException)
            {
                throw;
            }
            catch (Exception e)
            {
                throw new FredRepositoryException(e.Message, e);
            }
        }

        /// <summary>
        /// Retourne un barème s'il existe, sinon null.
        /// </summary>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="periode">Période</param>
        /// <param name="referentielEtenduId">Identifiant du référentiel étendu</param>
        /// <returns>Le barème ou null s'il n'existe pas</returns>
        public BaremeExploitationCIEnt Get(int ciId, DateTime periode, int referentielEtenduId)
        {
            try
            {
                periode = periode.GetPeriode();
                return Context.BaremeExploitationCIs.FirstOrDefault(
                  b => b.CIId == ciId
                  && periode >= b.PeriodeDebut && (!b.PeriodeFin.HasValue || periode < b.PeriodeFin.Value)
                  && b.ReferentielEtenduId == referentielEtenduId);
            }
            catch (FredRepositoryException)
            {
                throw;
            }
            catch (Exception e)
            {
                throw new FredRepositoryException(e.Message, e);
            }
        }

        public IReadOnlyList<BaremeExploitationCIEnt> Get(int ciId, DateTime periode, List<int> referentielEtenduIds)
        {
            periode = periode.GetPeriode();
            return Context.BaremeExploitationCIs
                .Include(x => x.ReferentielEtendu)
                .Where(b => b.CIId == ciId && periode >= b.PeriodeDebut && (!b.PeriodeFin.HasValue || periode < b.PeriodeFin.Value) && b.ReferentielEtenduId.HasValue && referentielEtenduIds.Contains(b.ReferentielEtenduId.Value)).AsNoTracking().ToList();
        }

        /// <summary>
        /// Retourne un barème s'il existe, sinon null.
        /// </summary>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="referentielEtenduId">Identifiant du référentiel étendu</param>
        /// <returns>Le barème ou null s'il n'existe pas</returns>
        public BaremeExploitationCIEnt Get(int ciId, int referentielEtenduId)
        {
            try
            {
                return Context.BaremeExploitationCIs.FirstOrDefault(
                  b => b.CIId == ciId
                  && b.ReferentielEtenduId == referentielEtenduId);
            }
            catch (FredRepositoryException)
            {
                throw;
            }
            catch (Exception e)
            {
                throw new FredRepositoryException(e.Message, e);
            }
        }

        /// <summary>
        /// Retourne un barème commencant à la période indiqué s'il existe, sinon null.
        /// </summary>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="beginPeriod">Période de début</param>
        /// <param name="referentielEtenduId">Identifiant du référentiel étendu</param>
        /// <returns>Le barème ou null s'il n'existe pas</returns>
        public BaremeExploitationCIEnt GetByBeginPeriod(int ciId, DateTime beginPeriod, int referentielEtenduId)
        {
            try
            {
                beginPeriod = beginPeriod.GetPeriode();
                return Context.BaremeExploitationCIs.FirstOrDefault(
                  b => b.CIId == ciId
                  && beginPeriod == b.PeriodeDebut
                  && b.ReferentielEtenduId == referentielEtenduId);
            }
            catch (FredRepositoryException)
            {
                throw;
            }
            catch (Exception e)
            {
                throw new FredRepositoryException(e.Message, e);
            }
        }


        /// <summary>
        /// Retourne la période de début du barème courant ou null s'il n'y en a pas.
        /// </summary>
        /// <param name="ciId">Identifiant du CI</param>
        /// <returns>La période de début du barème courant ou null s'il n'y en a pas</returns>
        public DateTime? GetPeriodeDebutBaremeCourant(int ciId)
        {
            try
            {
                DateTime? ret = null;
                var baremes = Context.BaremeExploitationCIs.Where(b => b.CIId == ciId && !b.PeriodeFin.HasValue);
                if (baremes.Any())
                {
                    ret = baremes.Max(b => b.PeriodeDebut);
                }
                return ret;
            }
            catch (FredRepositoryException)
            {
                throw;
            }
            catch (Exception e)
            {
                throw new FredRepositoryException(e.Message, e);
            }
        }

        /// <summary>
        /// Retourne un barème non clôturé s'il existe, sinon null.
        /// </summary>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="periode">Période</param>
        /// <param name="referentielEtenduId">Identifiant du référentiel étendu</param>
        /// <returns>Le barème ou null s'il n'existe pas</returns>
        public BaremeExploitationCIEnt GetUnclosed(int ciId, DateTime periode, int referentielEtenduId)
        {
            try
            {
                periode = periode.GetPeriode();
                return Context.BaremeExploitationCIs.FirstOrDefault(
                  b => b.CIId == ciId
                  && periode >= b.PeriodeDebut && !b.PeriodeFin.HasValue
                  && b.ReferentielEtenduId == referentielEtenduId);
            }
            catch (FredRepositoryException)
            {
                throw;
            }
            catch (Exception e)
            {
                throw new FredRepositoryException(e.Message, e);
            }
        }

        /// <summary>
        /// Enregistre des barèmes
        /// </summary>
        /// <param name="listBareme">Liste de barèmes</param>
        public void SaveListBareme(List<BaremeExploitationCIEnt> listBareme)
        {
            listBareme.ForEach(b => Insert(b));
        }

        /// <summary>
        /// Supprime la liste de barèmes de la base
        /// </summary>
        /// <param name="listBaremes">Liste des barèmes à supprimer</param>
        public void DeleteListBareme(List<BaremeExploitationCIEnt> listBaremes)
        {
            Context.BaremeExploitationCIs.RemoveRange(listBaremes);
        }

        /// <summary>
        /// Retourne la date de début du barème ouvert (en cours)
        /// </summary>
        /// <param name="periode">Période</param>
        /// <param name="ciId">Identifiant du CI</param>
        /// <returns>La date de début du barème ouvert (en cours)</returns>
        public DateTime? GetBeginPeriodOfOpenedBareme(DateTime periode, int ciId)
        {
            var bareme = Context.BaremeExploitationCIs.FirstOrDefault(b => b.CIId == ciId && b.PeriodeDebut <= periode && !b.PeriodeFin.HasValue);
            if (bareme != null)
            {
                return bareme.PeriodeDebut;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Clos les barèmes de la dernière période ouverte
        /// </summary>
        /// <param name="periode">Période</param>
        /// <param name="ciId">Identifiant du CI</param>
        public void CloseLastPeriod(DateTime periode, int ciId)
        {
            var lastPeriod = GetBeginPeriodOfOpenedBareme(periode, ciId);
            if (lastPeriod.HasValue)
            {
                foreach (var bareme in GetBaremeByCIIdAndPeriode(lastPeriod.Value, ciId))
                {
                    bareme.PeriodeFin = periode.GetPreviousPeriode();
                    this.Update(bareme);
                }
            }
        }

        /// <summary>
        /// Retourne l'historique d'une ressource.
        /// </summary>
        /// <param name="ciId">L'identifiant du CI</param>
        /// <param name="referentielEtenduId">L'identifiant de la ressource</param>
        /// <returns>L'historique de la ressource</returns>
        public List<BaremeExploitationCIEnt> GetHistorique(int ciId, int referentielEtenduId)
        {
            return Context.BaremeExploitationCIs
              .Where(b => b.CIId == ciId && b.ReferentielEtenduId == referentielEtenduId)
              .OrderByDescending(b => b.PeriodeDebut)
              .ToList();
        }
    }
}
