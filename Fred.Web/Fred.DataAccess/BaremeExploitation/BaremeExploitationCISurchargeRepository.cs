using System;
using System.Collections.Generic;
using System.Linq;
using Fred.DataAccess.Common;
using Fred.DataAccess.Interfaces;
using Fred.Entities.Bareme;
using Fred.EntityFramework;
using Fred.Framework.Exceptions;
using Fred.Framework.Extensions;
using Microsoft.EntityFrameworkCore;

namespace Fred.DataAccess.BaremeExploitation
{
    /// <summary>
    ///   Référentiel de données pour les surcharges et exceptions des barèmes exploitation CI.
    /// </summary>
    public class BaremeExploitationCISurchargeRepository : FredRepository<SurchargeBaremeExploitationCIEnt>, IBaremeExploitationCISurchargeRepository
    {
        public BaremeExploitationCISurchargeRepository(FredDbContext context)
          : base(context)
        { }

        /// <summary>
        /// Retourne la liste des surcharges et exceptions d'un barème exploitation CI en fonction d'une période et d'un CI.
        /// </summary>
        /// <param name="periode">Periode</param>
        /// <param name="ciId">Identifiant du CI</param>
        /// <returns>Liste des surcharges et exceptions du barème exploitation CI</returns>
        public List<SurchargeBaremeExploitationCIEnt> GetSurchargeAndExceptionByPeriodeAndCIId(DateTime periode, int ciId)
        {
            try
            {
                periode = periode.GetPeriode();
                return this.Context.SurchargeBaremeExploitationCIs
                  .Include(s => s.Personnel)
                  .Include(s => s.Materiel)
                  .Where(s => s.CIId == ciId
                    && periode >= s.PeriodeDebut
                    && (!s.PeriodeFin.HasValue || periode < s.PeriodeFin.Value))
                  .ToList();
            }
            catch (FredRepositoryException)
            {
                throw;
            }
            catch (Exception e)
            {
                throw new FredRepositoryException(e.Message, e);
            }
        }


        /// <summary>
        /// Retourne la surcharge en fonction des paramètres
        /// </summary>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="date">Date</param>
        /// <param name="persoId">Identifiant du personnel</param>
        /// <param name="matosId">Identifiant du matériel</param>
        /// <returns>La surcharge</returns>
        public SurchargeBaremeExploitationCIEnt GetSurcharge(int ciId, DateTime date, int? persoId, int? matosId)
        {
            if (persoId.HasValue)
            {
                return GetSurchargePersonnel(date, ciId, persoId.Value);
            }
            if (matosId.HasValue)
            {
                return GetSurchargeMateriel(date, ciId, matosId.Value);
            }
            return null;
        }

        /// <summary>
        /// Retourne l'historique d'une surcharge ou d'une exception.
        /// </summary>
        /// <param name="ciId">L'identifiant du CI.</param>
        /// <param name="referentielEtenduId">L'identifiant du référentiel étendu.</param>
        /// <param name="personnelId">L'identifiant du personnel pour une ressource de type personnel, sinon null</param>
        /// <param name="materielId">L'identifiant du matériel pour une ressource de type matériel, sinon null</param>
        /// <returns>L'historique de la surcharge ou de l'exception.</returns>
        public List<SurchargeBaremeExploitationCIEnt> GetHistorique(int ciId, int referentielEtenduId, int? personnelId, int? materielId)
        {
            return Context.SurchargeBaremeExploitationCIs
            .Where(b => b.CIId == ciId && b.ReferentielEtenduId == referentielEtenduId && b.PersonnelId == personnelId && b.MaterielId == materielId)
            .OrderByDescending(b => b.PeriodeDebut)
            .ToList();
        }

        private SurchargeBaremeExploitationCIEnt GetSurchargePersonnel(DateTime date, int ciId, int persoId)
        {
            return this.Context.SurchargeBaremeExploitationCIs.FirstOrDefault(s => s.CIId == ciId && s.PeriodeDebut <= date && (!s.PeriodeFin.HasValue) && s.PersonnelId == persoId);
        }

        private SurchargeBaremeExploitationCIEnt GetSurchargeMateriel(DateTime date, int ciId, int matosId)
        {
            return this.Context.SurchargeBaremeExploitationCIs.FirstOrDefault(s => s.CIId == ciId && s.PeriodeDebut <= date && (!s.PeriodeFin.HasValue) && s.MaterielId == matosId);
        }
    }
}
