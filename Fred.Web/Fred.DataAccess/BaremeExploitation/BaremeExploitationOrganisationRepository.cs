using System;
using System.Collections.Generic;
using System.Linq;
using Fred.DataAccess.Common;
using Fred.DataAccess.Interfaces;
using Fred.Entities;
using Fred.Entities.Bareme;
using Fred.Entities.Organisation.Tree;
using Fred.EntityFramework;
using Fred.Framework.DateTimeExtend;
using Fred.Framework.Extensions;
using Microsoft.EntityFrameworkCore;

namespace Fred.DataAccess.BaremeExploitation
{
    public class BaremeExploitationOrganisationRepository : FredRepository<BaremeExploitationOrganisationEnt>, IBaremeExploitationOrganisationRepository
    {
        private readonly IOrganisationTreeRepository organisationTreeRepository;
        private readonly IOrganisationRepository orgaRepo;

        public BaremeExploitationOrganisationRepository(FredDbContext context, IOrganisationTreeRepository organisationTreeRepository, IOrganisationRepository orgaRepo)
          : base(context)
        {
            this.organisationTreeRepository = organisationTreeRepository;
            this.orgaRepo = orgaRepo;
        }

        public IReadOnlyList<BaremeExploitationOrganisationEnt> GetBaremeByOrganisationIdAndPeriode(DateTime periode, IEnumerable<int> organisationIds)
        {
            return Context.BaremeExploitationOrganisations
                .Include(o => o.Ressource.TypeRessource)
                .Include(o => o.Unite)
                .Where(b => b.PeriodeDebut <= periode.GetLimitsOfMonth().StartDate && (!b.PeriodeFin.HasValue || b.PeriodeFin.Value > periode.GetLimitsOfMonth().StartDate) && organisationIds.Contains(b.OrganisationId))
                .OrderBy(b => b.BaremeId)
                .GroupBy(b => new { b.OrganisationId, b.RessourceId, b.UniteId, b.DeviseId })
                .Select(b => b.Last())
                .ToList();
        }


        public List<BaremeExploitationOrganisationEnt> GetBaremeByOrganisationIdAndPeriode(DateTime periode, int organisationId, bool withParents = false)
        {
            IQueryable<BaremeExploitationOrganisationEnt> query = Context.BaremeExploitationOrganisations
                .Include(o => o.Ressource.TypeRessource)
                .Include(o => o.Unite)
                .Where(b => b.PeriodeDebut <= periode.GetLimitsOfMonth().StartDate
                            && (!b.PeriodeFin.HasValue || b.PeriodeFin.Value > periode.GetLimitsOfMonth().StartDate));

            if (withParents)
            {
                OrganisationTree organisationTree = organisationTreeRepository.GetOrganisationTree();

                List<int> listOrgaId = organisationTree.GetParentsWithCurrentUntilGroupe(organisationId).Select(x => x.OrganisationId).ToList();

                query = query.Where(b => listOrgaId.Contains(b.OrganisationId));
            }
            else
            {
                query = query.Where(b => b.OrganisationId == organisationId);
            }

            return query
                .OrderBy(b => b.BaremeId)
                .GroupBy(b => new { b.OrganisationId, b.RessourceId, b.UniteId, b.DeviseId })
                .Select(b => b.Last())
                .ToList();
        }

        public bool ParentIsEmpty(DateTime periode, int organisationId)
        {
            int? parentId = orgaRepo.GetOrganisationById(organisationId)?.PereId;

            if (parentId.HasValue)
            {
                int month = periode.Month;
                int year = periode.Year;

                return !Context.BaremeExploitationOrganisations
                  .Include(o => o.Ressource.TypeRessource)
                  .Any(b => b.OrganisationId == parentId
                    && b.PeriodeDebut.Year <= year && b.PeriodeDebut.Month <= month
                    && (!b.PeriodeFin.HasValue || b.PeriodeFin.Value.Year > year && b.PeriodeFin.Value.Month > month));
            }

            return true;
        }

        public List<BaremeExploitationOrganisationEnt> GetBaremeStormByOrganisationIdAndPeriode(DateTime periode, int organisationId)
        {
            int month = periode.Month;
            int year = periode.Year;

            return Context.BaremeExploitationOrganisations
            .Include(o => o.Ressource.TypeRessource)
            .Include(o => o.Organisation.TypeOrganisation)
            .Include(o => o.Organisation.Societe)
            .Include(o => o.Organisation.Etablissement.Societe)
            .Where(b => b.OrganisationId == organisationId
              && b.Ressource.TypeRessource.Code == Constantes.TypeRessource.CodeTypeMateriel
              && (b.Organisation.TypeOrganisation.Code == Constantes.OrganisationType.CodeEtablissement
              && b.Organisation.Etablissement.Societe.CodeSocietePaye == Constantes.CodeSocietePayeRazelBec
              || b.Organisation.TypeOrganisation.Code == Constantes.OrganisationType.CodeSociete
              && b.Organisation.Societe.CodeSocietePaye == Constantes.CodeSocietePayeRazelBec)
              && b.PeriodeDebut.Year <= year && b.PeriodeDebut.Month <= month
              && (!b.PeriodeFin.HasValue || b.PeriodeFin.Value.Year > year && b.PeriodeFin.Value.Month > month))
            .ToList();
        }

        public BaremeExploitationOrganisationEnt Get(int organisationId, DateTime periode, int ressourceId)
        {
            periode = periode.GetPeriode();

            return Context.BaremeExploitationOrganisations.LastOrDefault(
              b => b.OrganisationId == organisationId
              && periode >= b.PeriodeDebut && (!b.PeriodeFin.HasValue || periode < b.PeriodeFin.Value)
              && b.RessourceId == ressourceId);
        }

        public DateTime? GetPeriodeDebutBaremeCourant(int organisationId)
        {
            DateTime? ret = null;
            IQueryable<BaremeExploitationOrganisationEnt> baremes = Context.BaremeExploitationOrganisations.Where(b => b.OrganisationId == organisationId && !b.PeriodeFin.HasValue);

            if (baremes.Any())
            {
                ret = baremes.Max(b => b.PeriodeDebut);
            }

            return ret;
        }

        public void DeleteListBareme(List<BaremeExploitationOrganisationEnt> listBaremes)
        {
            Context.BaremeExploitationOrganisations.RemoveRange(listBaremes);
        }
        public DateTime? GetBeginPeriodOfOpenedBareme(DateTime periode, int orgaId)
        {
            BaremeExploitationOrganisationEnt bareme = Context.BaremeExploitationOrganisations.FirstOrDefault(b => b.OrganisationId == orgaId && b.PeriodeDebut <= periode && b.PeriodeFin == null);

            return bareme?.PeriodeDebut;
        }

        public List<BaremeExploitationOrganisationEnt> GetHistorique(int organisationId, int ressourceId)
        {
            return Context.BaremeExploitationOrganisations
              .Where(b => b.OrganisationId == organisationId && b.RessourceId == ressourceId)
              .OrderByDescending(b => b.PeriodeDebut)
              .ToList();
        }
    }
}
