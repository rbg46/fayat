using AutoMapper;
using Fred.Business.BaremeExploitation;
using Fred.Business.BaremeExploitation.Edition;
using Fred.Business.Common.ExportDocument;
using Fred.Business.Utilisateur;
using Fred.Entities.Bareme;
using Fred.Entities.Bareme.Models;
using Fred.Entities.Organisation;
using Fred.Framework.Extensions;
using Fred.Web.Models.ReferentielFixe;
using Fred.Web.Shared.Models.Bareme;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Caching;
using System.Web.Http;

namespace Fred.Web.API
{
    public class BaremeExploitationCIController : ApiControllerBase
    {
        private readonly IMapper mapper;
        private readonly IBaremeExploitationCIManager baremeExploitationCIMgr;
        private readonly IBaremeExploitationCISurchargeManager baremeExploitationCISurchargeMgr;
        private readonly IUtilisateurManager utilisateurMgr;
        private readonly IBaremeExploitationOrganisationManager baremeExploitationOrganisationMgr;
        private readonly IBaremeCiExcelHandler baremeCiExcelHandler;
        private readonly IExportDocumentService exportDocumentService;
        private readonly IBaremeExportHelper baremeExportHelper;

        public BaremeExploitationCIController(
          IMapper mapper,
          IBaremeExploitationCIManager baremeExploitationCIMgr,
          IBaremeExploitationCISurchargeManager baremeExploitationCISurchargeMgr,
          IUtilisateurManager utilisateurMgr,
          IBaremeExploitationOrganisationManager baremeExploitationOrganisationMgr,
          IBaremeCiExcelHandler baremeCiExcelHandler,
          IExportDocumentService exportDocumentService,
          IBaremeExportHelper baremeExportHelper)
        {
            this.mapper = mapper;
            this.baremeExploitationCIMgr = baremeExploitationCIMgr;
            this.baremeExploitationCISurchargeMgr = baremeExploitationCISurchargeMgr;
            this.utilisateurMgr = utilisateurMgr;
            this.baremeExploitationOrganisationMgr = baremeExploitationOrganisationMgr;
            this.baremeCiExcelHandler = baremeCiExcelHandler;
            this.exportDocumentService = exportDocumentService;
            this.baremeExportHelper = baremeExportHelper;
        }


        /// <summary>
        /// Méthode GET pour récupérer le message à utiliser en cas d'enregistrement impossible ou null si l'enregistrement est possible.
        /// </summary>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="periode">Période</param>
        /// <returns>Une réponse HTTp</returns>
        [HttpGet]
        [Route("api/BaremeExploitationCI/GetEnregistrementImpossibleMessage")]
        public IHttpActionResult GetEnregistrementImpossibleMessage(int ciId, DateTime periode)
        {
            return Ok(baremeExploitationCIMgr.GetEnregistrementImpossibleMessage(ciId, periode));
        }

        /// <summary>
        /// Méthode GET de récupération des barèmes exploitation CI
        /// </summary>
        /// <param name="periode">Période</param>
        /// <param name="ciId">Identifiant du CI</param>
        /// <returns>Retourne la liste des barèmes</returns>
        [HttpGet]
        [Route("api/BaremeExploitationCI/GetBaremeByCIIdAndPeriode")]
        public IHttpActionResult GetBaremeByCIIdAndPeriode(DateTime periode, int ciId)
        {
            List<BaremeExploitationCIModel> baremeExploitationCiModel = mapper.Map<List<BaremeExploitationCIModel>>(baremeExploitationCIMgr.GetBaremeByCIIdAndPeriode(periode, ciId));

            // Rappel du barème organisation
            OrganisationEnt organisation = null;
            List<BaremeExploitationOrganisationEnt> baremeOrganisationParent = baremeExploitationOrganisationMgr.GetBaremeOrganisationParent(periode, ciId, out organisation);
            if (organisation != null)
            {
                string libelle = organisation.TypeOrganisation.Libelle + " " + organisation.Code;
                foreach (BaremeExploitationOrganisationEnt baremeOrganisation in baremeOrganisationParent)
                {
                    BaremeExploitationCIModel baremeCi = baremeExploitationCiModel.FirstOrDefault(bc => bc.ReferentielEtendu.RessourceId == baremeOrganisation.RessourceId);
                    if (baremeCi != null)
                    {
                        baremeCi.RappelBaremeOrganisation = new BaremeExploitationCIRappelBaremeOrganisationModel()
                        {
                            Libelle = libelle,
                            Prix = baremeOrganisation.Prix,
                            UniteId = baremeOrganisation.UniteId,
                            PrixChauffeur = baremeOrganisation.PrixChauffeur,
                            PrixConduite = baremeOrganisation.PrixConduite
                        };
                    }
                }
            }
            return Ok(baremeExploitationCiModel);
        }

        /// <summary>
        /// Méthode GET de récupération des surcharges et exceptions des barèmes exploitation CI.
        /// </summary>
        /// <param name="periode">Periode</param>
        /// <param name="ciId">Identifiant du CI</param>
        /// <returns>Liste des surcharges et exceptions du barème exploitation CI</returns>
        [HttpGet]
        [Route("api/BaremeExploitationCI/GetSurchargesByPeriodeAndCIId")]
        public IHttpActionResult GetSurchargesByCIIdAndPeriode(DateTime periode, int ciId)
        {
            return Ok(mapper.Map<List<SurchargeBaremeExploitationCIModel>>(baremeExploitationCISurchargeMgr.GetSurchargesByPeriodeAndCIId(periode, ciId)));
        }

        /// <summary>
        /// Méthode POST d'enregistrement des barèmes exploitation CI
        /// </summary>
        /// <param name="bareme">Barèmes des ressources / surcharges et exceptions à enregistrer</param>
        /// <returns>La liste des surcharges et exceptions ajoutées pour mise à jour de la vue</returns>
        [HttpPost]
        [Route("api/BaremeExploitationCI/Save")]
        public IHttpActionResult Save(BaremeExploitationCIToUpdateModel bareme)
        {
            bareme.Periode = bareme.Periode.GetPeriode();

            BaremeExploitationCISaveResultModel baremeExploitationCISaveResultModel = baremeExploitationCIMgr.Save(bareme, utilisateurMgr.GetContextUtilisateurId());

            return Created($"api/BaremeExploitationCI/GetBaremeByCIIdAndPeriode?periode={bareme.Periode}&CiId={bareme.CiId}", baremeExploitationCISaveResultModel);
        }

        /// <summary>
        /// Méthode POST d'enregistrement des barêmes exploitation CI
        /// </summary>
        /// <param name="periode">Periode</param>
        /// <param name="ciId">Identifiant du CI</param>
        /// <returns>Met à jour le barème CI avec le barème orga le plus proche</returns>
        [HttpPost]
        [Route("api/BaremeExploitationCI/Synchro")]
        public IHttpActionResult Synchro(DateTime periode, int ciId)
        {
            BaremeExploitationSaveResultModel baremeExploitationSaveResultModel = baremeExploitationCIMgr.SynchroBaremeOrgaToCi(periode, ciId, utilisateurMgr.GetContextUtilisateurId());

            return Created($"api/BaremeExploitationCI/GetBaremeByCIIdAndPeriode?periode={periode}&CiId={ciId}", baremeExploitationSaveResultModel);
        }

        /// <summary>
        ///   GET Récupère un référentiel étendu en fonction d'un identifiant de société.
        ///   Inclut les ressources inactives si un barème est associé.
        /// </summary>
        /// <param name="societeId">Identifiant de la société</param>
        /// <returns>Une réponse HTTp</returns>
        [HttpGet]
        [Route("api/BaremeExploitationCI/GetReferentielEtendu/{societeId}")]
        public IHttpActionResult GetReferentielEtendu(int societeId)
        {
            return Ok(mapper.Map<List<ChapitreModel>>(baremeExploitationCIMgr.GetReferentielEtendu(societeId)));
        }

        /// <summary>
        ///   GET Récupère l'historique d'un référentiel étendu.
        /// </summary>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="referentielEtenduId">Identifiant du référentiel étendue</param>
        /// <returns>Une réponse HTTp</returns>
        [HttpGet]
        [Route("api/BaremeExploitationCI/GetRessourceHistorique")]
        public IHttpActionResult GetRessourceHistorique(int ciId, int referentielEtenduId)
        {
            return Ok(mapper.Map<List<BaremeExploitationCIModel>>(baremeExploitationCIMgr.GetHistorique(ciId, referentielEtenduId)));
        }

        /// <summary>
        ///   GET Récupère l'historique d'une surcharge ou d'une exception.
        /// </summary>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="referentielEtenduId">Identifiant du référentiel étendue</param>
        /// <param name="personnelId">L'identifiant du personnel pour une ressource de type personnel, sinon null</param>
        /// <param name="materielId">L'identifiant du matériel pour une ressource de type matériel, sinon null</param>
        /// <returns>Une réponse HTTp</returns>
        [HttpGet]
        [Route("api/BaremeExploitationCI/GetSurchargeHistorique")]
        public IHttpActionResult GetSurchargeHistorique(int ciId, int referentielEtenduId, int? personnelId, int? materielId)
        {
            return Ok(mapper.Map<List<SurchargeBaremeExploitationCIModel>>(baremeExploitationCISurchargeMgr.GetHistorique(ciId, referentielEtenduId, personnelId, materielId)));
        }

        /// <summary>
        /// Method To export Bareme Ci to an Excel File.
        /// </summary>
        /// <param name="modelCiExcel">Model Recieved From The front</param>
        /// <param name="isPdf">Boolean</param>
        /// <returns>Return Excel File</returns>
        [HttpPost]
        [Route("api/BaremeExploitationCI/ExportBaremeCIExcel")]
        public IHttpActionResult ExportBaremeCIExcelAsync(ExportBaremeCiExcelModel modelCiExcel, bool isPdf = false)
        {
            modelCiExcel.IsPdf = isPdf;

            MemoryStream stream = baremeCiExcelHandler.CreateBaremeCIExcelModelAsync(modelCiExcel);
            string cacheID = baremeExportHelper.TransformMemoryStreamToPdfOrExcel(isPdf, stream);

            return Created(string.Empty, new { id = cacheID });
        }

        /// <summary>
        ///   Method To Download Bareme CI Excel File
        /// </summary>
        /// <param name="id">Id of the file </param>
        /// <param name="isPdf">PDF or Excel</param>
        /// <returns>HttpResponseMessage</returns>
        [HttpGet]
        [Route("api/BaremeExploitationCI/ExtractBaremeCIExcel")]
        public IHttpActionResult ExtractBaremeOrganisationExcel(string id, bool? isPdf)
        {
            string cacheName = exportDocumentService.GetCacheName(id, isPdf ?? false);
            byte[] bytes = MemoryCache.Default.Get(cacheName) as byte[];
            if (bytes != null)
            {
                MemoryCache.Default.Remove(cacheName);
            }
            string exportDocument = exportDocumentService.GetDocumentFileName("ExploitationBaremeCI", isPdf ?? false);

            return ResponseMessage(exportDocumentService.CreateResponseForDownloadDocument(exportDocument, bytes));
        }
    }
}
