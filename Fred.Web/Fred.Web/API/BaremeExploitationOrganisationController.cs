using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Caching;
using System.Threading.Tasks;
using System.Web.Http;
using AutoMapper;
using Fred.Business.BaremeExploitation;
using Fred.Business.BaremeExploitation.Edition;
using Fred.Business.Common.ExportDocument;
using Fred.Business.Utilisateur;
using Fred.Entities.Bareme.Models;
using Fred.Framework.Extensions;
using Fred.Web.Models.ReferentielFixe;
using Fred.Web.Shared.Models.Bareme;

namespace Fred.Web.API
{
    public class BaremeExploitationOrganisationController : ApiControllerBase
    {
        private readonly IMapper mapper;
        private readonly IBaremeExploitationOrganisationManager baremeExploitationOrganisationMgr;
        private readonly IUtilisateurManager utilisateurMgr;
        private readonly IBaremeOrganisationExcelHelper baremeOrganisationExcelHelper;
        private readonly IExportDocumentService exportDocumentService;
        private readonly IBaremeExportHelper baremeExportHelper;

        public BaremeExploitationOrganisationController(IMapper mapper,
            IBaremeExploitationOrganisationManager baremeExploitationOrganisationMgr,
            IUtilisateurManager utilisateurMgr,
            IBaremeOrganisationExcelHelper baremeOrganisationExcelHelper,
            IExportDocumentService exportDocumentService,
            IBaremeExportHelper baremeExportHelper)
        {
            this.mapper = mapper;
            this.baremeExploitationOrganisationMgr = baremeExploitationOrganisationMgr;
            this.utilisateurMgr = utilisateurMgr;
            this.baremeOrganisationExcelHelper = baremeOrganisationExcelHelper;
            this.exportDocumentService = exportDocumentService;
            this.baremeExportHelper = baremeExportHelper;
        }

        [HttpGet]
        [Route("api/BaremeExploitationOrga/GetBaremeByOrganisationIdAndPeriode")]
        public IHttpActionResult GetBaremeByOrganisationIdAndPeriode(DateTime periode, int organisationId)
        {
            return Ok(mapper.Map<List<BaremeExploitationOrganisationModel>>(baremeExploitationOrganisationMgr.GetBaremesByOrganisationIdAndPeriode(periode, organisationId, true)));
        }

        [HttpPost]
        [Route("api/BaremeExploitationOrga/ExportBaremeOrganisationExcel")]
        public async Task<IHttpActionResult> ExportBaremeOrganisationExcelAsync(ExportBaremeOrganisationExcelModel exportBaremeOrganisationExcelModel, bool isPdf = false)
        {
            exportBaremeOrganisationExcelModel.IsPdf = isPdf;
            MemoryStream stream = await baremeOrganisationExcelHelper.GenerateBaremeOrganisationExcelAsync(exportBaremeOrganisationExcelModel);
            string cacheID = baremeExportHelper.TransformMemoryStreamToPdfOrExcel(isPdf, stream);

            return Ok(new { id = cacheID });
        }

        [HttpGet]
        [Route("api/BaremeExploitationOrga/ExtractBaremeOrganisationExcel")]
        public IHttpActionResult ExtractBaremeOrganisationExce(string id, bool? isPdf)
        {
            string cacheName = exportDocumentService.GetCacheName(id, isPdf ?? false);
            var bytes = MemoryCache.Default.Get(cacheName) as byte[];

            if (bytes != null)
            {
                MemoryCache.Default.Remove(cacheName);
            }

            string exportDocument = exportDocumentService.GetDocumentFileName("ExploitationOrganisation", isPdf ?? false);

            return ResponseMessage(exportDocumentService.CreateResponseForDownloadDocument(exportDocument, bytes));
        }

        [HttpGet]
        [Route("api/BaremeExploitationOrga/ParentIsEmpty")]
        public IHttpActionResult ParentIsEmpty(DateTime periode, int organisationId)
        {
            return Ok(baremeExploitationOrganisationMgr.ParentIsEmpty(periode, organisationId));
        }

        [HttpPost]
        [Route("api/BaremeExploitationOrga/Save")]
        public IHttpActionResult Save(BaremeExploitationOrganisationToUpdateModel bareme)
        {
            bareme.Periode = bareme.Periode.GetPeriode();

            return Ok(baremeExploitationOrganisationMgr.Save(bareme, utilisateurMgr.GetContextUtilisateurId()));
        }

        [HttpGet]
        [Route("api/BaremeExploitationOrga/GetReferentielFixe/{groupeId}")]
        public IHttpActionResult GetReferentielFixe(int groupeId)
        {
            return Ok(mapper.Map<List<ChapitreModel>>(baremeExploitationOrganisationMgr.GetReferentielFixe(groupeId)));
        }

        [HttpPost]
        [Route("api/BaremeExploitationOrga/Synchro")]
        public IHttpActionResult SynchroBaremeOrga(DateTime periode, int orgaId)
        {
            periode = periode.GetPeriode();

            baremeExploitationOrganisationMgr.SynchroBaremeOrgaFromParent(periode, orgaId, utilisateurMgr.GetContextUtilisateurId());

            return Ok();
        }

        [HttpGet]
        [Route("api/BaremeExploitationOrga/GetHistorique")]
        public IHttpActionResult GetHistorique(int organisationId, int ressourceId)
        {
            return Ok(mapper.Map<List<BaremeExploitationOrganisationModel>>(baremeExploitationOrganisationMgr.GetHistorique(organisationId, ressourceId)));
        }
    }
}
