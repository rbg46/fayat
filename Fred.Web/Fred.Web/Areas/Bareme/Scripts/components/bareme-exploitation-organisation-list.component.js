(function () {
    'use strict';

    var baremeExploitationOrganisationListComponent = {
        templateUrl: '/Areas/Bareme/Scripts/components/bareme-exploitation-organisation-list.component.html',
        bindings: {
            resources: '<',
            periode: '<',
            organisation: '<',
            readonly: '<'

        },
        controller: baremeExploitationOrganisationListController
    };

    angular.module('Fred').component('baremeExploitationOrganisationListComponent', baremeExploitationOrganisationListComponent);

    angular.module('Fred').controller('baremeExploitationOrganisationListController', baremeExploitationOrganisationListController);

    baremeExploitationOrganisationListController.$inject = ['$scope', 'ProgressBar', 'BaremeService', 'Notify', 'confirmDialog'];

    function baremeExploitationOrganisationListController($scope, ProgressBar, BaremeService, Notify, confirmDialog) {
        var $ctrl = this;
        var appliquerAuxEnfantsAction = null;

        //////////////////////////////////////////////////////////////////
        // Déclaration des membres publiques                            //
        //////////////////////////////////////////////////////////////////
        $ctrl.BaremeService = BaremeService;
        $ctrl.IsReadOnly = IsReadOnly;
        $ctrl.FirstTimeLoaded = false;
        $ctrl.Loaded = false;
        $ctrl.IsLoaded = false;

        $ctrl.GetTypeOrganisationCodeToDisplay = GetTypeOrganisationCodeToDisplay;
        $ctrl.GetOrganisationClass = GetOrganisationClass;
        $ctrl.GetOrganisationBlockClass = GetOrganisationBlockClass;
        $ctrl.GetComposantesClass = GetComposantesClass;
        $ctrl.ChapitreToChildren = ChapitreToChildren;
        $ctrl.SousChapitreToChildren = SousChapitreToChildren;
        $ctrl.RempliComposanteVidesAvecValeurParDefaut = RempliComposanteVidesAvecValeurParDefaut;
        $ctrl.ShowHistorique = ShowHistorique;
        $ctrl.AppliquerAuxEnfantsComposanteVideModalAction = AppliquerAuxEnfantsComposanteVideModalAction;


        //////////////////////////////////////////////////////////////////
        // Initialisation                                               //
        //////////////////////////////////////////////////////////////////
        $ctrl.$onInit = function () {
            $scope.$on('loadBareme', function (event, arg) {
                $ctrl.IsLoaded = true;
                ProgressBar.start(true);
                $ctrl.organisation = arg.organisation;
                $ctrl.periode = arg.periode;
                $ctrl.readonly = arg.readonly;
                BaremeService.HasPendingChanges = HasPendingChanges;
                Load();
            });

            if ($ctrl.organisation && $ctrl.periode && !$ctrl.IsLoaded) {
                ProgressBar.start(true);
                BaremeService.HasPendingChanges = HasPendingChanges;
                Load();
            }

            $scope.$on('saveBareme', Save);
            $scope.$on('cancelBareme', Cancel);
            $scope.$on('expandAllBareme', () => BaremeService.ExpandAll());
            $scope.$on('collapseAllBareme', () => BaremeService.CollapseAll());
            $scope.$on('searchBareme', function (event, search) { $ctrl.search = search; });
        };

        //////////////////////////////////////////////////////////////////
        // Chargement                                                   //
        //////////////////////////////////////////////////////////////////
        function Load() {
            $ctrl.Loaded = false;
            $ctrl.Baremes = null;
            $ctrl.Organisations = null;
            $ctrl.Chapitres = null;
            BaremeService.ValeurParDefaut = null;

            // Charge les valeurs par défaut
            BaremeService.GetValeurParDefaut()
                .then(actionValeurParDefautLoaded)
                .catch(actionLoadError);
        }

        function actionValeurParDefautLoaded(result) {
            BaremeService.ValeurParDefaut = result.data;

            // Charge le barème
            BaremeService.GetBaremeByOrganisationIdAndPeriode($ctrl.periode, $ctrl.organisation ? $ctrl.organisation.OrganisationId : 0)
                .then(actionBaremeLoaded)
                .catch(actionLoadError);
        }

        function actionBaremeLoaded(result) {
            $ctrl.Baremes = result.data;

            // Test si le parent est vide
            BaremeService.ParentIsEmpty($ctrl.periode, $ctrl.organisation ? $ctrl.organisation.OrganisationId : 0)
                .then(actionEmitParentEmpty);

            // Mise à jour des unités pour le barème
            BaremeService.UpdateUnite($ctrl.Baremes);

            // Charge l'organisation
            BaremeService.GetOrganisationParentsByOrgaIdMaxGroupe($ctrl.organisation ? $ctrl.organisation.OrganisationId : 0)
                .then(actionOrganisationLoaded)
                .catch(actionLoadError);
        }

        function actionEmitParentEmpty(result) {
            $scope.$emit('parentIsEmpty', result.data);
        }

        function actionOrganisationLoaded(result) {
            $ctrl.Organisations = result.data.reverse();

            // Charge les chapitres (référentiel fixe)
            var groupeId = $ctrl.Organisations[0].Groupe.GroupeId;
            BaremeService.GetReferentielFixeByGroupeId(groupeId)
                .then(actionChapitresLoaded)
                .catch(actionLoadError);
        }

        function actionChapitresLoaded(result) {
            $ctrl.Chapitres = result.data;

            for (let chapitre of $ctrl.Chapitres) {
                for (let sousChapitre of chapitre.SousChapitres) {
                    for (let ressource of sousChapitre.Ressources) {
                        // Initialise la ressource
                        BaremeService.InitializeRessource(ressource);
                        ressource.Baremes = [];

                        for (let organisation of $ctrl.Organisations) {
                            var ressourceBareme = GetRessourceBareme(ressource, organisation);
                            var bareme = {};
                            BaremeService.InitializeBareme(bareme, ressourceBareme);
                            ressource.Baremes.push(bareme);
                        }
                    }
                    BaremeService.InitializeSousChapitre(sousChapitre);
                }
                BaremeService.InitializeChapitre(chapitre);
            }

            $ctrl.Loaded = true;
            $ctrl.FirstTimeLoaded = true;
            ProgressBar.complete();
        }

        function actionLoadError() {
            ProgressBar.complete();
            Notify.error($ctrl.resources.BaremeExploitation_ChargementErreur);
        }


        //////////////////////////////////////////////////////////////////
        // Enregistrement                                               //
        //////////////////////////////////////////////////////////////////
        function Save() {
            if (!$ctrl.Loaded)
                return;

            var baremeRessourcesToUpdate = [];
            var baremeRessourcesChanged = [];
            var organisationIndex = $ctrl.Organisations.length - 1;
            var valid = true;
            var empty = false;
            var changed = false;

            for (let ressource of BaremeService.GetRessources($ctrl.Chapitres)) {
                // Seul le barème de l'organisation courante peut être modifié
                var bareme = ressource.Baremes[organisationIndex];
                bareme.Errors = [];

                var ressourceCheckResult = BaremeService.CheckCurrentBareme(bareme, ressource);
                valid &= ressourceCheckResult.Valid;
                empty |= ressourceCheckResult.Empty;
                changed |= bareme.Changed;

                if (valid && bareme.Changed) {
                    baremeRessourcesChanged.push(bareme);
                    baremeRessourcesToUpdate.push({
                        RessourceId: ressource.RessourceId,
                        UniteId: bareme.CurrentBareme.Unite.UniteId,
                        Prix: bareme.CurrentBareme.Prix,
                        PrixChauffeur: bareme.CurrentBareme.PrixChauffeur,
                        PrixConduite: bareme.CurrentBareme.PrixConduite
                    });
                }
            }

            // Informe s'il y a des erreurs ou s'il n'y a pas de modification à enregistrer
            // Propose de remplir les champs obligatoires avec les valeur par défaut, le cas échéant
            // Enregistre sinon
            if (empty) {
                $('#baremeIncompletModal').modal();
            }
            else if (!valid) {
                Notify.error($ctrl.resources.BaremeExploitation_EnregistrementBaremeErreur);
            }
            else if (!changed) {
                Notify.message($ctrl.resources.BaremeExploitation_PasDeModificationAEnregistrer);
            }
            else {
                confirmDialog.confirm(resources, $ctrl.resources.BaremeExploitationOrga_EnregistrementConfirmation, "flaticon flaticon-warning").then(function () {
                    ProgressBar.start(true);
                    BaremeService.SaveBaremeOrganisation(baremeRessourcesToUpdate, $ctrl.organisation.OrganisationId, $ctrl.periode)
                        .then(result => actionBaremeSaved(result, baremeRessourcesChanged))
                        .catch(() => Notify.error($ctrl.resources.BaremeExploitation_EnregistrementErreur))
                        .finally(() => ProgressBar.complete());
                });
            }
        }

        // Appelée après le succès de l'enregistrement
        function actionBaremeSaved(result, baremeRessourcesChanged) {
            var saveResult = result.data;

            if (saveResult.MessageErreur) {
                Notify.error(saveResult.MessageErreur);
            }
            else if (saveResult.BaremePeriodePrecedenteCloture) {
                Notify.message($ctrl.resources.BaremeExploitation_EnregistrementEffectue);
                Load();
            }
            else {
                // Traite les ressources modifiées
                for (let baremeRessourceChanged of baremeRessourcesChanged) {
                    baremeRessourceChanged.Changed = false;
                    baremeRessourceChanged.OriginalBareme = BaremeService.CloneBareme(baremeRessourceChanged.CurrentBareme);
                }
                Notify.message($ctrl.resources.BaremeExploitation_EnregistrementEffectue);
            }
        }


        //////////////////////////////////////////////////////////////////
        // Autre                                                        //
        //////////////////////////////////////////////////////////////////

        // Indique si l'élément visuel à l'index indiqué est en lecture seul
        // - index : index concerné
        function IsReadOnly(index) {
            return $ctrl.readonly || index !== $ctrl.Organisations.length - 1;
        }

        // Annule les modifications
        // Demande une confirmation
        function Cancel() {
            if (!$ctrl.Loaded)
                return;

            confirmDialog.confirm(resources, $ctrl.resources.BaremeExploitation_ConfirmationAnnulation, "flaticon flaticon-warning").then(function () {
                // Recharge le barème
                Load();
            });
        }

        // Applique le barème d'un chapitre à ses enfants
        // - chapitre : le chapitre concerné
        function ChapitreToChildren(chapitre) {
            BaremeService.UpdateBaremeFromView(chapitre.Bareme);
            var organisationIndex = $ctrl.Organisations.length - 1;
            appliquerAuxEnfantsAction = (appliqueComposantesVides) => {
                for (let sousChapitre of chapitre.SousChapitres) {
                    for (let ressource of sousChapitre.Ressources) {
                        var bareme = ressource.Baremes[organisationIndex];
                        BaremeService.CopyBareme(chapitre.Bareme, bareme.CurrentBareme, appliqueComposantesVides);
                        bareme.OnChange();
                    }
                }
                chapitre.Bareme = BaremeService.CreateEmptyBareme();
            };
            if (BaremeService.BaremeContainsEmptyComposante(chapitre.Bareme, chapitre.IsMateriel)) {
                $('#appliquerAuxEnfantsComposanteVideModal').modal();
            }
            else {
                appliquerAuxEnfantsAction(true);
            }
        }

        // Applique le barème d'un sous-chapitre à ses enfants
        // - sousChapitre : le sous-chapitre concerné
        function SousChapitreToChildren(sousChapitre) {
            BaremeService.UpdateBaremeFromView(sousChapitre.Bareme);
            var organisationIndex = $ctrl.Organisations.length - 1;
            appliquerAuxEnfantsAction = (appliqueComposantesVides) => {
                for (let ressource of sousChapitre.Ressources) {
                    var bareme = ressource.Baremes[organisationIndex];
                    BaremeService.CopyBareme(sousChapitre.Bareme, bareme.CurrentBareme, appliqueComposantesVides);
                    bareme.OnChange();
                }
                sousChapitre.Bareme = BaremeService.CreateEmptyBareme();
            };
            if (BaremeService.BaremeContainsEmptyComposante(sousChapitre.Bareme, sousChapitre.IsMateriel)) {
                $('#appliquerAuxEnfantsComposanteVideModal').modal();
            }
            else {
                appliquerAuxEnfantsAction(true);
            }
        }

        // Récupère le barème d'une ressource
        // - ressource : la ressource concernée
        // - organisation : l'organisation concernée
        // - return : le barème correspondant
        function GetRessourceBareme(ressource, organisation) {
            for (let bareme of $ctrl.Baremes) {
                if (bareme.RessourceId === ressource.RessourceId && bareme.OrganisationId === organisation.OrganisationId) {
                    return BaremeService.CloneBareme(bareme);
                }
            }
            return BaremeService.CreateEmptyBareme();
        }

        // Récupère le code de l'organisation pour l'afficher.
        // - organisation : l'orghanisation concernée
        function GetTypeOrganisationCodeToDisplay(organisation) {
            var ret = "";
            var code = organisation.TypeOrganisation.Code;
            if (code.length > 0) {
                ret = code[0].toUpperCase();
                ret += code.substring(1, code.length).toLowerCase();
            }
            return ret;
        }

        // Retourne la class css à utiliser pour une organisation
        // - organisationIndex : l'index de l'organisation concernée
        // - return : la class à utiliser
        function GetOrganisationClass(organisationIndex) {
            var ret = $ctrl.IsReadOnly(organisationIndex) ? "col-readonly" : "col-editable";
            ret += organisationIndex % 2 === 0 ? " blue" : " green";
            return ret;
        }

        // Retourne la class css à utiliser pour les block d'organisations
        // - organisationIndex : l'index de l'organisation concernée
        // - return : la class à utiliser
        function GetOrganisationBlockClass(organisationIndex) {
            return $ctrl.IsReadOnly(organisationIndex) ? "col-readonly" : "col-editable";
        }

        // Retourne la class css à utiliser pour les composantes
        // - bareme : le barème concerné
        // - return : la class à utiliser
        function GetComposantesClass(bareme) {
            return bareme.Errors.length === 0 ? "" : " error";
        }

        // Indique si le barème à changé
        // return : true si le barème à changé, sinon false
        function HasPendingChanges() {
            if ($ctrl.Chapitres && $ctrl.Organisations) {
                var organisationIndex = $ctrl.Organisations.length - 1;
                for (let ressource of BaremeService.GetRessources($ctrl.Chapitres)) {
                    // Seul le barème de l'organisation courante peut être modifié
                    var bareme = ressource.Baremes[organisationIndex];
                    if (bareme.Changed) {
                        return true;
                    }
                }
            }
            return false;
        }

        // Rempli les compsantes vides avec les valeurs par défaut
        function RempliComposanteVidesAvecValeurParDefaut() {
            var organisationIndex = $ctrl.Organisations.length - 1;
            for (let ressource of BaremeService.GetRessources($ctrl.Chapitres)) {
                var bareme = ressource.Baremes[organisationIndex];
                BaremeService.SetValeurParDefautPourLesComposantesNull(bareme, ressource);
            }
        }

        // Affiche l'historique d'une ressource
        // - bareme : la ressource concernée
        function ShowHistorique(ressource) {
            BaremeService.GetOrgaHistorique($ctrl.organisation.OrganisationId, ressource.RessourceId)
                .then((result) => $scope.$broadcast('showHistoriqueRequested', {
                    Baremes: result.data,
                    Ressource: ressource
                }))
                .catch(actionLoadError);
        }

        // Retour de la modale appliquerAuxEnfantsComposanteVideModal
        // - appliqueComposantesVides : indique si les composantes vides à appliquer doivent ou non être appliquées
        function AppliquerAuxEnfantsComposanteVideModalAction(appliqueComposantesVides) {
            if (appliquerAuxEnfantsAction !== null)
                appliquerAuxEnfantsAction(appliqueComposantesVides);
        }
    }
})();
