(function () {
  'use strict';

  var baremeExploitationCiListComponent = {
    templateUrl: '/Areas/Bareme/Scripts/components/bareme-exploitation-ci-list.component.html',
    bindings: {
      resources: '<',
      typeSurcharge: '<'
    },
    controller: baremeExploitationCiListController
  };

  angular.module('Fred').component('baremeExploitationCiListComponent', baremeExploitationCiListComponent);

  angular.module('Fred').controller('baremeExploitationCiListController', baremeExploitationCiListController);

  baremeExploitationCiListController.$inject = ['$scope', 'ProgressBar', 'BaremeService', 'Notify', 'confirmDialog'];

  function baremeExploitationCiListController($scope, ProgressBar, BaremeService, Notify, confirmDialog) {

    // NPI : CurrentBareme -> CurrentComposantes, OriginalBareme -> OriginalComposantes
    //     : voir si des renommages sont nécessaire dans le back-end

    var $ctrl = this;
    var viewId = 0;
    const CodeTypeInterne = "INT";
    const CodeGroupeRZB = "GRZB";
    var appliquerAuxEnfantsAction = null;


    //////////////////////////////////////////////////////////////////
    // Déclaration des membres  publiques                           //
    //////////////////////////////////////////////////////////////////
    $ctrl.BaremeService = BaremeService;
    $ctrl.FirstTimeLoaded = false;
    $ctrl.Loaded = false;
    $ctrl.IsInterneGRZB = false;

    $ctrl.ChapitreToChildren = ChapitreToChildren;
    $ctrl.SousChapitreToChildren = SousChapitreToChildren;
    $ctrl.AddSurchagePersonnel = AddSurchagePersonnel;
    $ctrl.AddSurchageMateriel = AddSurchageMateriel;
    $ctrl.DeleteSurcharge = DeleteSurcharge;
    $ctrl.GetRessourceComposanteTooltip = GetRessourceComposanteTooltip;
    $ctrl.GetRessourceAjouterSurchargeMaterielTooltip = GetRessourceAjouterSurchargeMaterielTooltip;
    $ctrl.RempliComposanteVidesAvecValeurParDefaut = RempliComposanteVidesAvecValeurParDefaut;
    $ctrl.AppliquerAuxEnfantsComposanteVideModalAction = AppliquerAuxEnfantsComposanteVideModalAction;
    $ctrl.ShowRessourceHistorique = ShowRessourceHistorique;
    $ctrl.ShowSurchargeHistorique = ShowSurchargeHistorique;
    $ctrl.IsBaremeCiDifferentBaremeOrganisation = IsBaremeCiDifferentBaremeOrganisation;
    $ctrl.GetRappelBaremeOrganisationMessage = GetRappelBaremeOrganisationMessage;


    //////////////////////////////////////////////////////////////////
    // Initialisation                                               //
    //////////////////////////////////////////////////////////////////
    $ctrl.$onInit = function () {
      $scope.$on('loadBareme', function (event, arg) {
        ProgressBar.start(true);
        $ctrl.ci = arg.ci;
        $ctrl.periode = arg.periode;
        $ctrl.readonly = arg.readonly;
        BaremeService.HasPendingChanges = HasPendingChanges;
        Load();
      });
      $scope.$on('saveBareme', Save);
      $scope.$on('cancelBareme', Cancel);
      $scope.$on('expandAllBareme', () => BaremeService.ExpandAll());
      $scope.$on('collapseAllBareme', () => BaremeService.CollapseAll());
      $scope.$on('searchBareme', function (event, search) { $ctrl.search = search; });
    };

    //////////////////////////////////////////////////////////////////
    // Chargement                                                   //
    //////////////////////////////////////////////////////////////////
    function Load() {
      $ctrl.Loaded = false;
      $ctrl.Baremes = null;
      $ctrl.Chapitres = null;
      BaremeService.ValeurParDefaut = null;

      // Charge les valeurs par défaut
      BaremeService.GetValeurParDefaut()
        .then(actionValeurParDefautLoaded)
        .catch(actionLoadError);
    }

    function actionValeurParDefautLoaded(result) {
      BaremeService.ValeurParDefaut = result.data;

      // Charge la société, le cas échéant
      if ($ctrl.ci.SocieteId === null) {
        BaremeService.GetSocieteByCIId($ctrl.ci.CiId)
          .then(actionSocieteLoaded)
          .catch(actionLoadError);
      }
      else {
        actionSocieteLoaded(null);
      }
    }

    function actionSocieteLoaded(result) {
      if (result !== null) {
        $ctrl.ci.Societe = result.data;
        $ctrl.ci.SocieteId = $ctrl.ci.Societe.SocieteId;
      }

    $ctrl.IsInterneGRZB = $ctrl.ci.Societe.TypeSociete.Code === CodeTypeInterne && $ctrl.ci.Societe.Groupe.Code === CodeGroupeRZB;

    // Charge le barème
    BaremeService.GetBaremeByCIIdAndPeriode($ctrl.periode, $ctrl.ci ? $ctrl.ci.CiId : 0)
        .then(actionBaremeLoaded)
        .catch(actionLoadError);
    }

    function actionBaremeLoaded(result) {
      $ctrl.Baremes = result.data;

      // Met à jour les unités du barème
      BaremeService.UpdateUnite($ctrl.Baremes);

      // Met à jour les unités du rappel du barème organisation
      for (let bareme of $ctrl.Baremes) {
        if (bareme.RappelBaremeOrganisation) {
          bareme.RappelBaremeOrganisation.Unite = BaremeService.GetUnite(bareme.RappelBaremeOrganisation.UniteId);
        }
      }

      // Charge les chapitres (référentiel étendu)
      BaremeService.GetReferentielEtenduBySocieteId($ctrl.ci.SocieteId ? $ctrl.ci.SocieteId : 0)
        .then(actionChapitresLoaded)
        .catch(actionLoadError);
    }

    function actionChapitresLoaded(result) {
      $ctrl.Chapitres = result.data;

      // Charge les surcharges et les exceptions
      BaremeService.GetSurchargesByPeriodeAndCIId($ctrl.periode, $ctrl.ci.CiId)
        .then(actionSurchargesLoaded)
        .catch(actionLoadError);
    }

    function actionSurchargesLoaded(result) {
      var surcharges = result.data;

      // Crée les ressources, surcharges et exception pour la vue
      for (let chapitre of $ctrl.Chapitres) {
        var numberOfSousChapitreReadonly = 0;

        for (let sousChapitre of chapitre.SousChapitres) {
          var numberOfRessourceStorm = 0;

          for (let ressource of sousChapitre.Ressources) {
            // Initialise la ressource
            BaremeService.InitializeRessource(ressource);
            ressource.IsStorm = false;
            if (ressource.IsMateriel && $ctrl.IsInterneGRZB) {
              ressource.IsStorm = true;
              numberOfRessourceStorm++;
            }

            // Récupère le barème de la ressource
            var ressourceBareme = null;
            for (let bareme of $ctrl.Baremes) {
              if (bareme.ReferentielEtenduId === ressource.ReferentielEtendus[0].ReferentielEtenduId) {
                ressourceBareme = BaremeService.CloneBareme(bareme);
                ressource.RappelBaremeOrganisation = bareme.RappelBaremeOrganisation;
                break;
              }
            }
            if (ressourceBareme === null) {
              ressourceBareme = BaremeService.CreateEmptyBareme();
            }
            BaremeService.InitializeBareme(ressource, ressourceBareme);

            // Charge les surcharges et les exceptions de la ressource
            // Note : pas d'itération ici car les éléments sont supprimés du tableau pour améliorer les performances
            for (var i = 0; i < surcharges.length; i++) {
              var surcharge = surcharges[i];
              if (surcharge.ReferentielEtenduId === ressource.ReferentielEtendus[0].ReferentielEtenduId) {
                if (!ressource.Surcharges) {
                  ressource.Surcharges = [];
                }
                surcharge.Unite = BaremeService.GetUnite(surcharge.UniteId);
                ressource.Surcharges.push(
                  CreateSurcharge(ressource, surcharge.SurchargeBaremeId, surcharge.Personnel, surcharge.Materiel,
                    BaremeService.CloneBareme(surcharge), BaremeService.CloneBareme(surcharge))
                );
                surcharges.splice(i, 1);
                i--;
              }
            }
          }

          sousChapitre.IsReadonly = $ctrl.readonly;
          if (!$ctrl.readonly && sousChapitre.Ressources.length === numberOfRessourceStorm) {
            sousChapitre.IsReadonly = true;
            numberOfSousChapitreReadonly++;
          }

          BaremeService.InitializeSousChapitre(sousChapitre);
        }

        chapitre.IsReadonly = $ctrl.readonly || chapitre.SousChapitres.length === numberOfSousChapitreReadonly;
        BaremeService.InitializeChapitre(chapitre);
      }

      $ctrl.Loaded = true;
      $ctrl.FirstTimeLoaded = true;
      ProgressBar.complete();
    }

    function actionLoadError() {
      ProgressBar.complete();
      Notify.error($ctrl.resources.BaremeExploitation_ChargementErreur);
    }


    //////////////////////////////////////////////////////////////////
    // Enregistrement                                               //
    //////////////////////////////////////////////////////////////////
    function Save() {
      if (!$ctrl.Loaded)
        return;

      var ressourcesToUpdate = [];
      var surchargesToAdd = [];
      var surchargesToUpdate = [];
      var surchargesToDelete = [];
      var surchargesChanged = [];
      var ressourcesChanged = [];
      var valid = true;
      var empty = false;
      var changed = false;

      for (let ressource of BaremeService.GetRessources($ctrl.Chapitres)) {
        // Ignore les ressources matériel STORM
        if (ressource.IsStorm) {
          continue;
        }

        // Traite la ressource
        var referentielEtenduId = ressource.ReferentielEtendus[0].ReferentielEtenduId;
        ressource.Errors = [];

        // Les ressources modifiées et non modifiées doivent être vérifiées
        var ressourceCheckResult = BaremeService.CheckCurrentBareme(ressource, ressource);
        valid &= ressourceCheckResult.Valid;
        empty |= ressourceCheckResult.Empty;
        changed |= ressource.Changed;
        if (valid && ressource.Changed) {
          ressourcesChanged.push(ressource);
          ressourcesToUpdate.push({
            ReferentielEtenduId: referentielEtenduId,
            UniteId: ressource.CurrentBareme.Unite.UniteId,
            Prix: ressource.CurrentBareme.Prix,
            PrixChauffeur: ressource.CurrentBareme.PrixChauffeur,
            PrixConduite: ressource.CurrentBareme.PrixConduite
          });
        }

        // Traite les surcharges et exceptions
        if (ressource.Surcharges) {
          for (let surcharge of ressource.Surcharges) {
            surcharge.Errors = [];

            if (!surcharge.Deleted) {
              var surchargeCheckResult = CheckSurcharge(surcharge);
              valid &= surchargeCheckResult.Valid;
              empty |= surchargeCheckResult.Empty;
            }

            changed |= surcharge.Deleted || surcharge.Changed;

            if (valid) {
              var surchargeToSend = {
                ReferentielEtenduId: referentielEtenduId,
                SurchargeBaremeId: surcharge.SurchargeBaremeId,
                PersonnelId: surcharge.Personnel !== null ? surcharge.Personnel.PersonnelId : null,
                MaterielId: surcharge.Materiel !== null ? surcharge.Materiel.MaterielId : null,
                UniteId: surcharge.CurrentBareme.Unite.UniteId,
                Prix: surcharge.CurrentBareme.Prix,
                PrixChauffeur: surcharge.CurrentBareme.PrixChauffeur,
                PrixConduite: surcharge.CurrentBareme.PrixConduite,
                ViewId: surcharge.ViewId,
                Type: surcharge.Type
              };

              if (surcharge.Deleted) {
                surchargesChanged.push(surcharge);
                surchargesToDelete.push(surchargeToSend);
              }
              else if (surcharge.Changed) {
                surchargesChanged.push(surcharge);
                if (surcharge.SurchargeBaremeId === 0) {
                  surchargesToAdd.push(surchargeToSend);
                }
                else {
                  surchargesToUpdate.push(surchargeToSend);
                }
              }
            }
          }
        }
      }

      // Informe s'il y a des erreurs ou s'il n'y a pas de modification à enregistrer
      // Propose de remplir les champs obligatoires avec les valeur par défaut, le cas échéant
      // Enregistre sinon
      if (empty) {
        $('#baremeIncompletModal').modal();
      }
      else if (!valid) {
        Notify.error($ctrl.resources.BaremeExploitation_EnregistrementBaremeErreur);
      }
      else if (!changed) {
        Notify.message($ctrl.resources.BaremeExploitation_PasDeModificationAEnregistrer);
      }
      else {
        confirmDialog.confirm(resources, $ctrl.resources.BaremeExploitationCI_EnregistrementConfirmation, "flaticon flaticon-warning").then(function () {
          ProgressBar.start(true);
          BaremeService.SaveBaremeCI(ressourcesToUpdate, surchargesToAdd, surchargesToUpdate, surchargesToDelete, $ctrl.ci.CiId, $ctrl.periode)
            .then(result => actionBaremeSaved(result, ressourcesChanged, surchargesToUpdate, surchargesToDelete, surchargesChanged))
            .catch(() => Notify.error($ctrl.resources.BaremeExploitation_EnregistrementErreur))
            .finally(() => ProgressBar.complete());
        });
      }
    }

    // Appelée après le succès de l'enregistrement
    function actionBaremeSaved(result, ressourcesChanged, surchargesUpdated, surchargesDeleted, surchargesChanged) {
      var saveResult = result.data;

      if (saveResult.MessageErreur) {
        Notify.error(saveResult.MessageErreur);
      }
      else if (saveResult.BaremePeriodePrecedenteCloture) {
        Notify.message($ctrl.resources.BaremeExploitation_EnregistrementEffectue);
        Load();
      }
      else {
        if (saveResult.SurchargesAdded) {
          ProcessSurchargesAdded(saveResult.SurchargesAdded, surchargesChanged);
        }
        ProcessSurchargesUpdated(surchargesUpdated, surchargesChanged);
        ProcessSurchargeDeleted(surchargesDeleted, surchargesChanged);
        ProcessRessourcesUpdated(ressourcesChanged);
        Notify.message($ctrl.resources.BaremeExploitation_EnregistrementEffectue);
      }
    }

    // Traite les surcharges et exceptions ajoutées
    function ProcessSurchargesAdded(surchargesAdded, surchargesChanged) {
      for (let surchargeAdded of surchargesAdded) {
        var surchargeChangedIndex = GetViewIndex(surchargesChanged, surchargeAdded.ViewId);
        var surchargeChanged = surchargesChanged[surchargeChangedIndex];
        surchargeChanged.SurchargeBaremeId = surchargeAdded.SurchargeBaremeId;
        surchargeChanged.Changed = false;
        surchargeChanged.OriginalBareme = BaremeService.CloneBareme(surchargeChanged.CurrentBareme);
        surchargeChanged.OnChange = function () { BaremeService.ProcessBaremeChanged(this, false); };
        surchargesChanged.splice(surchargeChangedIndex, 1);
      }
    }

    // Traite les surcharges et exceptions modifiées
    function ProcessSurchargesUpdated(surchargesUpdated, surchargesChanged) {
      for (let surchargeUpdated of surchargesUpdated) {
        var surchargeChangedIndex = GetViewIndex(surchargesChanged, surchargeUpdated.ViewId);
        var surchargeChanged = surchargesChanged[surchargeChangedIndex];
        surchargeChanged.Changed = false;
        surchargeChanged.OriginalBareme = BaremeService.CloneBareme(surchargeChanged.CurrentBareme);
        surchargesChanged.splice(surchargeChangedIndex, 1);
      }
    }

    // Traite les surcharges et exceptions supprimées
    function ProcessSurchargeDeleted(surchargesDeleted, surchargesChanged) {
      for (let surchargeDeleted of surchargesDeleted) {
        // Récupère la surcharge dans la liste des surcharges changées
        var surchargeChangedIndex = GetViewIndex(surchargesChanged, surchargeDeleted.ViewId);
        var surchargeChanged = surchargesChanged[surchargeChangedIndex];

        // Récupère la liste des surcharges de la ressource parente de la surcharge
        var ressourceSurcharges = surchargeChanged.Ressource.Surcharges;

        // Supprime la surcharge de la liste des surcharges de la ressource parente
        var ressourceSurchargesIndex = GetViewIndex(ressourceSurcharges, surchargeDeleted.ViewId);
        ressourceSurcharges.splice(ressourceSurchargesIndex, 1);

        // Supprime la surcharge changée
        surchargesChanged.splice(surchargeChangedIndex, 1);
        if (ressourceSurcharges.length === 0) {
          surchargeChanged.Ressource.Surcharges = null;
        }
      }
    }

    // Traite les ressources modifiées
    function ProcessRessourcesUpdated(ressourcesChanged) {
      for (let ressourceChanged of ressourcesChanged) {
        ressourceChanged.Changed = false;
        ressourceChanged.OriginalBareme = BaremeService.CloneBareme(ressourceChanged.CurrentBareme);
      }
    }


    //////////////////////////////////////////////////////////////////
    // Autre                                                        //
    //////////////////////////////////////////////////////////////////

    // Applique le barème d'un chapitre à ses enfants
    // - chapitre : le chapitre concerné
    function ChapitreToChildren(chapitre) {
      if (!chapitre.IsReadonly) {
        BaremeService.UpdateBaremeFromView(chapitre.Bareme);
        appliquerAuxEnfantsAction = (appliqueComposantesVides) => {
          for (let sousChapitre of chapitre.SousChapitres) {
            SetBaremeToSousChapitreAndChildren(sousChapitre, chapitre.Bareme, appliqueComposantesVides);
          }
          chapitre.Bareme = BaremeService.CreateEmptyBareme();
        };

        if (BaremeService.BaremeContainsEmptyComposante(chapitre.Bareme, chapitre.IsMateriel)) {
          $('#appliquerAuxEnfantsComposanteVideModal').modal();
        }
        else {
          appliquerAuxEnfantsAction(true);
        }
      }
    }

    // Applique le barème d'un sous-chapitre à ses enfants
    // - sousChapitre : le sous-chapitre concerné
    function SousChapitreToChildren(sousChapitre) {
      if (!sousChapitre.IsReadonly) {
        BaremeService.UpdateBaremeFromView(sousChapitre.Bareme);
        appliquerAuxEnfantsAction = (appliqueComposantesVides) => {
          SetBaremeToSousChapitreAndChildren(sousChapitre, sousChapitre.Bareme, appliqueComposantesVides);
          sousChapitre.Bareme = BaremeService.CreateEmptyBareme();
        };
        if (BaremeService.BaremeContainsEmptyComposante(sousChapitre.Bareme, sousChapitre.IsMateriel)) {
          $('#appliquerAuxEnfantsComposanteVideModal').modal();
        }
        else {
          appliquerAuxEnfantsAction(true);
        }
      }
    }

    // Applique le barème donné a un sous-chapitre et à ses enfants (surcharges et exceptions)
    // - sousChapitre : le sous-chapitre concerné
    // - bareme : le barème à appliquer
    // - appliqueComposantesVides : indique si les composantes vides à appliquer doivent ou non être appliquées
    function SetBaremeToSousChapitreAndChildren(sousChapitre, bareme, appliqueComposantesVides) {
      for (let ressource of sousChapitre.Ressources) {
        if (!ressource.IsStorm) {
          BaremeService.CopyBareme(bareme, ressource.CurrentBareme, appliqueComposantesVides);
          ressource.OnChange();

          if (ressource.Surcharges) {
            for (let surcharge of ressource.Surcharges) {
              BaremeService.CopyBareme(bareme, surcharge.CurrentBareme, appliqueComposantesVides);
              surcharge.OnChange();
            }
          }
        }
      }
    }

    // Ajoute une surcharge ou une exception de type personnel à la ressource indiquée
    // Le personnel concerné ne doit pas déjà être en surcharge ou en exception sur la même période et doit avoir une ressource associée
    // - ressource : la ressource concernée
    // - personnel : le personnel concerné par la surcharge ou l'exception
    function AddSurchagePersonnel(ressource, personnel) {
      // Le matériel doit avoir une ressource associée
      if (personnel.RessourceId === null) {
        Notify.error($ctrl.resources.BaremeExploitation_PersonnelSansRessource);
        return;
      }

      // Le personnel concerné ne doit pas déjà être en surcharge ou en exception
      if (CheckIsAlreadySurcharged(personnel.PersonnelId, 0)) {
        return;
      }
      // Crée la liste des surcharges et des exceptions, le cas échéant
      if (!ressource.Surcharges) {
        ressource.Surcharges = [];
      }
      // Ajoute la surcharge ou l'exception
      ressource.Surcharges.push(
        CreateSurcharge(ressource, 0, personnel, null, BaremeService.CloneBareme(ressource.CurrentBareme), null)
      );

      // Un rafraichissement est requis lors de l'ajout dynamique d'une ligne
      document.getElementById("FLEX_TABLE").refresh();
    }

    // Ajoute une surcharge ou une exception de type matériel à la ressource indiquée
    // - ressource : la ressource concernée
    // - materiel : le materiel concerné par la surcharge ou l'exception
    function AddSurchageMateriel(ressource, materiel) {
      // Le matériel doit avoir une ressource associée
      if (materiel.RessourceId === null) {
        Notify.error($ctrl.resources.BaremeExploitation_MaterielSansRessource);
        return;
      }

      // Le matériel concerné ne doit pas déjà être en surcharge ou en exception
      if (CheckIsAlreadySurcharged(0, materiel.MaterielId)) {
        return;
      }
      // Crée la liste des surcharges et des exceptions, le cas échéant
      if (!ressource.Surcharges) {
        ressource.Surcharges = [];
      }
      // Ajoute la surcharge ou l'exception
      ressource.Surcharges.push(
        CreateSurcharge(ressource, 0, null, materiel, BaremeService.CloneBareme(ressource.CurrentBareme), null)
      );

      // Un rafraichissement est requis lors de l'ajout dynamique d'une ligne
      document.getElementById("FLEX_TABLE").refresh();
    }

    // Supprime une surcharge ou une exception
    // - surcharge : la surcharge à supprimer
    function DeleteSurcharge(surcharge) {
      if (surcharge.SurchargeBaremeId === 0) {
        // Note : pas d'itération ici car les éléments sont supprimés du tableau
        for (var i = 0; i < surcharge.Ressource.Surcharges.length; i++) {
          if (surcharge.Ressource.Surcharges[i].ViewId === surcharge.ViewId) {
            surcharge.Ressource.Surcharges.splice(i, 1);
            break;
          }
        }
      }
      else {
        surcharge.Deleted = true;
      }
    }

    // Annule les modifications
    // Demande une confirmation
    function Cancel() {
      if (!$ctrl.Loaded)
        return;

      confirmDialog.confirm(resources, $ctrl.resources.BaremeExploitation_ConfirmationAnnulation, "flaticon flaticon-warning").then(function () {
        // Recharge le barème
        Load();
      });
    }

    // Retourne le tooltip à utiliser pour les composantes d'une ressource
    // - ressource : la ressource concernée
    function GetRessourceComposanteTooltip(ressource) {
      if (!$ctrl.readonly && ressource.IsStorm) {
        return $ctrl.resources.BaremeExploitationCI_RessourceStormLectureSeule_TooltipChamp;
      }
      return "";
    }

    // Retourne le tooltip à utiliser pour le bouton d'ajout de surcharge martériel
    // - ressource : la ressource concernée
    // - horsStorm : indique si les matériels concernés sont hors STORM
    function GetRessourceAjouterSurchargeMaterielTooltip(ressource, horsStorm) {
      if ($ctrl.readonly) {
        return "";
      }
      else if (ressource.IsStorm) {
        return $ctrl.resources.BaremeExploitationCI_RessourceStormLectureSeule_TooltipAddSurchargeMateriel;
      }
      else if (horsStorm) {
        return $ctrl.resources.BaremeExploitationCI_AjoutSurchargeMaterielHorsStorm;
      }
      else {
        return $ctrl.resources.BaremeExploitationCI_AjoutSurchargeMateriel;
      }
    }

    // Rempli les compsantes vides avec les valeurs par défaut
    function RempliComposanteVidesAvecValeurParDefaut() {
      for (let ressource of BaremeService.GetRessources($ctrl.Chapitres)) {
        if (ressource.IsStorm) {
          continue;
        }
        BaremeService.SetValeurParDefautPourLesComposantesNull(ressource, ressource);

        if (ressource.Surcharges) {
          for (let surcharge of ressource.Surcharges) {
            BaremeService.SetValeurParDefautPourLesComposantesNull(surcharge, ressource);
          }
        }
      }
    }

    // Retour de la modale appliquerAuxEnfantsComposanteVideModal
    // - appliqueComposantesVides : indique si les composantes vides à appliquer doivent ou non être appliquées
    function AppliquerAuxEnfantsComposanteVideModalAction(appliqueComposantesVides) {
      if (appliquerAuxEnfantsAction !== null)
        appliquerAuxEnfantsAction(appliqueComposantesVides);
    }

    // Crée une nouvelle surcharge / exception pour la vue
    // - ressource : la ressource parente
    // - surchargeBaremeId : identifiant en provenance de la BDD, 0 en cas d'ajout
    // - personnel : le personnel attaché   } un des 2 doit être null
    // - materiel : le matériel attaché     }
    // - currentBareme : le barème courant, utilisé dans la vue
    // - originalBareme : le barème original en provenance de la BDD, null en cas d'ajout
    // - return : la surcharge ou l'exception nouvellement créée
    function CreateSurcharge(ressource, surchargeBaremeId, personnel, materiel, currentBareme, originalBareme) {
      var surcharge = {
        Ressource: ressource,
        SurchargeBaremeId: surchargeBaremeId,
        Personnel: personnel,
        Materiel: materiel,
        CurrentBareme: currentBareme,
        OriginalBareme: originalBareme,
        Deleted: false,
        ViewId: viewId++,
        Errors: [],
        TypeRessourceId: ressource.TypeRessourceId
      };

      if (surchargeBaremeId !== 0) {
        // Phase de chargement
        surcharge.OnChange = function () { BaremeService.ProcessBaremeChanged(this, false); };
        surcharge.Changed = false;
      }
      else {
        // Ajout via la vue
        surcharge.OnChange = function () { BaremeService.ProcessBaremeChanged(this, true); };
        surcharge.Changed = true;
      }

      var matriculeRessourceId = 0;
      if (personnel !== null) {
        surcharge.Matricule = personnel.CodeRef;
        surcharge.Libelle = personnel.PrenomNom;
        surcharge.IsPersonnel = true;
        surcharge.IsMateriel = false;
        matriculeRessourceId = personnel.RessourceId;
      }
      else if (materiel !== null) {
        surcharge.Matricule = materiel.Code;
        surcharge.Libelle = materiel.Libelle;
        surcharge.IsPersonnel = false;
        surcharge.IsMateriel = true;
        matriculeRessourceId = materiel.RessourceId;
      }

      if (matriculeRessourceId === ressource.RessourceId) {
        surcharge.Type = $ctrl.typeSurcharge.Surcharge;
      }
      else {
        surcharge.Type = $ctrl.typeSurcharge.Exception;
      }

      return surcharge;
    }

    // Retourne l'index de l'élément d'une liste en fonction d'un viewId
    // - array : tableau ou il faut chercher
    // - viewId : identifiant de la vue à rechercher
    // - return : l'index dans le tableau où se trouve viewId, -1 si viewId ne se trouve pas dans le tableau
    function GetViewIndex(array, viewId) {
      // Note : pas d'itération ici car c'est justement l'index qui est retourné
      for (var i = 0; i < array.length; i++) {
        if (array[i].ViewId === viewId) {
          return i;
        }
      }
      return -1;
    }

    // Vérifie la validité des composantes d'une surcharge ou d'une exception
    // En cas d'erreur, ajoute le ou les messages d'erreurs dans 'surcharge.Errors'
    // - surcharge : la surcharge ou l'exception concernée
    // - return : un object anonyme : Valid (bool) et Empty (bool)
    function CheckSurcharge(surcharge) {
      // Vérification unitaire de la surcharge ou de l'exception
      var checkResult = BaremeService.CheckCurrentBareme(surcharge, surcharge.Ressource);

      // Si c'est une surcharge, ses composantes doivent être différentes de celles de la ressource parente
      // La ressource parente et la surcharge ne doivent pas être en erreur pour pouvoir vérifier
      if (surcharge.Type === $ctrl.typeSurcharge.Surcharge && checkResult.Valid && surcharge.Ressource.Errors.length === 0) {
        if (surcharge.CurrentBareme.Prix === surcharge.Ressource.CurrentBareme.Prix
          && surcharge.CurrentBareme.PrixChauffeur === surcharge.Ressource.CurrentBareme.PrixChauffeur
          && surcharge.CurrentBareme.PrixConduite === surcharge.Ressource.CurrentBareme.PrixConduite) {
          checkResult.Valid = false;
          surcharge.Errors.push($ctrl.resources.BaremeExploitation_EnregistrementImpossible_SurchargeComposantesIdentiques);
        }
      }

      return checkResult;
    }

    // Vérifie que le personnel ou le matériel n'est pas déjà en surcharge ou en exception
    // Notifie l'utilisateur en cas de surcharge ou d'exception déjà existante
    // - personnelId : identifiant du personnel ou 0 s'il s'agit d'un matériel
    // - materielId : identifiant du matériel ou 0 s'il s'agit d'un personnel
    // - return : true si le personnel ou le matériel est déjà en surcharge ou en exception, sinon false
    function CheckIsAlreadySurcharged(personnelId, materielId) {
      for (let chapitre of $ctrl.Chapitres) {
        for (let sousChapitre of chapitre.SousChapitres) {
          for (let ressource of sousChapitre.Ressources) {
            if (ressource.Surcharges) {
              for (let surcharge of ressource.Surcharges) {
                if (!surcharge.Deleted) {
                  if (personnelId !== 0) {
                    if (surcharge.Personnel !== null && surcharge.Personnel.PersonnelId === personnelId) {
                      Notify.error(Format(
                        $ctrl.resources.BaremeExploitation_PersonnelDejaEnSurcharge,
                        chapitre.Code + ' - ' + chapitre.Libelle,
                        sousChapitre.Code + ' - ' + sousChapitre.Libelle,
                        ressource.Code + ' - ' + ressource.Libelle));
                      return true;
                    }
                  }
                  else if (materielId !== 0) {
                    if (surcharge.Materiel !== null && surcharge.Materiel.MaterielId === materielId) {
                      Notify.error(Format(
                        $ctrl.resources.BaremeExploitation_MaterielDejaEnSurcharge,
                        chapitre.Code + ' - ' + chapitre.Libelle,
                        sousChapitre.Code + ' - ' + sousChapitre.Libelle,
                        ressource.Code + ' - ' + ressource.Libelle));
                      return true;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return false;
    }

    // Indique si le barème à changé
    // return : true si le barème à changé, sinon false
    function HasPendingChanges() {
      if ($ctrl.Chapitres) {
        for (let ressource of BaremeService.GetRessources($ctrl.Chapitres)) {
          if (ressource.Changed) {
            return true;
          }
          if (ressource.Surcharges) {
            for (let surcharge of ressource.Surcharges) {
              if (surcharge.Deleted || surcharge.Changed)
                return true;
            }
          }
        }
      }
      return false;
    }

    // Format une chaîne de caractère comme String.Format en .net
    // NPI : à mettre dans un service...
    function Format(format) {
      var args = Array.prototype.slice.call(arguments, 1);
      return format.replace(/{(\d+)}/g, function (match, number) {
        return typeof args[number] !== 'undefined'
          ? args[number]
          : match
          ;
      });
    }

    // Affiche l'historique d'une ressource
    // - bareme : la ressource concernée
    function ShowRessourceHistorique(ressource) {
      BaremeService.GetCiRessourceHistorique($ctrl.ci.CiId, ressource.ReferentielEtendus[0].ReferentielEtenduId)
        .then((result) => $scope.$broadcast('showHistoriqueRequested', {
          Baremes: result.data,
          Ressource: ressource
        }))
        .catch(actionLoadError);
    }

    // Affiche l'historique d'une surcharge ou d'une exception
    // - bareme : la surcharge ou l'exception concernée
    function ShowSurchargeHistorique(surcharge) {
      var personnelId = null;
      var materielId = null;
      if (surcharge.IsPersonnel) {
        personnelId = surcharge.Personnel.PersonnelId;
      }
      else if (surcharge.IsMateriel) {
        materielId = surcharge.Materiel.MaterielId;
      }
      else {
        return;
      }
      BaremeService.GetCiSurchargeHistorique($ctrl.ci.CiId, surcharge.Ressource.ReferentielEtendus[0].ReferentielEtenduId, personnelId, materielId)
        .then((result) => $scope.$broadcast('showHistoriqueRequested', {
          Baremes: result.data,
          Ressource: surcharge.Ressource,
          Surcharge: surcharge
        }))
        .catch(actionLoadError);
    }

    // Indique si le barème CI est différent du barème organisation pour une ressource
    // - ressource : la ressource concernée
    function IsBaremeCiDifferentBaremeOrganisation(ressource) {
      if (ressource.RappelBaremeOrganisation && ressource.CurrentBareme) {
        return ressource.CurrentBareme.Prix !== ressource.RappelBaremeOrganisation.Prix ||
          ressource.CurrentBareme.Unite.UniteId !== ressource.RappelBaremeOrganisation.UniteId ||
          ressource.CurrentBareme.PrixChauffeur !== ressource.RappelBaremeOrganisation.PrixChauffeur ||
          ressource.CurrentBareme.PrixConduite !== ressource.RappelBaremeOrganisation.PrixConduite;
      }
      return false;
    }

    // Retourne le message pour le rappel du barème organisation
    // - ressource : la ressource concernée
    function GetRappelBaremeOrganisationMessage(ressource) {
      return BaremeService.GetBaremeMessage(ressource.RappelBaremeOrganisation, ressource.RappelBaremeOrganisation.Libelle);
    }
  }
})();
