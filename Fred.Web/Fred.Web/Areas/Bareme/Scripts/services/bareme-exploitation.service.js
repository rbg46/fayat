(function () {
    'use strict';

    angular.module('Fred').service('BaremeService', BaremeService);

    BaremeService.$inject = ['$http', '$q', '$resource'];

    function BaremeService($http, $q, $resource) {

        //////////////////////////////////////////////////////////////////
        // Déclaration des membres publiques                            //
        //////////////////////////////////////////////////////////////////
        var service = {
            GetUnite: GetUnite,
            UpdateUnite: UpdateUnite,
            CloneBareme: CloneBareme,
            CopyBareme: CopyBareme,
            CreateEmptyBareme: CreateEmptyBareme,
            BaremeContainsEmptyComposante: BaremeContainsEmptyComposante,
            InitializeRessource: InitializeRessource,
            InitializeBareme: InitializeBareme,
            InitializeSousChapitre: InitializeSousChapitre,
            InitializeChapitre: InitializeChapitre,
            ProcessBaremeChanged: ProcessBaremeChanged,
            UpdateBaremeFromView: UpdateBaremeFromView,
            ExpandAll: ExpandAll,
            CollapseAll: CollapseAll,
            GetErrorMessage: GetErrorMessage,
            GetComposantesOriginaleMessage: GetComposantesOriginaleMessage,
            GetBaremeMessage: GetBaremeMessage,
            CheckCurrentBareme: CheckCurrentBareme,
            IsSamePeriod: IsSamePeriod,
            GetRessources: GetRessources,
            SetValeurParDefautPourLesComposantesNull: SetValeurParDefautPourLesComposantesNull,
            HasPendingChanges: function () { return false; },
            ValeurParDefaut: null,
            SANS_UNITE_ID: 0,
            Unites: [{ UniteId: 0, Libelle: '' }, { UniteId: 4, Libelle: 'Heure' }]
        };

        var typeRessource = {
            Materiel: 1,
            Personnel: 2
        };
        var defaultUnite = GetUnite(service.SANS_UNITE_ID);

        // Retourne l'unité en fonction de son identifiant (pour la liste déroulante des unités)
        // - uniteId : identifiant de l'unité
        // - return : l'unité (object anonyme : { UniteId: 0, Libelle: '' })
        function GetUnite(uniteId) {
            for (let unite of service.Unites) {
                if (unite.UniteId === uniteId) {
                    return unite;
                }
            }
            return null;
        }

        // Met à jour les unités du barème
        // - bareme : le barème concerné
        function UpdateUnite(baremes) {
            for (let bareme of baremes) {
                bareme.Unite = GetUnite(bareme.UniteId);
            }
        }

        // Clone un barème
        // - bareme : bareme à cloner
        // - return : le barème cloné
        function CloneBareme(bareme) {
            return {
                Prix: bareme.Prix,
                PrixChauffeur: bareme.PrixChauffeur,
                PrixConduite: bareme.PrixConduite,
                Unite: bareme.Unite,
                PrixView: bareme.Prix ? bareme.Prix.toString() : '',
                PrixChauffeurView: bareme.PrixChauffeur ? bareme.PrixChauffeur.toString() : '',
                PrixConduiteView: bareme.PrixConduite ? bareme.PrixConduite.toString() : ''
            };
        }

        // Copie un barème dans un autre en copiant ou non les composantes vides.
        // - source : le barème source
        // - target : le barème cible
        // - copyComposantesVides : indique si les composantes vides doivent ou non être copiées
        function CopyBareme(source, target, copyComposantesVides) {
            if (copyComposantesVides || source.Prix !== null) {
                target.Prix = source.Prix;
                target.PrixView = source.Prix ? source.Prix.toString() : '';
            }
            if (copyComposantesVides || source.PrixChauffeur !== null) {
                target.PrixChauffeur = source.PrixChauffeur;
                target.PrixChauffeurView = source.PrixChauffeur ? source.PrixChauffeur.toString() : '';
            }
            if (copyComposantesVides || source.PrixConduite !== null) {
                target.PrixConduite = source.PrixConduite;
                target.PrixConduiteView = source.PrixConduite ? source.PrixConduite.toString() : '';
            }
            if (copyComposantesVides || source.Unite.UniteId !== service.SANS_UNITE_ID) {
                target.Unite = source.Unite;
            }
        }

        // Retourne un barème vide
        // return: un barème vide
        function CreateEmptyBareme() {
            return {
                Prix: null,
                PrixChauffeur: null,
                PrixConduite: null,
                Unite: defaultUnite,
                PrixView: '',
                PrixChauffeurView: '',
                PrixConduiteView: ''
            };
        }

        // Indique si un barème contient au moins une composante vide
        // - bareme : le barème concerné
        // - isMateriel : indique s'il s'agit d'une type matériel
        function BaremeContainsEmptyComposante(bareme, isMateriel) {
            var composanteVide = bareme.Prix === null || bareme.Unite.UniteId === service.SANS_UNITE_ID;
            if (isMateriel && !composanteVide) {
                composanteVide = bareme.PrixChauffeur === null || bareme.PrixConduite === null;
            }
            return composanteVide;
        }

        // Initialise un barème
        // - bareme : le bareme concerné
        // - currentBareme : les composantes courantes du barème
        function InitializeBareme(bareme, currentBareme) {
            bareme.Errors = [];
            bareme.CurrentBareme = currentBareme;
            bareme.OriginalBareme = CloneBareme(currentBareme);
            bareme.Changed = false;
            bareme.OnChange = function () { ProcessBaremeChanged(this, false); };
        }

        // Traite le changement de valeur d'une composante d'un bareme
        // - bareme : le bareme concerné
        function ProcessBaremeChanged(bareme, onlyClearError) {
            // Récupère les bonnes valeurs
            UpdateBaremeFromView(bareme.CurrentBareme);

            if (!onlyClearError) {
                bareme.Changed =
                    bareme.CurrentBareme.Prix !== bareme.OriginalBareme.Prix
                    || bareme.CurrentBareme.Unite.UniteId !== bareme.OriginalBareme.Unite.UniteId
                    || bareme.CurrentBareme.PrixChauffeur !== bareme.OriginalBareme.PrixChauffeur
                    || bareme.CurrentBareme.PrixConduite !== bareme.OriginalBareme.PrixConduite;
            }

            // En cas de modification d'une composante, que sa valeur soit = ou != de sa valeur d'origine, il faut supprimer les erreurs
            // C'est au prochain enregistrement que les erreurs seront à nouveau vérifiés
            bareme.Errors = [];
        }

        // Met à jour les valeurs d'un barème par rapport à ses valeurs dans la vue
        // - bareme : le barème concerné
        function UpdateBaremeFromView(bareme) {
            bareme.Prix = GetValue(bareme.PrixView);
            bareme.PrixChauffeur = GetValue(bareme.PrixChauffeurView);
            bareme.PrixConduite = GetValue(bareme.PrixConduiteView);
        }

        // Initialise une ressource
        // - ressource : la ressource concernée
        function InitializeRessource(ressource) {
            ressource.IsPersonnel = ressource.TypeRessourceId === typeRessource.Personnel;
            ressource.IsMateriel = ressource.TypeRessourceId === typeRessource.Materiel;
        }

        // Initialise un sous-chapitre
        // Note : les ressources doivent être initialisées avant
        // - sousChapitre : le sous-chapitre concerné
        function InitializeSousChapitre(sousChapitre) {
            sousChapitre.Bareme = CreateEmptyBareme();

            // Détermine si un sous-chapitre est de type personnel et/ou matériel
            // Met le résultat dans sousChapitre.IsPersonnel et sousChapitre.IsMateriel
            sousChapitre.IsPersonnel = false;
            sousChapitre.IsMateriel = false;
            for (let ressource of sousChapitre.Ressources) {
                if (!sousChapitre.IsPersonnel && ressource.IsPersonnel) {
                    sousChapitre.IsPersonnel = true;
                    if (sousChapitre.IsPersonnel && sousChapitre.IsMateriel) {
                        return;
                    }
                }
                else if (!sousChapitre.IsMateriel && ressource.IsMateriel) {
                    sousChapitre.IsMateriel = true;
                    if (sousChapitre.IsPersonnel && sousChapitre.IsMateriel) {
                        return;
                    }
                }
            }
        }

        // Initialise un chapitre
        // Note : les sous-chapitres doivent être initialisés avant
        // - chapitre : le chapitre concerné
        function InitializeChapitre(chapitre) {
            chapitre.Bareme = CreateEmptyBareme();

            // Détermine si un chapitre est de type personnel et/ou matériel
            // Met le résultat dans chapitre.IsPersonnel et chapitre.IsMateriel
            chapitre.IsPersonnel = false;
            chapitre.IsMateriel = false;
            for (let sousChapitre of chapitre.SousChapitres) {
                chapitre.IsPersonnel |= sousChapitre.IsPersonnel;
                chapitre.IsMateriel |= sousChapitre.IsMateriel;
                if (chapitre.IsPersonnel && chapitre.IsMateriel) {
                    return;
                }
            }
        }

        // Déplie tous les chapitres et sous-chapitres dans la vue
        function ExpandAll() {
            angular.element(document.querySelectorAll('[id^=R1]')).collapse('show');
            angular.element(document.querySelectorAll('[id^=R2]')).collapse('show');
        }

        // Plie tous les chapitres et sous-chapitres dans la vue
        function CollapseAll() {
            angular.element(document.querySelectorAll('[id^=R1]')).collapse('hide');
            angular.element(document.querySelectorAll('[id^=R2]')).collapse('hide');
        }

        // Retourne le message d'erreur d'un barème
        // - bareme : le barème concerné
        // - return : le message
        function GetErrorMessage(bareme) {
            var message = "";
            if (bareme.Errors) {
                for (var i = 0; i < bareme.Errors.length; i++) {
                    if (i > 0) {
                        message += '\r\n';
                    }
                    message += bareme.Errors[i];
                }
            }
            return message;
        }

        // Retourne un message contenant les valeurs originales d'un barème
        // En cas d'ajout, le message indiquera qu'il n'y a pas de composante originale
        // - bareme : la bareme concerné
        // - ressource : la ressource du barème
        // - typeRessourceEnum : enumération typeRessource
        // - return : le message
        function GetComposantesOriginaleMessage(bareme) {
            var message = "";
            if (bareme.OriginalBareme) {
                var originalBareme = bareme.OriginalBareme;
                if (originalBareme.Prix === null && originalBareme.Unite.UniteId === 0 && originalBareme.PrixChauffeur === null && originalBareme.PrixConduite === null) {
                    message = resources.BaremeExploitation_PasDeComposanteOriginale;
                }
                else {
                    message = service.GetBaremeMessage(originalBareme, resources.BaremeExploitation_ComposantesOriginales);
                }
            }
            else {
                message = resources.BaremeExploitation_PasDeComposanteOriginale;
            }
            return message;
        }

        // Retourne un message contenant les composantes d'un barème
        // - bareme : le barème concerné
        // - header : le header du message
        function GetBaremeMessage(bareme, header) {
            var message = "";
            if (header) {
                message += header + "\r\n";
            }
            if (bareme.Prix) {
                message += "- " + resources.BaremeExploitation_Prix + " : " + bareme.Prix + "\r\n";
            }
            if (bareme.Unite.UniteId !== 0) {
                message += "- " + resources.BaremeExploitation_Unite + " : " + bareme.Unite.Libelle + "\r\n";
            }
            if (bareme.PrixChauffeur) {
                message += "- " + resources.BaremeExploitation_Chauffeur + " : " + bareme.PrixChauffeur + "\r\n";
            }
            if (bareme.PrixConduite) {
                message += "- " + resources.BaremeExploitation_Conduite + " : " + bareme.PrixConduite + "\r\n";
            }
            return message;
        }

        // Vérifie la validité des composantes courantes d'un barême
        // En cas d'erreur, ajoute le ou les messages d'erreurs dans la propriété 'Errors' du barême
        // - barême : le barême concerné
        // - ressource : la ressource du barême
        // - return : un object anonyme : Valid (bool) et Empty (bool)
        function CheckCurrentBareme(bareme, ressource) {
            var currentBareme = bareme.CurrentBareme;
            var prixEmpty = currentBareme.Prix === null;
            var prixValid = !prixEmpty && currentBareme.Prix !== 0;
            var uniteEmpty = currentBareme.Unite.UniteId === 0;
            var uniteValid = !uniteEmpty;
            var prixChauffeurEmpty = false, prixChauffeurValid = true;
            var prixConduiteValid = true;
            if (ressource.IsMateriel) {
                prixChauffeurEmpty = currentBareme.PrixChauffeur === null;
                prixChauffeurValid = !prixChauffeurEmpty && currentBareme.PrixChauffeur !== 0;
                prixConduiteValid = currentBareme.PrixConduite === null || currentBareme.PrixConduite !== 0;
            }

            // Vérifie la validité des composantes et ajoute les erreurs le cas échéant
            var valid = prixValid & uniteValid & prixChauffeurValid & prixConduiteValid;
            if (!valid) {
                if (!prixValid) {
                    bareme.Errors.push(resources.BaremeExploitation_EnregistrementImpossible_PrixManquantOuZero);
                }
                if (!uniteValid) {
                    bareme.Errors.push(resources.BaremeExploitation_EnregistrementImpossible_UniteManquante);
                }
                if (!prixChauffeurValid) {
                    bareme.Errors.push(resources.BaremeExploitation_EnregistrementImpossible_PrixChauffeurManquantOuZero);
                }
                if (!prixConduiteValid) {
                    bareme.Errors.push(resources.BaremeExploitation_EnregistrementImpossible_PrixConduiteZero);
                }
            }

            return {
                Valid: valid,
                Empty: prixEmpty || uniteEmpty || prixChauffeurEmpty
            };
        }

        // Indique si 2 dates sont sur la même période
        // return : true si les 2 dates sont sur la même période, sinon false
        function IsSamePeriod(date1, date2) {
            return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth();
        }

        // Retourne toutes les ressources des chapitres
        // - chapitres : les chapitres concernés
        function* GetRessources(chapitres) {
            for (let chapitre of chapitres) {
                for (let sousChapitre of chapitre.SousChapitres) {
                    for (let ressource of sousChapitre.Ressources) {
                        yield ressource;
                    }
                }
            }
        }

        // Met les valeurs par défaut dans les champs vides d'un barème
        // - bareme : le barème concerné
        // - ressource : la ressource parente
        function SetValeurParDefautPourLesComposantesNull(bareme, ressource) {
            var changed = false;
            var currentBareme = bareme.CurrentBareme;

            if (currentBareme.Prix === null) {
                currentBareme.PrixView = "" + service.ValeurParDefaut.Prix;
                changed = true;
            }

            if (currentBareme.Unite.UniteId === service.SANS_UNITE_ID) {
                currentBareme.Unite = service.GetUnite(service.ValeurParDefaut.Unite.UniteId);    // NPI : à changer lors de l'implémentation réel des unités
                changed = true;
            }

            if (ressource.IsMateriel && currentBareme.PrixChauffeur === null) {
                currentBareme.PrixChauffeurView = "" + service.ValeurParDefaut.PrixChauffeur;
                changed = true;
            }

            if (changed) {
                bareme.OnChange();
            }
        }


        //////////////////////////////////////////////////////////////////
        // Autre                                                        //
        //////////////////////////////////////////////////////////////////

        // Retourne la bonne valeur des composantes 'prix' de la vue
        // - viewValue : la valeur dans la vue
        // - return : la bonne valeur
        function GetValue(viewValue) {
            if (viewValue === '')
                return null;
            return Number(viewValue);
        }


        //////////////////////////////////////////////////////////////////
        // HTTP                                                         //
        //////////////////////////////////////////////////////////////////

        service.GetBaremeByOrganisationIdAndPeriode = function (periode, organisationId) {
            return $http.get("/api/BaremeExploitationOrga/GetBaremeByOrganisationIdAndPeriode?periode=" + periode + "&organisationId=" + organisationId);
        };

        service.ParentIsEmpty = function (periode, organisationId) {
            return $http.get("/api/BaremeExploitationOrga/ParentIsEmpty?periode=" + periode + "&organisationId=" + organisationId);
        };

        service.GetOrganisationParentsByOrgaIdMaxGroupe = function (organisationId) {
            return $http.get("/api/Organisation/Parents?organisationId=" + organisationId);
        };

        service.GetReferentielFixeByGroupeId = function (groupeId) {
            return $http.get("/api/BaremeExploitationOrga/GetReferentielFixe/" + groupeId);
        };

        service.SaveBaremeOrganisation = function (ressourcesToUpdate, organisationId, periode) {
            var bareme = {
                RessourcesToUpdate: ressourcesToUpdate,
                OrganisationId: organisationId,
                Periode: periode
            };

            return $http.post("/api/BaremeExploitationOrga/Save", bareme);
        };

        service.CIGetEnregistrementImpossibleMessage = function (ciId, periode) {
            return $http.get("/api/BaremeExploitationCI/GetEnregistrementImpossibleMessage?ciId=" + ciId + "&periode=" + periode);
        };

        service.GetSocieteByCIId = function (ciId) {
            return $http.get("/api/CI/GetSocieteByCIId/" + ciId);
        };

        service.GetBaremeByCIIdAndPeriode = function (periode, ciId) {
            return $http.get("/api/BaremeExploitationCI/GetBaremeByCIIdAndPeriode?periode=" + periode + "&ciId=" + ciId);
        };

        service.GetReferentielEtenduBySocieteId = function (societeId) {
            return $http.get("/api/BaremeExploitationCI/GetReferentielEtendu/" + societeId);
        };

        service.SaveBaremeCI = function (ressourcesToUpdate, surchargesToAdd, surchargesToUpdate, surchargesToDelete, ciId, periode) {
            var bareme = {
                RessourcesToUpdate: ressourcesToUpdate,
                SurchargesToAdd: surchargesToAdd,
                SurchargesToUpdate: surchargesToUpdate,
                SurchargesToDelete: surchargesToDelete,
                CiId: ciId,
                Periode: periode
            };

            return $http.post("/api/BaremeExploitationCI/Save", bareme);
        };

        service.GetSurchargesByPeriodeAndCIId = function (periode, ciId) {
            return $http.get("/api/BaremeExploitationCI/GetSurchargesByPeriodeAndCIId?periode=" + periode + "&ciId=" + ciId);
        };

        service.SynchroCI = function (periode, ciId) {
            return $http.post("/api/BaremeExploitationCI/Synchro?periode=" + periode + "&ciId=" + ciId);
        };

        service.SynchroOrga = function (periode, orgaId) {
            return $http.post("/api/BaremeExploitationOrga/Synchro?periode=" + periode + "&orgaId=" + orgaId);
        };

        service.RefreshSession = function () {
            $http.get("/api/BaremeExploitation/RefreshSession");
        };

        service.GetValeurParDefaut = function () {
            return $http.get("/api/BaremeExploitation/GetValeurParDefaut");
        };

        service.GetOrgaHistorique = function (organisationId, ressourceId) {
            return $http.get("/api/BaremeExploitationOrga/GetHistorique?organisationId=" + organisationId + "&ressourceId=" + ressourceId);
        };

        service.GetCiRessourceHistorique = function (ciId, referentielEtenduId) {
            return $http.get("/api/BaremeExploitationCI/GetRessourceHistorique?ciId=" + ciId + "&referentielEtenduId=" + referentielEtenduId);
        };

        service.GetCiSurchargeHistorique = function (ciId, referentielEtenduId, personnelId, materielId) {
            return $http.get("/api/BaremeExploitationCI/GetSurchargeHistorique?ciId=" + ciId + "&referentielEtenduId=" + referentielEtenduId + "&personnelId=" + personnelId + "&materielId=" + materielId);
        };

        service.ExportExcelOrganisation = function (object,isPdf) {
            return $http.post("/api/BaremeExploitationOrga/ExportBaremeOrganisationExcel?isPdf=" + isPdf, object);
        };

        service.ExtractBaremeOrganisationExcel = function (id, isPdf) {
            window.location.href = "/api/BaremeExploitationOrga/ExtractBaremeOrganisationExcel?id=" + id + "&isPdf=" + isPdf;
        };

        service.ExportExcelCi = function (objectCi, isPdf) {
            return $http.post("/api/BaremeExploitationCI/ExportBaremeCiExcel?isPdf=" + isPdf, objectCi);
        };

        service.ExtractBaremeCiExcel = function (id, isPdf) {
            window.location.href = "/api/BaremeExploitationCI/ExtractBaremeCiExcel?id=" + id + "&isPdf=" + isPdf;
        };
        return service;
    }
})();
