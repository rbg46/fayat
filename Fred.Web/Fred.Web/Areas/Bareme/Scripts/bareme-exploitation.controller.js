(function (angular) {
  'use strict';

  angular.module('Fred').controller('BaremeController', BaremeController);

  BaremeController.$inject = ['$scope', 'BaremeService', 'Notify'];

  function BaremeController($scope, BaremeService, Notify) {
    // Assignation de la valeur du scope au controller pour les templates non mis à jour
    var $ctrl = this;
    var refreshSessionTimelap = 20 * 60 * 1000;   // 20 minutes
    $ctrl.resources = resources;
    $ctrl.readonly = true;

    $ctrl.typeBareme = {
      Organisation: 1,
      CI: 2
    };
    $ctrl.typeSurcharge = {
      Surcharge: 1,
      Exception: 2
    };

    $ctrl.type = $ctrl.typeBareme.Organisation;

    init();
    return $ctrl;

    function init() {

      window.setTimeout(RefreshSession, refreshSessionTimelap);

      $scope.$on('changePeriode', function (event, periode) {
        $ctrl.periode = periode;
        loadBareme();
      });
      $scope.$on('changeOrganisation', function (event, organisation) {
        $ctrl.organisation = organisation;
        loadBareme();
      });
      $scope.$on('changeCI', function (event, ci) {
        $ctrl.ci = ci;
        loadBareme();
      });
      $scope.$on('postSynchro', function (event) {
        loadBareme();
      });
      $scope.$on('saveRequested', function () {
        $scope.$broadcast('saveBareme');
      });
      $scope.$on('cancelRequested', function () {
        $scope.$broadcast('cancelBareme');
      });
      $scope.$on('expandAllRequested', function () {
        $scope.$broadcast('expandAllBareme');
      });
      $scope.$on('collapseAllRequested', function () {
        $scope.$broadcast('collapseAllBareme');
      });
      $scope.$on('searchRequested', function (event, search) {
        $scope.$broadcast('searchBareme', search);
      });
      $scope.$on('parentIsEmpty', function (event, parentEmpty) {
        $scope.$broadcast('parentEmpty', parentEmpty);
      });
    }

    function RefreshSession() {
      BaremeService.RefreshSession();
      window.setTimeout(RefreshSession, refreshSessionTimelap);
    }

    function loadBareme() {
      // Note : ne pas changer l'ordre des évènements : 'readonlyBareme' puis 'loadBareme'
      if ($ctrl.periode) {
        if ($ctrl.type === $ctrl.typeBareme.Organisation) {
          if ($ctrl.organisation) {
            // Seule la période correspondante à la date du jour est modifiable
            var periodeDuJour = new Date();
            var date = $ctrl.periode.split('-');
            var month = date[0] - 1; // en JS, 0 = janvier, 1 = février, etc...      
            var periodeBareme = new Date(date[2], month, 1);
            $ctrl.readonly = false;
            var readonlyMessage = "";
            if (!BaremeService.IsSamePeriod(periodeDuJour, periodeBareme)) {
              $ctrl.readonly = true;
              readonlyMessage = $ctrl.resources.BaremeExploitationOrga_EnregistrementImpossible_MauvaisePeriode;
            }

            $scope.$broadcast('readonlyBareme', $ctrl.readonly, readonlyMessage);
            $scope.$broadcast('loadBareme', { periode: $ctrl.periode, organisation: $ctrl.organisation, readonly: $ctrl.readonly });
          }
        }
        else if ($ctrl.type === $ctrl.typeBareme.CI) {
          if ($ctrl.ci) {
            BaremeService.CIGetEnregistrementImpossibleMessage($ctrl.ci.CiId, $ctrl.periode)
              .then(actionCIGetSaveMode)
              .catch(() => Notify.error($ctrl.resources.BaremeExploitation_ChargementErreur));
          }
        }
      }
    }

    function actionCIGetSaveMode(result) {
      $ctrl.readonly = result.data !== null;
      var readonlyMessage = "";
      if ($ctrl.readonly) {
        readonlyMessage = result.data;
      }

      $scope.$broadcast('readonlyBareme', $ctrl.readonly, readonlyMessage);
      $scope.$broadcast('loadBareme', { periode: $ctrl.periode, ci: $ctrl.ci, readonly: $ctrl.readonly });
    }
  }
}(angular));
