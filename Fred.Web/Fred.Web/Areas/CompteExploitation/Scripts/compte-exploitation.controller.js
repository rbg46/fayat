(function (angular) {
    'use strict';

    angular.module('Fred').controller('CompteExploitationController', CompteExploitationController);

    CompteExploitationController.$inject = ['$q', '$scope', '$filter',
        'ProgressBar',
        'CompteExploitationService',
        'CiManagerService',
        'Notify',
        'BudgetDateService',
        'UserService',
        'favorisService',
        '$window'];

    function CompteExploitationController($q, $scope, $filter,
        ProgressBar,
        CompteExploitationService,
        CiManagerService,
        Notify,
        BudgetDateService,
        UserService,
        favorisService,
        $window) {

        // assignation de la valeur du scope au controller pour les templates non mis à jour
        var $ctrl = this;

        //////////////////////////////////////////////////////////////////
        // Déclaration des propriétés publiques                         //
        //////////////////////////////////////////////////////////////////

        $ctrl.maxDate = moment().endOf('month');
        $ctrl.journalisation = false;

        //ci selectionnée dans la picklist
        $ctrl.ciSelected = null;

        $ctrl.ciSelectedlist = [];

        $ctrl.clotureOF = false;
        $ctrl.ciDisabled = false;
        // Devise de référence du CI sélectionné
        $ctrl.deviseSelected = "";

        $ctrl.favoriId = null;
        // Instanciation Objet Ressources
        $ctrl.resources = resources;
        // Disable buttons at loading
        $ctrl.btnTachesDisabled = true;
        $ctrl.btnRessourcesDisabled = true;
        $ctrl.printButtonDisabled = true;
        $ctrl.analysisAxis = { chapitre: "Chapitre", sousChapitre: "SousChapitre", ressource: "Ressource", t1: "T1", t2: "T2", t3: "T3", complet: "Complet" };


        //Control UI Modal Verif Pointagge
        $ctrl.btnPointingContinueActiveted = true;
        $ctrl.step1PointingActiveted = false;
        $ctrl.step2PointingActiveted = false;

        $ctrl.popVisible = {
            popDepenses: false,
            popPointage: false,
            popBilan: false,
            popTabSynthese: false
        };

        $ctrl.namePreviousEditionType = null;

        var listTypePointing = {
            personnel: 1,
            materiel: 2
        };

        var maxCiSelected = 6;

        $ctrl.typeSelected = listTypePointing['personnel'];

        $ctrl.pointingType = {
            personnel: true,
            materiel: false
        };

        //////////////////////////////////
        // INIT                         //
        //////////////////////////////////

        $scope.init = function init(favoriId) {

            $ctrl.blocDepensesExploitation = false;
            $ctrl.firstLevelFilter = true;
            $ctrl.blocInformation = true;
            $ctrl.firstLevelFilter = true;
            $ctrl.firstLevelFilterTriangle = false;
            $ctrl.buttonsSecondFilterVisible = false;
            $ctrl.btnCancelVisible = true;
            $ctrl.btnContinuerToFormatVisible = false;
            $ctrl.btnValiderVisible = false;
            $ctrl.btnReturn1Visible = false;
            $ctrl.btnReturn2Visible = false;
            $("#secondLevelFilterTitle").hide();
            $("div[id^=firstLevelPartialStateFilter]").hide();
            $("div[id^=secondLevelFilter]").hide();
            $ctrl.Period = Date.now();

            $ctrl.step1PointingActiveted = true;
            $ctrl.step2PointingActiveted = false;


            UserService.getCurrentUser().then(function (data) {
                $ctrl.currentUser = data;
                $ctrl.userGroup = $ctrl.currentUser.Personnel.Societe.GroupeId;
            });



            $ctrl.exportParameters = {
                CI: "",
                CIName: "",
                firstLevelFilter: "",
                firstLevelValue: "",
                analyticAxis: "TacheRessource",
                secondLevelFilters: "",
                formatExport: "PDF", // PDF Activé par défaut
                period: $ctrl.Period,
                typeEdtion: ""
            };

            $ctrl.favoriId = parseInt(favoriId) || 0;
            $ctrl.getFilter();
        };

        //////////////////////////////////////////////////////////////////
        //                      PUBLIC METHODS                          //
        //////////////////////////////////////////////////////////////////

        $ctrl.handleAddFilter2Favoris = function handleAddFilter2Favoris() {
            $ctrl.addFilter2Favoris();
        };

        $ctrl.addFilter2Favoris = function addFilter2Favoris() {
            var filterToSave = { Ci: $ctrl.ciSelected, Period: $ctrl.Period };
            var url = $window.location.pathname;
            if ($ctrl.favoriId !== 0) {
                url = $window.location.pathname.slice(0, $window.location.pathname.lastIndexOf("/"));
            }
            favorisService.initializeAndOpenModal("CompteExploitationEdition", url, filterToSave);
        };

        $ctrl.getFilter = function getFilter() {
            if ($ctrl.favoriId !== 0) {
                return favorisService.getFilterByFavoriId($ctrl.favoriId)
                    .then(function (response) {
                        $ctrl.ciSelected = response.CI;
                        $ctrl.Period = response.Period;
                        affectationParametresFiltrage();
                    })
                    .catch(function () { Notify.error($ctrl.resources.Global_Notification_Error); });
            }
            else {
                if (sessionStorage.getItem('compteExploitationFilter') !== null) {
                    $ctrl.Period = JSON.parse(sessionStorage.getItem('compteExploitationFilter')).Period;
                    if (JSON.parse(sessionStorage.getItem('compteExploitationFilter').Ci !== undefined)) {
                        $ctrl.ciSelected = JSON.parse(sessionStorage.getItem('compteExploitationFilter')).Ci;
                        affectationParametresFiltrage();
                    }
                }
            }
        };

        /*
        * BOUTONS CHOIX D'AXE (Etape 2)
        */
        $ctrl.btnAxeGroupClick = function btnAxeGroupClick(axe) {

            $ctrl.exportParameters.analyticAxis = axe;
            if (axe === "TacheRessource") {
                // Afficher les filtres dans le bon ordre
                // T1 / T2 / T3 / Chapitre / Ss Chapitre / Ressources
                $ctrl.alignRightsecondLevelGroupT = false;
                $("#btnTasksRes").addClass("selected");
                $("#btnResTasks").removeClass("selected");
            } else {
                // Afficher les filtres dans le bon ordre
                // Chapitre / Ss Chapitre / Ressources T1 / T2 / T3 /
                $ctrl.alignRightsecondLevelGroupT = true;
                $("#btnResTasks").addClass("selected");
                $("#btnTasksRes").removeClass("selected");
            }
        };

        // Contrôle de la période obligatoire
        $ctrl.changeDate = function changeDate() {
            if ($ctrl.Period === undefined) {
                $ctrl.Period = Date.now();
            }
            $ctrl.exportParameters.period = $ctrl.Period;
            sessionStorage.setItem('compteExploitationFilter', JSON.stringify({ Ci: $ctrl.ciSelected, Period: $ctrl.Period }));
        };

        /*
        * FILTRE NIVEAU 1 CLICK
        */
        var filterPerimetre = {
            "T1": false,
            "T2": false,
            "Chapitre": false,
            "SousChapitre": false,
            "Complet": false,
            "ChapitreBilan": false,
            "SousChapitreBilan": false,
            "RessourceBilan": false
        };

        /*
        * Click sur filtre de niveau 1
        */
        $ctrl.firstLevelFilterClick = function firstLevelFilterClick(el, filterType, noMoreFilter) {
            var currentEl = el.currentTarget;

            $ctrl.btnContinuerToSecondFilterVisible = false;
            $("div[id^=firstLevelFilter]").removeClass("selected");
            $(".inner-triangle").addClass("ng-hide");
            $(".triangle-down-arrow").addClass("ng-hide");

            $(currentEl).addClass("selected");
            $(currentEl).closest("div").find(".inner-triangle").removeClass("ng-hide");
            $("div[id^=firstLevelPartialStateFilter]").hide();
            if (!noMoreFilter) {
                $(currentEl).closest("div").find(".triangle-down-arrow").removeClass("ng-hide");
                $("#firstLevelPartialStateFilter" + filterType).show();
            }

            // On reset toutes les selections des lookups
            $ctrl.tacheSelected = "";
            $ctrl.chapSelected = "";
            $ctrl.sousChapSelected = "";
            $ctrl.ressourceSelected = "";

            // Si on change de filtre niveau 1, on cache le bouton "continuer"
            if (filterType === "ChapitreBilan" || filterType === "SousChapitreBilan" || filterType === "RessourceBilan") {
                $ctrl.btnContinuerToFormatVisible = false;
            }

            // Enregistrement filtre
            $.each(filterPerimetre, function (key, val) {

                if (key !== filterType) {
                    filterPerimetre[key] = false;
                } else {
                    filterPerimetre[key] = true;
                    var f = filterBlockActive;
                    switch (key) {
                        case $ctrl.analysisAxis.chapitre: f = filterBlockCanBeActiveChapSelected; break;
                        case $ctrl.analysisAxis.sousChapitre: f = filterBlockCanBeActiveSousChapSelected; break;
                        case $ctrl.analysisAxis.t1: f = filterBlockCanBeActiveT1Selected; break;
                        case $ctrl.analysisAxis.t2: f = filterBlockCanBeActiveT2Selected; break;
                        case $ctrl.analysisAxis.complet: $ctrl.btnContinuerToSecondFilterVisible = true;
                            f = filterBlockCanBeActiveCompletSelected; break;
                        default: break;
                    }
                    $ctrl.exportParameters["firstLevelFilterActive"] = f;
                }
            });

            $ctrl.exportParameters["firstLevelFilter"] = filterPerimetre;
        };

        /*
        * FILTRE NIVEAU 2 ---> FILTRES NIVEAU 1
        */
        $ctrl.secondLevelFiltersActivated = 0;
        var filterBlockActive = {
            "T1": false, "T2": false, "T3": false, "Chapitre": false, "SousChapitre": false, "Ressource": false
        };

        $ctrl.tabSyntheseStep = 0;
        $ctrl.tabSyntheseAxeDirection = "TacheRessource";
        $ctrl.tabSyntheseAxeList = [
            { code: "T1", label: $ctrl.resources.CE_Popup_Filtre2_T1, selected: false, order: 1, orderTR: 1, orderRT: 4 },
            { code: "T2", label: $ctrl.resources.CE_Popup_Filtre2_T2, selected: false, order: 2, orderTR: 2, orderRT: 5 },
            { code: "T3", label: $ctrl.resources.CE_Popup_Filtre2_T3, selected: false, order: 3, orderTR: 3, orderRT: 6 },
            { code: "Chapitre", label: $ctrl.resources.CE_Popup_Filtre2_Chap, selected: false, order: 4, orderTR: 4, orderRT: 1 },
            { code: "SousChapitre", label: $ctrl.resources.CE_Popup_Filtre2_SousChap, selected: false, order: 5, orderTR: 5, orderRT: 2 },
            { code: "Ressource", label: $ctrl.resources.CE_Popup_Filtre2_Ress, selected: false, order: 6, orderTR: 6, orderRT: 3 }
        ];

        var filterBlockCanBeActiveChapSelected = {
            "T1": true, "T2": true, "T3": true, "SousChapitre": true, "Ressource": true,
            "Chapitre": false
        };
        var filterBlockCanBeActiveSousChapSelected = {
            "T1": true, "T2": true, "T3": true, "Ressource": true,
            "Chapitre": false, "SousChapitre": false
        };
        var filterBlockCanBeActiveT1Selected = {
            "Chapitre": true, "T2": true, "T3": true, "SousChapitre": true, "Ressource": true,
            "T1": false
        };
        var filterBlockCanBeActiveT2Selected = {
            "Chapitre": true, "SousChapitre": true, "T3": true, "Ressource": true,
            "T1": false, "T2": false
        };
        var filterBlockCanBeActiveCompletSelected = {
            "Chapitre": true, "SousChapitre": true, "T3": true, "Ressource": true, "T1": true, "T2": true
        };

        /*
        * FILTRE NIVEAU 2 CLICK
        */
        $ctrl.secondLevelFilterClick = function secondLevelFilterClick(el, filterType) {
            var currentEl = el.currentTarget;
            var doThings = true;
            var mandatoryDisabledFilters = $ctrl.exportParameters["firstLevelFilterActive"];

            // Si on est dans un filtre obligatoirement désactivé
            $.each(mandatoryDisabledFilters, function (key, val) {
                if (!val && currentEl.id.indexOf("Filter" + key) !== -1) {
                    doThings = false;
                }
            });

            // Check si on ne clique pas un él désactivé
            if ($ctrl.secondLevelFiltersActivated === 4) {
                if (!filterBlockActive[filterType]) {
                    // Do nothing
                    doThings = false;
                }
            }

            if (doThings) {
                if ($(currentEl).hasClass("selected")) {
                    $(currentEl).removeClass("selected");
                    $(currentEl).closest("div").find(".inner-triangle").addClass("ng-hide");
                    $ctrl.secondLevelFiltersActivated--;
                    filterBlockActive[filterType] = false;
                }
                else {
                    $(currentEl).addClass("selected");
                    $(currentEl).closest("div").find(".inner-triangle").removeClass("ng-hide");
                    $ctrl.secondLevelFiltersActivated++;
                    filterBlockActive[filterType] = true;
                }

                switch ($ctrl.secondLevelFiltersActivated) {
                    case 3:
                        $.each(filterBlockActive, function (key, val) {
                            if (!val) {
                                $("#secondLevelFilter" + key).removeClass("disabled");
                            }
                        });
                        break;

                    case 4: // Nb max de filtres atteint
                        // On disable les 2 filtres restants
                        $.each(filterBlockActive, function (key, val) {
                            if (!val) {
                                $("#secondLevelFilter" + key).addClass("disabled");
                            }
                        });
                        break;
                }
            }
            // On relance la désactivation des filtres obligatoires
            disableSecondLevelFiltersVisibility();
            // Affectation paramètres filtrage --> AXES
            $ctrl.exportParameters["secondLevelFilters"] = filterBlockActive;

            // On active ou pas le bouton Continuer
            if ($ctrl.secondLevelFiltersActivated !== 0) {
                $ctrl.btnContinuerToFormatVisible = true;
            } else {
                $ctrl.btnContinuerToFormatVisible = false;
            }
        };

        /*
        * Vérifier le bouton Continuer doit active ou non ( en cas aucune ci selectionner le bouton est inactif)
        */
        $ctrl.verifBtnContinuePointingActiveted = function () {
            if (nblistCi() > 0)
                $ctrl.btnPointingContinueActiveted = true;
            else
                $ctrl.btnPointingContinueActiveted = false;
        };

        /*
        * FORMAT CLICK
        */
        $ctrl.formatClick = function formatClick(el, filterType) {

            var currentEl = el.currentTarget;

            $("div[id^=formatExport]").removeClass("selected");
            $(".inner-triangle").addClass("ng-hide");

            $(currentEl).addClass("selected");
            $(currentEl).closest("div").find(".inner-triangle").removeClass("ng-hide");

            // On assigne le type d'export
            $ctrl.exportParameters["formatExport"] = filterType;

            // Affichage bouton validation
            $ctrl.btnValiderVisible = true;
        };

        $ctrl.onExportBilanTechnique = function () {
            if (!$ctrl.ciSelected || !$ctrl.Period) {
                Notify.error('Il manque la peride ou le budget');
                return;
            }

            var ressId = 0;
            var ressType = "Chapitre";
            $.each($ctrl.exportParameters.firstLevelFilter, function (key, val) {
                if (val) {
                    switch (key) {
                        case "ChapitreBilan":
                            ressId = $ctrl.chapSelected.ChapitreId;
                            ressType = "Chapitre";
                            break;
                        case "SousChapitreBilan":
                            ressId = $ctrl.sousChapSelected.SousChapitreId;
                            ressType = "SousChaptre";
                            break;
                        case "RessourceBilan":
                            ressId = $ctrl.ressourceSelected.RessourceId;
                            ressType = "Ressource";
                            break;
                        default:
                            break;
                    }
                }
            });

            ProgressBar.start();
            var model = {
                CiId: $ctrl.ciSelected.CiId,
                Periode: BudgetDateService.formatPeriodeToApiYYYYMMFormat($ctrl.Period),
                RessourceId: ressId,
                RessourceType: ressType,
                IsPdfConverted: $ctrl.exportParameters.formatExport === 'PDF'
            };

            // On ferme la popup
            $ctrl.closePopup();
            CompteExploitationService.CreateBilanTechniqueExportExcel(model)
                .then(response => {
                    if (response.data === null || response.data.id === null) {
                        Notify.error(resources.Global_Notification_Error);
                    }
                    else if (response.data.id === '') {
                        Notify.error(resources.Global_Notification_AucuneDonnees);
                    }
                    else {
                        CompteExploitationService.DownloadBilanTechniqueExport(response.data.id, model.IsPdfConverted);
                    }
                })
                .catch(() => Notify.error("Erreur lors du bilan technique"))
                .finally(() => ProgressBar.complete());

        };

        /*
        * @description Gestion de la sélection dans une lookup de ligne de commande
        */
        $ctrl.handleLigneLookupSelection = function handleLigneLookupSelection(type, item, ligne) {

            switch (type) {
                case "Tache":
                    $ctrl.btnContinuerToSecondFilterVisible = true;
                    $ctrl.exportParameters["firstLevelFilterValue"] = $ctrl.tacheSelected;
                    break;
                case "Chapitre":
                    $ctrl.btnContinuerToSecondFilterVisible = true;
                    $ctrl.exportParameters["firstLevelFilterValue"] = $ctrl.chapSelected;
                    break;
                case "SousChapitre":
                    $ctrl.btnContinuerToSecondFilterVisible = true;
                    $ctrl.exportParameters["firstLevelFilterValue"] = $ctrl.sousChapSelected;
                    break;
                case "ChapitreBilan":
                    $ctrl.btnContinuerToFormatVisible = true;
                    $ctrl.exportParameters["firstLevelFilterValue"] = $ctrl.chapSelected;
                    break;
                case "SousChapitreBilan":
                    $ctrl.btnContinuerToFormatVisible = true;
                    $ctrl.exportParameters["firstLevelFilterValue"] = $ctrl.sousChapSelected;
                    break;
                case "RessourceBilan":
                    $ctrl.btnContinuerToFormatVisible = true;
                    $ctrl.exportParameters["firstLevelFilterValue"] = $ctrl.ressourceSelected;
                    break;
                case "CI":
                    sessionStorage.setItem('compteExploitationFilter', JSON.stringify({ Ci: $ctrl.ciSelected, Period: $ctrl.Period }));
                    affectationParametresFiltrage();
                    break;
            }
        };

        /*
       *  CLICK Tuile Vérification Pointage
       */
        $ctrl.clickTypePointing = function clickTypePointing(filterType) {

            switch (filterType) {
                case $ctrl.resources.CE_PontagePersonnel:
                    {
                        $ctrl.pointingType.personnel = true;
                        $ctrl.pointingType.materiel = false;
                        $ctrl.typeSelected = listTypePointing['personnel'];
                        sessionStorage.setItem('compteExploitationFilter', JSON.stringify({ Ci: $ctrl.ciSelected, Period: $ctrl.Period, SelectedListCi: $ctrl.ciSelectedlist, SelectedTypePointing: $ctrl.pointingType }));
                        break;
                    }
                case $ctrl.resources.CE_PontageMateriel:
                    {
                        $ctrl.pointingType.personnel = false;
                        $ctrl.pointingType.materiel = true;
                        $ctrl.typeSelected = listTypePointing['materiel'];
                        sessionStorage.setItem('compteExploitationFilter', JSON.stringify({ Ci: $ctrl.ciSelected, Period: $ctrl.Period, SelectedListCi: $ctrl.ciSelectedlist, SelectedTypePointing: $ctrl.pointingType }));
                        break;
                    }
            }

        };
        /*
       *  CLICK Tuile Vérification Pointage
       */
        $ctrl.clickValideVerifPointing = function () {
            //Génération duFichier Excel

            $q.when()
                .then(ProgressBar.start)
                .then(launchExportExcelVerifPointage)
                .finally(ProgressBar.complete);


        };


        ////////////////////////////////////////////////////////////////////
        //                      BUTTONS METHODS                          //
        ///////////////////////////////////////////////////////////////////

        $ctrl.clickContinuerToSecondFilter = function clickContinuerToSecondFilter() {

            toggleFirstLevelFiltersVisibility(false);
            toggleSecondLevelFiltersVisibility(true);
            disableSecondLevelFiltersVisibility();
        };

        /*
        * --> FORMAT
        */
        $ctrl.clickContinuerToFormat = function clickContinuerToFormat() {

            toggleFirstLevelFiltersVisibility(false);
            toggleSecondLevelFiltersVisibility(false);
            toggleExportLevelVisibility(true);
            // Affichage bouton validation
            $ctrl.btnValiderVisible = true;
            // Format Export PDF activé par défaut
            $("#formatExportPDF").addClass("selected");
            $("#formatExportPDF").find(".inner-triangle").removeClass("ng-hide");
        };

        /*
        * LANCEMENT EXPORT
        */
        $ctrl.clickLaunchExport = function clickLaunchExport() {

            ProgressBar.start();
            var perimeter = "";
            $.each($ctrl.exportParameters.firstLevelFilter, function (key, val) {
                if (val) {
                    perimeter = key;
                }
            });
            var axis = "";
            $.each($ctrl.exportParameters.secondLevelFilters, function (key, val) {
                if (val) {
                    axis += key + ",";
                }
            });
            axis = axis.slice(0, -1);

            var filtreLevel1 = 0;
            var filtreLevel1Libelle = "";

            // Affectation valeur filtrage
            if (perimeter !== $ctrl.analysisAxis.complet) {
                filtreLevel1Libelle = $ctrl.exportParameters.firstLevelFilterValue.Libelle;
            }

            switch (perimeter) {
                case $ctrl.analysisAxis.chapitre: filtreLevel1 = $ctrl.exportParameters.firstLevelFilterValue.ChapitreId; break;
                case $ctrl.analysisAxis.sousChapitre: filtreLevel1 = $ctrl.exportParameters.firstLevelFilterValue.SousChapitreId; break;
                case $ctrl.analysisAxis.t1: filtreLevel1 = $ctrl.exportParameters.firstLevelFilterValue.TacheId; break;
                case $ctrl.analysisAxis.t2: filtreLevel1 = $ctrl.exportParameters.firstLevelFilterValue.TacheId; break;
                default: break;
            }

            // Paramètres d'appel du service
            var formatedParameters = {
                AnalyticAxis: $ctrl.exportParameters.analyticAxis,
                CI: $ctrl.exportParameters.CI.CiId,
                Filtre: filtreLevel1,
                Format: $ctrl.exportParameters.formatExport,
                Perimeter: perimeter,
                Period: $ctrl.exportParameters.period,
                PrincipalAxis: axis,
                TypeEdition: $ctrl.exportParameters.typeEdition,
                FiltreLibelle: filtreLevel1Libelle
            };

            // On ferme la popup
            $ctrl.closePopup();
            CompteExploitationService.edition(formatedParameters)
                .then(function (response) {
                    window.location.href = "/api/CompteExploitation/DownloadEdition/" + formatedParameters.Format + "/" + response.data.id;
                }).finally(function () {
                    ProgressBar.complete();
                });
        };


        /*
        * Fermeture forcée au lancement édition
        */
        $ctrl.closePopup = function closePopup() {
            $ctrl.popVisible.popDepenses = false;
            $ctrl.popVisible.popPointage = false;
            $ctrl.popVisible.popBilan = false;
            $ctrl.popVisible.popTabSynthese = false;
            var popElemDepense = angular.element("#ed-pointage-ex");
            var popElemPointing = angular.element("#ed-dep-ex");
            var popElemBilan = angular.element("#ed-bil-tech");
            var popElemTabSynthese = angular.element("#ed-synthese");
            if (popElemDepense) {
                popElemDepense.modal("hide");
            }
            if (popElemPointing) {
                popElemPointing.modal("hide");
            }
            if (popElemBilan) {
                popElemBilan.modal("hide");
            }
            if (popElemTabSynthese) {
                popElemTabSynthese.modal("hide");
            }
        };

        /*
        * Click sur bouton annuler ou la croix
        */
        $ctrl.cancelEdition = function cancelEdition() {

            $ctrl.exportParameters.formatExport = "PDF";
            $('#ed-dep-ex').modal('hide');
            $('#ed-bil-tech').modal('hide');

            toggleFirstLevelFiltersVisibility(true);
            $ctrl.btnContinuerToSecondFilterVisible = false;
            $("div[id^=firstLevelFilter]").removeClass("selected");
            $("div[id^=firstLevelPartialStateFilter]").hide();
            $(".inner-triangle").addClass("ng-hide");
            $(".triangle-down-arrow").addClass("ng-hide");
            $ctrl.firstLevelFilterTriangle = false;

            toggleSecondLevelFiltersVisibility(false);
            $ctrl.secondLevelFiltersActivated = 0;
            toggleExportLevelVisibility(false);

            $ctrl.btnReturn1Visible = false;
            $ctrl.btnReturn2Visible = false;

            $.each(filterBlockActive, function (key, val) {
                filterBlockActive[key] = false;
            });

            $ctrl.namePreviousEditionType = null;
        };
        /*

        /*
        * Click sur bouton Retour de l'étape 2 à l'étape 1
        */
        $ctrl.returnEdition1 = function returnEdition1() {

            toggleFirstLevelFiltersVisibility(true);
            toggleExportLevelVisibility(false);
            $ctrl.btnContinuerToSecondFilterVisible = false;

            // On cache tous les souss filtres
            $("div[id^=firstLevelPartialStateFilter]").hide();

            // On affiche le sous filtre sélectionné si présent
            $.each(filterPerimetre, function (key, val) {
                if (val) {
                    switch (key) {
                        case "Chapitre": $("#firstLevelPartialStateFilterChapitre").show(); break;
                        case "SousChapitre": $("#firstLevelPartialStateFilterSousChapitre").show(); break;
                        case "T1": $("#firstLevelPartialStateFilterT1").show(); break;
                        case "T2": $("#firstLevelPartialStateFilterT2").show(); break;
                        case "ChapitreBilan": $("#firstLevelPartialStateFilterChapitreBilan").show(); break;
                        case "SousChapitreBilan": $("#firstLevelPartialStateFilterSousChapitreBilan").show(); break;
                        case "RessourceBilan": $("#firstLevelPartialStateFilterRessourceBilan").show(); break;
                        default: break;
                    }
                }
            });

            $ctrl.firstLevelFilterTriangle = false;

            // Remise à zéro des filtres de second niveau
            $.each(filterBlockActive, function (key, val) {
                filterBlockActive[key] = false;
            });
            $ctrl.exportParameters["secondLevelFilters"] = filterBlockActive;

            toggleSecondLevelFiltersVisibility(false);
            $ctrl.secondLevelFiltersActivated = 0;
            if ($ctrl.popVisible.popBilan)
                $ctrl.btnContinuerToFormatVisible = true;
            else
                $ctrl.btnContinuerToSecondFilterVisible = true;
        };

        /*
        * Click sur bouton Retour de l'étape 3 à l'étape 2
        */
        $ctrl.returnEdition2 = function returnEdition2() {
            toggleSecondLevelFiltersVisibility(true);
            toggleExportLevelVisibility(false);
            $ctrl.btnContinuerToFormatVisible = true;

            $ctrl.btnAxeGroupClick($ctrl.exportParameters.analyticAxis);

            // Réactiver les boutons avec la liste des filtres
            $.each(filterBlockActive, function (key, val) {
                if (val) {
                    reactivateLevel2Filter(key);
                }
            });
        };

        /*
        * Click sur bouton Clear pour surpprimer tous les  Ci ajouter
        */
        $ctrl.clearCi = function ClearCi() {
            angular.forEach($ctrl.ciSelectedlist, function (value, key) {
                $ctrl.ciSelectedlist[key] = null;
            });
            $ctrl.btnPointingContinueActiveted = false;
        };

        /*
        * Click sur bouton Retour de l'étape 3 à l'étape 2
        */
        $ctrl.btnOpenPopup = function btnOpenPopup(nbColonnes) {
            resetSettingsEditionType(nbColonnes);
            
            $ctrl.exportParameters.typeEdition = nbColonnes;

            $ctrl.popVisible.popDepenses = false;
            $ctrl.popVisible.popPointage = false;
            $ctrl.popVisible.popBilan = false;
            $ctrl.popVisible.popTabSynthese = false;

            switch (nbColonnes) {
                case '4C': $ctrl.popupTitle = $ctrl.resources.CE_EditionDepenses4;
                    $ctrl.popVisible.popDepenses = true;
                    break;
                case '13C': $ctrl.popupTitle = $ctrl.resources.CE_EditionDepenses13;
                    $ctrl.popVisible.popDepenses = true;
                    break;
                case 'Pt': $ctrl.popupTitle = $ctrl.resources.CE_EditionVerifPointage;
                    initialModalVerifPointing();
                    break;
                case 'BilanTechnique':
                    $ctrl.popupTitle = $ctrl.resources.CE_EditionBilanTechnique;
                    $ctrl.popVisible.popBilan = true;
                    break;
                case 'TableauSynthese':
                    $ctrl.popupTitle = $ctrl.resources.CE_EditionTableauDeSynthese;
                    $ctrl.popVisible.popTabSynthese = true;
                    break;
            }
        };

        /*
         * Click sur bouton Continuer pointage
        */
        $ctrl.clickContinueStep1Pointing = function () {
            $ctrl.step2PointingActiveted = true;
            $ctrl.step1PointingActiveted = false;
            sessionStorage.setItem('compteExploitationFilter', JSON.stringify({ Ci: $ctrl.ciSelected, Period: $ctrl.Period, SelectedListCi: $ctrl.ciSelectedlist, SelectedTypePointing: $ctrl.pointingType }));
        };


        /*
         * Click sur bouton Retour Pointage
        */
        $ctrl.clickReturnStep1Pointing = function () {
            $ctrl.step1PointingActiveted = true;
            $ctrl.step2PointingActiveted = false;
            $ctrl.verifBtnContinuePointingActiveted();
        };

        ////////////////////////////////////////////////////////////////////
        //                      PRIVATE METHODS                          //
        ///////////////////////////////////////////////////////////////////

        /*
       * 1st LEVEL FILTERS VISIBILITY
       */
        function toggleFirstLevelFiltersVisibility(visible) {
            $ctrl.firstLevelFilter = visible;
            $ctrl.firstLevelFilterTriangle = visible;

            $ctrl.btnCancelVisible = visible;

            if (visible) {
                $("#stepper1").addClass("selected");
                $("#stepBilan1").addClass("selected");
                $("div[id^=firstLevelFilter]").show();
                $("div[id^=firstLevelPartialStateFilter]").show();
            } else {
                $("#stepper1").removeClass("selected");
                $("#stepBilan1").removeClass("selected");
                $("div[id^=firstLevelFilter]").hide();
                $("div[id^=firstLevelPartialStateFilter]").hide();
            }

            $ctrl.btnContinuerToSecondFilterVisible = visible;
        }

        /*
       * 2nd LEVEL FILTERS VISIBILITY
       */
        function toggleSecondLevelFiltersVisibility(visible) {
            $ctrl.buttonsSecondFilterVisible = visible;
            $ctrl.secondLevelFilter = visible;
            $ctrl.btnReturn1Visible = visible;

            // On les reset
            $ctrl.secondLevelFilterTriangle = false;

            $("div[id^=secondLevelGroupT]").find(".inner-triangle").addClass("ng-hide"); // Fait disparaitre les triangle pour les filtres de second niveau du groupe des Taches
            $("div[id^=secondLevelGroupChapitre]").find(".inner-triangle").addClass("ng-hide"); // Fait disparaitre les triangle pour les filtres de second niveau du groupe des Chapitres

            if (visible) {

                $("div[id^=secondLevelFilter]").show();
                $("#stepper2").addClass("selected");
            } else {
                $("div[id^=secondLevelFilter]").hide();
                $("div[id^=secondLevelFilter]").removeClass("selected");
                $("div[id^=secondLevelFilter]").removeClass("disabled");
                $("#stepper2").removeClass("selected");
                $ctrl.btnContinuerToFormatVisible = false;
            }
        }

        /*
       * 2nd LEVEL FILTERS MANDATORY DISABLING
       */
        function disableSecondLevelFiltersVisibility() {

            var mandatoryDisabledFilters = $ctrl.exportParameters["firstLevelFilterActive"];

            $.each(mandatoryDisabledFilters, function (key, val) {
                if (!val) {
                    $("#secondLevelFilter" + key).addClass("disabled");
                }
            });
        }

        /*
         * Export LEVEL 
         */
        function toggleExportLevelVisibility(visible) {

            //$ctrl.btnValiderVisible = visible;
            $ctrl.FormatVisible = visible;
            if ($ctrl.popVisible.popBilan)
                $ctrl.btnReturn1Visible = visible;
            else
                $ctrl.btnReturn2Visible = visible;

            if (visible) {
                if ($ctrl.popVisible.popBilan)
                    $("#stepBilan2").addClass("selected");
                else
                    $("#stepper3").addClass("selected");
            } else {
                if ($ctrl.popVisible.popBilan)
                    $("#stepBilan2").removeClass("selected");
                else
                    $("#stepper3").removeClass("selected");
                $("div[id^=formatExport]").removeClass("selected");
                $ctrl.exportParameters.formatExport = "PDF";
                $ctrl.btnValiderVisible = false;
            }
        }


        /*
        * Réactivation des filtres niveau 2
        */
        function reactivateLevel2Filter(el) {

            var currentEl = "#secondLevelFilter" + el;

            $(currentEl).addClass("selected");
            $(currentEl).closest("div").find(".inner-triangle").removeClass("ng-hide");

            switch ($ctrl.secondLevelFiltersActivated) {
                case 3:
                    $.each(filterBlockActive, function (key, val) {
                        if (!val) {
                            $("#secondLevelFilter" + key).removeClass("disabled");
                        }
                    });
                    break;

                case 4: // Nb max de filtres atteint
                    // On disable les 2 filtres restants
                    $.each(filterBlockActive, function (key, val) {
                        if (!val) {
                            $("#secondLevelFilter" + key).addClass("disabled");
                        }
                    });
                    break;
            }

            // On relance la désactivation des filtres obligatoires
            disableSecondLevelFiltersVisibility();
        }

        /*
        * Initialiser les variable de modal pointage 
        */
        function initialModalVerifPointing() {

            if (sessionStorage.getItem('compteExploitationFilter') !== null) {
                if (JSON.parse(sessionStorage.getItem('compteExploitationFilter')).SelectedTypePointing !== undefined) {
                    $ctrl.pointingType = JSON.parse(sessionStorage.getItem('compteExploitationFilter')).SelectedTypePointing;
                }

                if (JSON.parse(sessionStorage.getItem('compteExploitationFilter')).SelectedListCi !== undefined && JSON.parse(sessionStorage.getItem('compteExploitationFilter')).SelectedListCi[0].CiId !== $ctrl.ciSelected.CiId) {
                    $ctrl.ciSelectedlist = JSON.parse(sessionStorage.getItem('compteExploitationFilter')).SelectedListCi;
                } else {
                    if ($ctrl.ciSelectedlist.length === 0 || $ctrl.ciSelectedlist[0].CiId !== $ctrl.ciSelected.CiId) {
                        $ctrl.ciSelectedlist = [];
                        $ctrl.ciSelectedlist.push($ctrl.ciSelected);
                    }
                }
            }
            $ctrl.popVisible.popDepenses = false;
            $ctrl.popVisible.popPointage = true;
            $ctrl.popVisible.popBilan = false;
            $ctrl.verifBtnContinuePointingActiveted();
        }

        /*
        * Retourner le nombre de valeur de la liste ci
        */
        function nblistCi() {
            {
                var nb = 0;
                angular.forEach($ctrl.ciSelectedlist, function (value, key) {
                    if ($ctrl.ciSelectedlist[key] !== null) {
                        nb++;
                    }
                });
                return nb;
            }
        }

        /*
        * Generer l'etat de verif pointage
        */
        function launchExportExcelVerifPointage() {
            var item = [];
            addItem(item);
            // Paramètres d'appel du service
            var formatedParameters = {
                CIs: item,
                TypePointing: $ctrl.typeSelected,
                Period: $filter('date')($ctrl.exportParameters.period, 'yyyy-MM')
            };

            // On ferme la popup
            $ctrl.closePopup();

            return CompteExploitationService.pointingVerif(formatedParameters)
                .then(function (response) {
                    window.location.href = "/api/CompteExploitation/ExportVerifPointing/" + response.data.id;
                })
                .then(onExporteSuccess)
                .catch(onExportError);
        }

        /*
        * Succes
        */
        function onExporteSuccess() {
            Notify.message($ctrl.resources.Global_Notification_Enregistrement_Success);
        }

        /*
        * Gsetion des erreur
        */
        function onExportError() {
            Notify.error($ctrl.resources.Global_Notification_Error);
        }

        /*
        * Ajouter un element dans un liste 
        */
        function addItem(item) {
            angular.forEach($ctrl.ciSelectedlist, function (value, key) {
                if ($ctrl.ciSelectedlist[key] !== null) {
                    item.push($ctrl.ciSelectedlist[key].CiId);
                }
            });
        }

        /*
        * Affectation paramètres filtrage --> AXES
        */
        function affectationParametresFiltrage() {
            $ctrl.exportParameters.period = $ctrl.Period;
            $ctrl.exportParameters.CI = $ctrl.ciSelected;
            CiManagerService.setCi($ctrl.ciSelected);
            $ctrl.blocDepensesExploitation = true;
            $ctrl.blocInformation = false;
        }

        $ctrl.isMaximumCiSelected = function () {
            if (angular.isArray($ctrl.ciSelectedlist) && maxCiSelected) {
                return $ctrl.ciSelectedlist.length < maxCiSelected;
            }
            return false;
        };

        $ctrl.addCi = function () {
            if ($ctrl.isMaximumCiSelected()) {
                if ($ctrl.ciSelectedlist.findIndex(x => x.CiId === $ctrl.input.CiId) === -1)
                    $ctrl.ciSelectedlist.push($ctrl.input);
            }
            else {
                Notify.error($ctrl.resources.Global_Notification_MaxAtteint);
            }
            $ctrl.verifBtnContinuePointingActiveted();
            $ctrl.input = undefined;//ne pas supprimer
        };
        $ctrl.removeCi = function (index) {
            $ctrl.ciSelectedlist.splice(index, 1);
            $ctrl.verifBtnContinuePointingActiveted();
        };

        $ctrl.showLookUpResource = function () {
            return '/api/Ressource/SearchLight/?societeId=' + $ctrl.ciSelected.SocieteId;
        };

        $ctrl.setAxeDirection = function (axeDirection) {
            $ctrl.tabSyntheseAxeDirection = axeDirection;
            $ctrl.tabSyntheseAxeList.forEach(function (axe) {
                if (axeDirection === "RessourceTache") {
                    axe.order = axe.orderRT;
                }
                else {
                    axe.order = axe.orderTR;
                }
            });
        };

        $ctrl.tabSyntheseAxeClick = function (axe) {
            if ($ctrl.tabSyntheseAxeDisabled(axe)) {
                return;
            }
            axe.selected = !axe.selected;
        };

        $ctrl.tabSyntheseAxeDisabled = function (axe) {
            return $ctrl.tabSyntheseAxeList.filter(x => x.selected).length >= 4 && !axe.selected;
        };

        $ctrl.tabSyntheseAxeSelected = function () {
            return $ctrl.tabSyntheseAxeList.filter(x => x.selected).length > 0;
        };

        $ctrl.clickExportTabSynthese = function () {
            ProgressBar.start();
            let axesSelected = $ctrl.tabSyntheseAxeList.filter(x => x.selected).map(x => x.code);
            var model = {
                ciId: $ctrl.ciSelected.CiId,
                periode: BudgetDateService.formatPeriodeToApiYYYYMMFormat($ctrl.Period),
                axeDirection: $ctrl.tabSyntheseAxeDirection,
                axes: axesSelected,
                isPdfConverted: $ctrl.tabSyntheseFormat === 'PDF'
            };

            // On ferme la popup
            $ctrl.closePopup();
            CompteExploitationService.TableauSyntheseExport(model)
                .catch(actionHandleError)
                .finally(() => ProgressBar.complete());

        };

        function actionHandleError(error) {
            if (error && error.ExceptionMessage) {
                Notify.error(error.ExceptionMessage);
            }
            else if (error && error.Message) {
                Notify.error(error.Message);
            }
            else {
                Notify.defaultError();
            }
        }

        /*
         * On ne garde le paramétrage en mémoire qu'entre les 13c et 4c ou si on relance la même édition.
         */
        function resetSettingsEditionType(nbColonnes) {
            if ($ctrl.namePreviousEditionType !== null) {
                if ($ctrl.namePreviousEditionType !== nbColonnes) {
                    if (($ctrl.namePreviousEditionType !== '4C' || nbColonnes !== '13C')
                        && ($ctrl.namePreviousEditionType !== '13C' || nbColonnes !== '4C')) {
                        $ctrl.cancelEdition();
                    }
                }
            }
            $ctrl.namePreviousEditionType = nbColonnes;
        }
    }
}(angular));
