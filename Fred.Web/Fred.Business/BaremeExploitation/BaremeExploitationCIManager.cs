using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Fred.Business.CI;
using Fred.Business.DatesClotureComptable;
using Fred.Business.Referential;
using Fred.Business.ReferentielEtendu;
using Fred.Business.Societe;
using Fred.Business.Valorisation;
using Fred.DataAccess.Interfaces;
using Fred.Entities.Bareme;
using Fred.Entities.Referential;
using Fred.Entities.ReferentielEtendu;
using Fred.Entities.ReferentielFixe;
using Fred.Entities.Societe;
using Fred.Framework.Exceptions;
using Fred.Framework.Extensions;
using Fred.Web.Shared.App_LocalResources;
using Fred.Web.Shared.Models.Bareme;
using static Fred.Entities.Constantes;

namespace Fred.Business.BaremeExploitation
{
    public class BaremeExploitationCIManager : Manager<BaremeExploitationCIEnt, IBaremeExploitationCIRepository>, IBaremeExploitationCIManager
    {
        private readonly IBaremeExploitationOrganisationRepository baremeExploitationOrganisationRepo;
        private readonly ISepService sepService;
        private readonly IValorisationManager valorisationManager;
        private readonly ICIManager ciManager;
        private readonly ISocieteManager societeManager;
        private readonly IDeviseManager deviseManager;
        private readonly IReferentielEtenduManager referentielEtenduManager;
        private readonly IDatesClotureComptableManager datesClotureComptableManager;
        private readonly IBaremeExploitationCISurchargeManager baremeExploitationCISurchargeManager;
        private readonly IBaremeValorisationManager baremeValorisationManager;

        public BaremeExploitationCIManager(
            IUnitOfWork uow,
            IBaremeExploitationOrganisationRepository baremeExploitationOrganisationRepo,
            ISepService sepService,
            IValorisationManager valorisationManager,
            ICIManager cIManager,
            ISocieteManager societeManager,
            IDeviseManager deviseManager,
            IReferentielEtenduManager referentielEtenduManager,
            IDatesClotureComptableManager datesClotureComptableManager,
            IBaremeExploitationCISurchargeManager baremeExploitationCISurchargeManager,
            IBaremeExploitationCIRepository baremeExploitationCIRepository,
            IBaremeValorisationManager baremeValorisationManager)
            : base(uow, baremeExploitationCIRepository)
        {
            this.baremeExploitationOrganisationRepo = baremeExploitationOrganisationRepo;
            this.sepService = sepService;
            this.valorisationManager = valorisationManager;
            this.ciManager = cIManager;
            this.societeManager = societeManager;
            this.deviseManager = deviseManager;
            this.referentielEtenduManager = referentielEtenduManager;
            this.datesClotureComptableManager = datesClotureComptableManager;
            this.baremeExploitationCISurchargeManager = baremeExploitationCISurchargeManager;
            this.baremeValorisationManager = baremeValorisationManager;
        }

        /// <summary>
        /// Mode d'enregistrement pour un CI.
        /// </summary>
        /// <remarks>Voir la fonction GetSaveMode pour plus d'explications</remarks>
        public enum SaveMode
        {
            /// <summary>
            /// Enregistrement impossible car le barème courant est invalide.
            /// </summary>
            EnregistrementImpossibleBaremeCourantInvalide,

            /// <summary>
            /// Enregistrement impossible car la période indiquée est cloturée.
            /// </summary>
            EnregistrementImpossiblePeriodeCloturee,

            /// <summary>
            /// Enregistrement impossible car la période indiquée est antérieur au barème initial.
            /// </summary>
            EnregistrementImpossibleAvantBaremeInitial,

            /// <summary>
            /// Clôture le barème courant et enregistre sur la période sélectionnée.
            /// </summary>
            ClotureBaremeCourantEtEnregistreSurPeriodeSelectionnee,

            /// <summary>
            /// Enregistrement impossible car le CI n'a pas de clôture comptable.
            /// </summary>
            EnregistrementImpossiblePasDeClotureComptable,

            /// <summary>
            /// Enregistre sur la première période non clôturée.
            /// </summary>
            EnregistreSurPremierePeriodeNonCloturee,

            /// <summary>
            /// Enregistre sur période sélectionnée.
            /// </summary>
            EnregistreSurPeriodeSelectionnee,

            /// <summary>
            /// Clôture le barème courant et enregistre sur la première période non clôturée.
            /// </summary>
            ClotureBaremeCourantEtEnregistreSurPremierePeriodeNonCloturee,
        }

        /// <summary>
        /// Retourne le message à utiliser en cas d'enregistrement impossible ou null si l'enregistrement est possible.
        /// </summary>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="periode">Période</param>
        /// <returns>Le message à utiliser en cas d'enregistrement impossible ou null si l'enregistrement est possible</returns>
        public string GetEnregistrementImpossibleMessage(int ciId, DateTime periode)
        {
            DateTime? dernierePeriodeComptableCloturee = datesClotureComptableManager.GetDernierePeriodeComptableCloturee(ciId);
            DateTime? periodeDebutBaremeCourant = Repository.GetPeriodeDebutBaremeCourant(ciId);
            SaveMode saveMode = GetSaveMode(periode, dernierePeriodeComptableCloturee, periodeDebutBaremeCourant);
            return GetEnregistrementImpossibleMessage(saveMode);
        }

        /// <summary>
        /// Récupère le référentiel étendu d'une société.
        /// </summary>
        /// <param name="societeId">L'identifiant de la société</param>
        /// <returns>Le référentiel étendu de la société.</returns>
        public List<ChapitreEnt> GetReferentielEtendu(int societeId)
        {
            SocieteEnt societe = societeManager.GetSocieteById(societeId, new List<Expression<Func<SocieteEnt, object>>> { s => s.TypeSociete, s => s.AssocieSeps.Select(a => a.TypeParticipationSep) });
            if (societe.TypeSociete.Code == TypeSociete.Sep)
            {
                societeId = societe.AssocieSeps.SingleOrDefault(x => x.TypeParticipationSep.Code == TypeParticipationSep.Gerant && x.AssocieSepParentId == null).SocieteAssocieeId;
            }
            else if (societe.TypeSociete.Code != TypeSociete.Interne)
            {
                societeId = 0;
            }

            List<ChapitreEnt> chapitres = referentielEtenduManager.GetReferentielEtenduAsChapitreList(societeId, false).ToList();
            chapitres = BaremeExploitationManagerHelper.GetReferentielMaterielEtMO(chapitres);

            return chapitres;
        }

        /// <summary>
        /// Retourne la liste des barèmes en fonction d'une période et d'un CI.
        /// </summary>
        /// <param name="periode">Periode</param>
        /// <param name="ciId">Identifiant du CI</param>
        /// <returns>Liste de baremes exploitation CI</returns>
        public List<BaremeExploitationCIEnt> GetBaremeByCIIdAndPeriode(DateTime periode, int ciId)
        {
            try
            {
                List<BaremeExploitationCIEnt> listBareme = Repository.GetBaremeByCIIdAndPeriode(periode, ciId);
                int organisationId = 0;
                SocieteEnt societe = ciManager.GetSocieteByCIId(ciId);

                if (societe != null)
                {
                    organisationId = GetOrganisationId(ciId, societe);
                    List<BaremeExploitationOrganisationEnt> listStorm = baremeExploitationOrganisationRepo.GetBaremeStormByOrganisationIdAndPeriode(periode, organisationId);
                    IReadOnlyList<ReferentielEtenduEnt> referentielsEtendu = referentielEtenduManager.Get(listStorm.Select(bareme => bareme.RessourceId).ToList(), societe.SocieteId);

                    listBareme.AddRange(listStorm.Join(referentielsEtendu, strom => strom.RessourceId, referentiel => referentiel.RessourceId, (strom, referentiel) => new BaremeExploitationCIEnt
                    {
                        PeriodeDebut = strom.PeriodeDebut,
                        Prix = strom.Prix,
                        PrixChauffeur = strom.PrixChauffeur,
                        PrixConduite = strom.PrixConduite,
                        Unite = strom.Unite,
                        UniteId = strom.UniteId,
                        Devise = strom.Devise,
                        DeviseId = strom.DeviseId,
                        CIId = ciId,
                        ReferentielEtendu = referentiel,
                        ReferentielEtenduId = referentiel.ReferentielEtenduId
                    }).ToList());
                }

                return listBareme;
            }
            catch (FredRepositoryException e)
            {
                throw new FredBusinessException(e.Message, e);
            }
        }

        /// <summary>
        /// Gère l'enregistrement des barèmes exploitation CI.
        /// </summary>
        /// <param name="bareme">Barème des ressources / surcharges et exceptions à enregistrer</param>
        /// <param name="userId">Identifiant Utilisateur</param>
        /// <returns>Le résultat de l'enregistrement pour mise à jour de la vue</returns>
        public BaremeExploitationCISaveResultModel Save(BaremeExploitationCIToUpdateModel bareme, int userId)
        {
            try
            {
                BaremeExploitationCISaveResultModel ret = new BaremeExploitationCISaveResultModel();
                DateTime utcNow = DateTime.UtcNow;
                DateTime? dernierePeriodeComptableCloturee = datesClotureComptableManager.GetDernierePeriodeComptableCloturee(bareme.CiId);
                DateTime? periodeDebutBaremeCourant = Repository.GetPeriodeDebutBaremeCourant(bareme.CiId);

                // Enregistrement
                SaveMode saveMode = GetSaveMode(bareme.Periode, dernierePeriodeComptableCloturee, periodeDebutBaremeCourant);
                string messageErreur = GetEnregistrementImpossibleMessage(saveMode);
                if (messageErreur != null)
                {
                    ret.MessageErreur = messageErreur;
                    return ret;
                }

                switch (saveMode)
                {
                    case SaveMode.EnregistreSurPremierePeriodeNonCloturee:
                        DateTime premierePeriodeComptableNonCloturee = dernierePeriodeComptableCloturee.Value.AddMonths(1);
                        Update(premierePeriodeComptableNonCloturee, bareme, userId, utcNow);
                        break;

                    case SaveMode.ClotureBaremeCourantEtEnregistreSurPeriodeSelectionnee:
                        CloneAndCloture(bareme.Periode, periodeDebutBaremeCourant.Value, bareme.CiId, userId, utcNow);
                        Save();
                        Update(bareme.Periode, bareme, userId, utcNow);
                        break;

                    case SaveMode.EnregistreSurPeriodeSelectionnee:
                        Update(bareme.Periode, bareme, userId, utcNow);
                        break;

                    case SaveMode.ClotureBaremeCourantEtEnregistreSurPremierePeriodeNonCloturee:
                        ret.BaremePeriodePrecedenteCloture = true;
                        premierePeriodeComptableNonCloturee = dernierePeriodeComptableCloturee.Value.AddMonths(1);
                        CloneAndCloture(premierePeriodeComptableNonCloturee, periodeDebutBaremeCourant.Value, bareme.CiId, userId, utcNow);
                        Save();
                        Update(premierePeriodeComptableNonCloturee, bareme, userId, utcNow);
                        break;
                }

                // Enregistre les changements
                if (bareme.RessourcesToUpdate.Count > 0)
                {
                    Save();
                }

                // Enregistre les surcharges et exceptions
                ret.SurchargesAdded = baremeExploitationCISurchargeManager.Save(saveMode, bareme, dernierePeriodeComptableCloturee, periodeDebutBaremeCourant, userId, utcNow);

                DateTime startUpdatePeriodeForValorisation = GetPremierePeriodeComptableNonCloturee(bareme.Periode, bareme.CiId, dernierePeriodeComptableCloturee);

                baremeValorisationManager.NewValorisationJobBareme(bareme.CiId, baremeValorisationManager.UpdateValorisationFromBaremeCI, startUpdatePeriodeForValorisation, bareme.Periode);

                return ret;
            }
            catch (FredRepositoryException e)
            {
                throw new FredBusinessException(e.Message, e);
            }
        }

        private DateTime GetPremierePeriodeComptableNonCloturee(DateTime periodeBareme, int ciId, DateTime? dernierePeriodeComptableCloturee)
        {
            DateTime premierePeriodeComptableNonCloturee = periodeBareme;

            if (dernierePeriodeComptableCloturee.HasValue)
            {
                premierePeriodeComptableNonCloturee = dernierePeriodeComptableCloturee.Value.AddMonths(1);
            }
            else
            {
                DateTime? dateOuvertureCi = ciManager.GetDateOuvertureCi(ciId);

                if (dateOuvertureCi.HasValue)
                {
                    premierePeriodeComptableNonCloturee = dateOuvertureCi.Value;
                }
            }
            return premierePeriodeComptableNonCloturee;
        }

        public BaremeExploitationCIEnt Get(int ciId, DateTime periode, int referentielEtenuId, bool currentPeriodOnly = false)
        {
            if (currentPeriodOnly)
            {
                return Repository.GetByBeginPeriod(ciId, periode, referentielEtenuId);
            }
            else
            {
                return Repository.Get(ciId, periode, referentielEtenuId);
            }
        }

        private IReadOnlyList<BaremeExploitationCIEnt> Get(int ciId, DateTime periodeDebut, List<int> referentielEntenduIds)
        {
            return Repository.Get(ciId, periodeDebut, referentielEntenduIds);
        }

        /// <summary>
        /// Vérifie la validité et enregistre les fournisseurs importés depuis ANAËL Finances
        /// </summary>
        /// <param name="baremesCi">Liste des entités dont il faut vérifier la validité</param>
        public void ManageImportedBareme(IEnumerable<BaremeExploitationCIEnt> baremesCi)
        {
            List<BaremeExploitationCIEnt> listBaremeToAdd = new List<BaremeExploitationCIEnt>();
            foreach (BaremeExploitationCIEnt bareme in baremesCi.ToList())
            {
                BaremeExploitationCIEnt registeredBareme = Repository.Get(bareme.CIId, bareme.PeriodeDebut, bareme.ReferentielEtenduId.Value);
                if (registeredBareme == null)
                {
                    listBaremeToAdd.Add(bareme);
                }
            }
            Repository.SaveListBareme(listBaremeToAdd);
            Save();
        }

        /// <summary>
        /// Synchronise la liste des barêmes Ci en fonction d'une période et d'un CI avec le barème de l'orga.
        /// </summary>
        /// <param name="periode">Periode</param>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="userId">Identifiant de l'utilisateur</param>
        /// <returns>Vrai si la synchro est réussie</returns>
        public BaremeExploitationSaveResultModel SynchroBaremeOrgaToCi(DateTime periode, int ciId, int userId)
        {
            try
            {
                BaremeExploitationSaveResultModel resultModel = new BaremeExploitationSaveResultModel();
                SocieteEnt societe = ciManager.GetSocieteByCIId(ciId);
                int organisationId = 0;

                if (societe != null)
                {
                    DateTime periodeDebut = periode.GetPeriode();
                    organisationId = GetOrganisationId(ciId, societe);
                    List<BaremeExploitationOrganisationEnt> baremesOrga = baremeExploitationOrganisationRepo.GetBaremeByOrganisationIdAndPeriode(periode, organisationId);
                    resultModel = InsertAndUpdateBaremeCiFromBaremeOrga(baremesOrga, ciId, societe.SocieteId, userId, periodeDebut);
                    UpdateValorisation(ciId, periode.GetPeriode());
                }

                return resultModel;
            }
            catch (FredBusinessException e)
            {
                throw new FredBusinessException(e.Message, e);
            }
        }

        private void UpdateValorisation(int ciId, DateTime periode)
        {
            DateTime? dernierePeriodeComptableCloturee = datesClotureComptableManager.GetDernierePeriodeComptableCloturee(ciId);
            DateTime startUpdatePeriodeForValorisation = GetPremierePeriodeComptableNonCloturee(periode, ciId, dernierePeriodeComptableCloturee);
            baremeValorisationManager.NewValorisationJobBareme(ciId, baremeValorisationManager.UpdateValorisationFromBaremeCI, startUpdatePeriodeForValorisation, periode);
        }

        private int GetOrganisationId(int ciId, SocieteEnt societe)
        {
            int organisationId;
            EtablissementComptableEnt etablissement = ciManager.GetEtablissementComptableByCIId(ciId);
            if (etablissement != null)
            {
                organisationId = etablissement.Organisation.OrganisationId;
            }
            else
            {
                organisationId = societe.Organisation.OrganisationId;
            }

            return organisationId;
        }

        /// <summary>
        /// Retourne l'historique d'un référentiel étendue.
        /// </summary>
        /// <param name="ciId">L'identifiant du CI.</param>
        /// <param name="referentielEtenduId">L'identifiant du référentiel étendu.</param>
        /// <returns>L'historique du référentiel étendue.</returns>
        public List<BaremeExploitationCIEnt> GetHistorique(int ciId, int referentielEtenduId)
        {
            return Repository.GetHistorique(ciId, referentielEtenduId);
        }

        /// <summary>
        /// Met à jour les ressources.
        /// </summary>
        /// <param name="periode">La période concernée</param>
        /// <param name="bareme">Le barème concerné</param>
        /// <param name="userId">Identifiant utilisateur</param>
        /// <param name="utcNow">La date / heure courante</param>
        private void Update(DateTime periode, BaremeExploitationCIToUpdateModel bareme, int userId, DateTime utcNow)
        {
            foreach (BaremeExploitationCIRessourceToUpdateModel ressourceBaremeToUpdate in bareme.RessourcesToUpdate)
            {
                BaremeExploitationCIEnt baremeExploitationCIEnt = Repository.Get(bareme.CiId, periode, ressourceBaremeToUpdate.ReferentielEtenduId);
                if (baremeExploitationCIEnt != null)
                {
                    if (ressourceBaremeToUpdate.Prix == null && ressourceBaremeToUpdate.UniteId == 0 && ressourceBaremeToUpdate.PrixChauffeur == null && ressourceBaremeToUpdate.PrixConduite == null)
                    {
                        Repository.Delete(baremeExploitationCIEnt);
                    }
                    else
                    {
                        baremeExploitationCIEnt.DateModification = utcNow;
                        baremeExploitationCIEnt.AuteurModificationId = userId;
                        baremeExploitationCIEnt.UniteId = ressourceBaremeToUpdate.UniteId;
                        baremeExploitationCIEnt.Prix = ressourceBaremeToUpdate.Prix;
                        baremeExploitationCIEnt.PrixChauffeur = ressourceBaremeToUpdate.PrixChauffeur;
                        baremeExploitationCIEnt.PrixConduite = ressourceBaremeToUpdate.PrixConduite;
                        Repository.Update(baremeExploitationCIEnt);
                    }
                }
                else
                {
                    baremeExploitationCIEnt = new BaremeExploitationCIEnt()
                    {
                        CIId = bareme.CiId,
                        ReferentielEtenduId = ressourceBaremeToUpdate.ReferentielEtenduId,
                        PeriodeDebut = periode,
                        UniteId = ressourceBaremeToUpdate.UniteId,
                        Prix = ressourceBaremeToUpdate.Prix,
                        PrixChauffeur = ressourceBaremeToUpdate.PrixChauffeur,
                        PrixConduite = ressourceBaremeToUpdate.PrixConduite,
                        DateCreation = utcNow,
                        AuteurCreationId = userId,
                        DeviseId = deviseManager.GetDevise(CodeDevise.Euro).DeviseId,
                        Statut = 1,
                    };
                    Repository.Insert(baremeExploitationCIEnt);
                }
            }
        }

        private void UpdateFromBaremeOrga(List<BaremeExploitationCIEnt> baremeExploitationCIs, List<BaremeExploitationOrganisationEnt> listBaremeOrga, int userId, DateTime utcNow, DateTime premierePeriodeComptableNonCloturee)
        {
            List<BaremeExploitationCIEnt> baremeExploitationsWhithStartPeriodBeforeFirstPeriodClosed = baremeExploitationCIs.Where(bareme => bareme.PeriodeDebut < premierePeriodeComptableNonCloturee).ToList();
            UpdateEndPeriodDate(baremeExploitationsWhithStartPeriodBeforeFirstPeriodClosed, premierePeriodeComptableNonCloturee);

            if (baremeExploitationsWhithStartPeriodBeforeFirstPeriodClosed.Count > 0)
            {
                List<BaremeExploitationCIEnt> cloneBaremeExploitations = CloneBaremeCi(baremeExploitationsWhithStartPeriodBeforeFirstPeriodClosed, userId, utcNow, premierePeriodeComptableNonCloturee);
                List<BaremeExploitationCIEnt> newBaremeCiWithInformationOfBaremeOrga = AssignBaremeCiToBaremeOrga(cloneBaremeExploitations, listBaremeOrga, userId, utcNow);
                Insert(newBaremeCiWithInformationOfBaremeOrga);
            }
            else
            {
                List<BaremeExploitationCIEnt> existingBaremeCiWithInformationOfBaremeOrga = AssignBaremeCiToBaremeOrga(baremeExploitationCIs, listBaremeOrga, userId, utcNow);
                Update(existingBaremeCiWithInformationOfBaremeOrga);
            }

            List<BaremeExploitationOrganisationEnt> baremeToDelete = listBaremeOrga.Where(bareme => bareme.Prix == null && bareme.UniteId == 0 && bareme.PrixChauffeur == null && bareme.PrixConduite == null).ToList();
            baremeExploitationOrganisationRepo.DeleteListBareme(baremeToDelete);
        }

        private void Update(List<BaremeExploitationCIEnt> baremes)
        {
            foreach (BaremeExploitationCIEnt bareme in baremes)
            {
                Repository.Update(bareme);
            }
        }

        private static List<BaremeExploitationCIEnt> AssignBaremeCiToBaremeOrga(List<BaremeExploitationCIEnt> baremesCI, List<BaremeExploitationOrganisationEnt> listBaremeOrga, int userId, DateTime utcNow)
        {
            return listBaremeOrga.Join(baremesCI, orga => orga.RessourceId, ci => ci.ReferentielEtendu.RessourceId, (orga, ci) => new BaremeExploitationCIEnt
            {
                AuteurCreationId = ci.AuteurCreationId,
                BaremeId = ci.BaremeId,
                CIId = ci.CIId,
                DateCreation = ci.DateCreation,
                DeviseId = ci.DeviseId,
                PeriodeDebut = ci.PeriodeDebut,
                PeriodeFin = ci.PeriodeFin,
                ReferentielEtenduId = ci.ReferentielEtenduId,
                Statut = ci.Statut,
                DateModification = utcNow,
                AuteurModificationId = userId,
                UniteId = orga.UniteId,
                Prix = orga.Prix,
                PrixChauffeur = orga.PrixChauffeur,
                PrixConduite = orga.PrixConduite
            }).ToList();
        }

        private static List<BaremeExploitationCIEnt> CloneBaremeCi(List<BaremeExploitationCIEnt> baremeExploitationsWhitStartPeriodBeforeFirstPeriodClosed, int userId, DateTime utcNow, DateTime premierePeriodeComptableNonCloturee)
        {
            List<BaremeExploitationCIEnt> result = new List<BaremeExploitationCIEnt>();
            foreach (BaremeExploitationCIEnt bareme in baremeExploitationsWhitStartPeriodBeforeFirstPeriodClosed)
            {
                result.Add(
                            new BaremeExploitationCIEnt()
                            {
                                CIId = bareme.CIId,
                                ReferentielEtendu = bareme.ReferentielEtendu,
                                ReferentielEtenduId = bareme.ReferentielEtenduId,
                                UniteId = bareme.UniteId,
                                DeviseId = bareme.DeviseId,
                                Statut = bareme.Statut,
                                PeriodeDebut = premierePeriodeComptableNonCloturee,
                                Prix = bareme.Prix,
                                PrixChauffeur = bareme.PrixChauffeur,
                                PrixConduite = bareme.PrixConduite,
                                AuteurCreationId = userId,
                                DateCreation = utcNow
                            });
            }
            return result;
        }

        private void UpdateEndPeriodDate(List<BaremeExploitationCIEnt> baremeExploitationsWhitStartPeriodBeforeFirstPeriodClosed, DateTime premierePeriodeComptableNonCloturee)
        {
            baremeExploitationsWhitStartPeriodBeforeFirstPeriodClosed.ForEach(item => item.PeriodeFin = premierePeriodeComptableNonCloturee);
            foreach (BaremeExploitationCIEnt bareme in baremeExploitationsWhitStartPeriodBeforeFirstPeriodClosed)
            {
                Repository.Update(bareme);
            }
        }

        /// <summary>
        /// Clone et clôture le barême courant.
        /// </summary>
        /// <param name="premierePeriodeComptableNonCloturee">Première période comptable non clôturée</param>
        /// <param name="periodeDebutBaremeCourant">Période de début du barème courant en BDD</param>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="userId">Identifiant utilisateur</param>
        /// <param name="utcNow">La date / heure courante</param>
        private void CloneAndCloture(DateTime premierePeriodeComptableNonCloturee, DateTime periodeDebutBaremeCourant, int ciId, int userId, DateTime utcNow)
        {
            foreach (BaremeExploitationCIEnt baremePeriodeCourant in Repository.GetBaremeByCIIdAndPeriode(periodeDebutBaremeCourant, ciId))
            {
                // Clôture le barème courant en BDD
                baremePeriodeCourant.PeriodeFin = premierePeriodeComptableNonCloturee;
                Repository.Update(baremePeriodeCourant);

                // Clone le barème courant en BDD sur la première période non cloturée
                BaremeExploitationCIEnt baremePeriodeCourante = new BaremeExploitationCIEnt()
                {
                    CIId = baremePeriodeCourant.CIId,
                    ReferentielEtenduId = baremePeriodeCourant.ReferentielEtenduId,
                    UniteId = baremePeriodeCourant.UniteId,
                    DeviseId = baremePeriodeCourant.DeviseId,
                    Statut = baremePeriodeCourant.Statut,
                    PeriodeDebut = premierePeriodeComptableNonCloturee,
                    Prix = baremePeriodeCourant.Prix,
                    PrixChauffeur = baremePeriodeCourant.PrixChauffeur,
                    PrixConduite = baremePeriodeCourant.PrixConduite,
                    AuteurCreationId = userId,
                    DateCreation = utcNow
                };
                Repository.Insert(baremePeriodeCourante);
            }
        }

        private BaremeExploitationSaveResultModel InsertAndUpdateBaremeCiFromBaremeOrga(List<BaremeExploitationOrganisationEnt> listBaremeOrga, int ciId, int societeId, int userId, DateTime periodeDebut)
        {
            BaremeExploitationSaveResultModel saveResultModel = new BaremeExploitationSaveResultModel();
            if (listBaremeOrga.Count <= 0)
            {
                saveResultModel.MessageErreur = "Aucun Barème Organisation trouvé";
                return saveResultModel;
            }

            DateTime? dernierePeriodeComptableCloturee = datesClotureComptableManager.GetDernierePeriodeComptableCloturee(ciId);
            DateTime premierePeriodeComptableNonCloturee = dernierePeriodeComptableCloturee.HasValue ? dernierePeriodeComptableCloturee.Value.AddMonths(1) : periodeDebut;
            DateTime? periodeDebutBaremeCourant = Repository.GetPeriodeDebutBaremeCourant(ciId);

            SaveMode saveMode = GetSaveMode(periodeDebut, dernierePeriodeComptableCloturee, periodeDebutBaremeCourant);

            string messageErreur = GetEnregistrementImpossibleMessage(saveMode);
            if (messageErreur != null)
            {
                saveResultModel.MessageErreur = messageErreur;
                return saveResultModel;
            }

            if (sepService.IsSep(ciId))
            {
                societeId = sepService.GetSocieteGeranteForSep(ciId).SocieteId;
            }

            IReadOnlyList<ReferentielEtenduEnt> referentielEntendus = referentielEtenduManager.Get(listBaremeOrga.Select(bareme => bareme.RessourceId).ToList(), societeId);
            IReadOnlyList<BaremeExploitationCIEnt> existingBaremesCI = Get(ciId, periodeDebut, referentielEntendus.Select(r => r.ReferentielEtenduId).ToList());
            List<BaremeExploitationCIEnt> existingBaremeCIs = existingBaremesCI.GroupBy(x => x.ReferentielEtendu).Select(x => x.FirstOrDefault()).ToList();

            DateTime utcNow = DateTime.UtcNow;
            DateTime? firstAccountingPeriodNotClose = null;

            switch (saveMode)
            {
                case SaveMode.EnregistreSurPremierePeriodeNonCloturee:
                    firstAccountingPeriodNotClose = premierePeriodeComptableNonCloturee;
                    break;

                case SaveMode.ClotureBaremeCourantEtEnregistreSurPremierePeriodeNonCloturee:
                    saveResultModel.BaremePeriodePrecedenteCloture = true;
                    firstAccountingPeriodNotClose = premierePeriodeComptableNonCloturee;
                    break;

                case SaveMode.ClotureBaremeCourantEtEnregistreSurPeriodeSelectionnee:
                case SaveMode.EnregistreSurPeriodeSelectionnee:
                    firstAccountingPeriodNotClose = periodeDebut;
                    break;
            }

            if (firstAccountingPeriodNotClose.HasValue)
            {
                UpdateFromBaremeOrga(existingBaremeCIs, listBaremeOrga, userId, utcNow, firstAccountingPeriodNotClose.Value);
            }

            List<BaremeExploitationCIEnt> baremeToInsert = listBaremeOrga.Where(q => !existingBaremesCI.Select(x => x.ReferentielEtendu.RessourceId).Contains(q.RessourceId))
            .Join(referentielEntendus, bareme => bareme.Ressource, referentiel => referentiel.Ressource, (bareme, referentiel) => new BaremeExploitationCIEnt
            {
                DateCreation = utcNow,
                AuteurCreationId = userId,
                UniteId = bareme.UniteId,
                Prix = bareme.Prix,
                PrixChauffeur = bareme.PrixChauffeur,
                PrixConduite = bareme.PrixConduite,
                PeriodeDebut = premierePeriodeComptableNonCloturee,
                DeviseId = bareme.DeviseId,
                Statut = bareme.Statut,
                CIId = ciId,
                ReferentielEtenduId = referentiel.ReferentielEtenduId
            }).ToList();

            Insert(baremeToInsert);

            Save();
            return saveResultModel;
        }

        /// <summary>
        /// Indique comment il faut enregistrer.
        /// </summary>
        /// <param name="periode">La période demandée</param>
        /// <param name="dernierePeriodeComptableCloturee">La dernière période comptable cloturée ou null s'il n'y en a pas</param>
        /// <param name="periodeDebutBaremeCourant">La période du barème courant en BDD ou null s'il n'y en a pas</param>
        /// <returns>Comment il faut enregistrer</returns>
        private static SaveMode GetSaveMode(DateTime periode, DateTime? dernierePeriodeComptableCloturee, DateTime? periodeDebutBaremeCourant)
        {
            if (dernierePeriodeComptableCloturee == null)
            {
                return GetSaveModeWhenLastAccountingPeriodIsClose(periode, periodeDebutBaremeCourant);
            }
            else if (periode.IsOlderOrSamePeriode(dernierePeriodeComptableCloturee.Value))
            {
                // La période indiquée est cloturée, refuse l'enregistrement
                return SaveMode.EnregistrementImpossiblePeriodeCloturee;
            }
            else
            {
                // La période indiquée n'est pas clôturée
                if (!periodeDebutBaremeCourant.HasValue)
                {
                    // Il n'y a pas encore de barème en BDD
                    // Enregistre sur la période juste après la dernière période cloturée, soit la première non clôturée
                    return SaveMode.EnregistreSurPremierePeriodeNonCloturee;
                }
                else
                {
                    // Il y a au moins un barème en BDD
                    if (periodeDebutBaremeCourant.Value.IsOlderOrSamePeriode(dernierePeriodeComptableCloturee.Value))
                    {
                        // Le barème courant en BDD est sur une période clôturée
                        // Clôture le barème courant et enregistre sur la période juste après la dernière période cloturée, soit la première non clôturée
                        return SaveMode.ClotureBaremeCourantEtEnregistreSurPremierePeriodeNonCloturee;
                    }
                    else
                    {
                        // Le barème courant en BDD n'est pas sur une période clôturée
                        // Il doit se trouver sur la période juste après la dernière période cloturée, sinon il y a un trou dans les barèmes
                        // Cela peut se produire si un période antérieure est décloturée
                        if (periodeDebutBaremeCourant.Value.IsSamePeriode(dernierePeriodeComptableCloturee.Value.AddMonths(1)))
                        {
                            // Enregistre sur la période juste après la dernière période cloturée, soit la première non clôturée (= le barème courant ici)
                            return SaveMode.EnregistreSurPremierePeriodeNonCloturee;
                        }
                        else
                        {
                            // On enregistre sur la période sélectionnée
                            return SaveMode.ClotureBaremeCourantEtEnregistreSurPeriodeSelectionnee;
                        }
                    }
                }
            }
        }

        private static SaveMode GetSaveModeWhenLastAccountingPeriodIsClose(DateTime periode, DateTime? periodeDebutBaremeCourant)
        {
            if (!periodeDebutBaremeCourant.HasValue)
            {
                return SaveMode.EnregistreSurPeriodeSelectionnee;
            }
            else if (periode.IsOlderPeriode(periodeDebutBaremeCourant.Value))
            {
                return SaveMode.EnregistrementImpossibleAvantBaremeInitial;
            }
            else if (periode.IsSamePeriode(periodeDebutBaremeCourant.Value))
            {
                return SaveMode.EnregistreSurPeriodeSelectionnee;
            }
            else
            {
                return SaveMode.ClotureBaremeCourantEtEnregistreSurPeriodeSelectionnee;
            }
        }

        private static string GetEnregistrementImpossibleMessage(SaveMode saveMode)
        {
            switch (saveMode)
            {
                case SaveMode.EnregistrementImpossibleBaremeCourantInvalide:
                    return FeatureBareme.BaremeExploitationCI_EnregistrementImpossible_BaremeCourantInvalide;

                case SaveMode.EnregistrementImpossibleAvantBaremeInitial:
                    return FeatureBareme.BaremeExploitationCI_EnregistrementImpossible_AvantBaremeInitial;

                case SaveMode.EnregistrementImpossiblePeriodeCloturee:
                    return FeatureBareme.BaremeExploitationCI_EnregistrementImpossible_PeriodeCloturee;

                case SaveMode.EnregistrementImpossiblePasDeClotureComptable:
                    return FeatureBareme.BaremeExploitationCI_EnregistrementImpossible_PasDeClotureComptable;

                default:
                    return null;
            }
        }

        private void Insert(List<BaremeExploitationCIEnt> baremes)
        {
            foreach (BaremeExploitationCIEnt bareme in baremes)
            {
                Repository.Insert(bareme);
            }
        }

        public void Delete(BaremeExploitationCIEnt baremeCI)
        {
            Repository.Delete(baremeCI);
        }
    }
}