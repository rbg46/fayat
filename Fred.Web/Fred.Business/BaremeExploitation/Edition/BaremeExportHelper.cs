using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Caching;
using Fred.Business.Organisation;
using Fred.Entities;
using Fred.Entities.Bareme;
using Fred.Entities.Organisation;
using Fred.Framework.Extensions;
using Fred.Framework.Reporting;
using Syncfusion.Pdf;
using Syncfusion.XlsIO;

namespace Fred.Business.BaremeExploitation.Edition
{
    /// <summary>
    /// Class Helper to Generat Excel File For Bareme Organisation And CI 
    /// </summary>
    public class BaremeExportHelper : IBaremeExportHelper
    {
        /// <summary>
        /// Represent the name of used font
        /// </summary>
        private const string FontName = "Calibri";

        /// <summary>
        /// Represent Font Size
        /// </summary>
        private const int FontSize = 8;

        private readonly IBaremeExploitationOrganisationManager baremeExploitationOrganisationManager;
        private readonly IOrganisationManager organisationManager;

        public BaremeExportHelper(
            IBaremeExploitationOrganisationManager baremeExploitationOrganisationManager,
            IOrganisationManager organisationManager)
        {
            this.baremeExploitationOrganisationManager = baremeExploitationOrganisationManager;
            this.organisationManager = organisationManager;
        }

        /// <summary>
        /// GEt Bareme Organisation For Societe 
        /// </summary>
        /// <param name="periode">Period For Generating Bareme</param>
        /// <param name="orgas">List Of Organisation Parent</param>
        /// <returns>List Of Bareme Organisation</returns>
        public List<BaremeExploitationOrganisationEnt> GetBaremesOrganisationSociete(DateTime periode, List<OrganisationEnt> orgas)
        {
            if (orgas.Any(x => x.TypeOrganisationId == OrganisationType.Societe.ToIntValue()))
            {
                return baremeExploitationOrganisationManager.GetBaremesByOrganisationIdAndPeriode(periode, orgas.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Societe.ToIntValue()).OrganisationId);
            }
            return Enumerable.Empty<BaremeExploitationOrganisationEnt>().ToList();
        }

        /// <summary>
        /// GEt Bareme Organisation For PUO 
        /// </summary>
        /// <param name="periode">Period For Generating Bareme</param>
        /// <param name="orgas">List Of Organisation Parent</param>
        /// <returns>List Of Bareme Organisation</returns>
        public List<BaremeExploitationOrganisationEnt> GetBaremesOrganisationPuo(DateTime periode, List<OrganisationEnt> orgas)
        {
            if (orgas.Any(x => x.TypeOrganisationId == OrganisationType.Puo.ToIntValue()))
            {
                return baremeExploitationOrganisationManager.GetBaremesByOrganisationIdAndPeriode(periode, orgas.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Puo.ToIntValue()).OrganisationId);
            }
            return Enumerable.Empty<BaremeExploitationOrganisationEnt>().ToList();
        }

        /// <summary>
        /// Get Bareme Organisation For UO 
        /// </summary>
        /// <param name="periode">Period For Generating Bareme</param>
        /// <param name="orgas">List Of Organisation Parent</param>
        /// <returns>List Of Bareme Organisation</returns>
        public List<BaremeExploitationOrganisationEnt> GetBaremesOrganisationUo(DateTime periode, List<OrganisationEnt> orgas)
        {
            if (orgas.Any(x => x.TypeOrganisationId == OrganisationType.Uo.ToIntValue()))
            {
                return baremeExploitationOrganisationManager.GetBaremesByOrganisationIdAndPeriode(periode, orgas.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Uo.ToIntValue()).OrganisationId);
            }
            return Enumerable.Empty<BaremeExploitationOrganisationEnt>().ToList();
        }

        /// <summary>
        /// Get Bareme Organisation For Etablissement 
        /// </summary>
        /// <param name="periode">Period For Generating Bareme</param>
        /// <param name="orgas">List Of Organisation Parent</param>
        /// <returns>List Of Bareme Organisation</returns>
        public List<BaremeExploitationOrganisationEnt> GetBaremesOrganisationEtablissemnt(DateTime periode, List<OrganisationEnt> orgas)
        {
            if (orgas.Any(x => x.TypeOrganisationId == OrganisationType.Uo.ToIntValue()))
            {
                return baremeExploitationOrganisationManager.GetBaremesByOrganisationIdAndPeriode(periode, orgas.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Etablissement.ToIntValue()).OrganisationId);
            }
            return Enumerable.Empty<BaremeExploitationOrganisationEnt>().ToList();
        }

        /// <summary>
        /// Get Parent OF Organisation
        /// </summary>
        /// <param name="idorga">Id Organisation</param>
        /// <returns>List Of Bareme Organisation</returns>
        public List<OrganisationEnt> GetPrentOfOrganisation(int idorga)
        {
            return organisationManager.GetOrganisationParentByOrganisationId(idorga, OrganisationType.Groupe.ToIntValue());
        }

        /// <summary>
        /// Get First Bareme Of Organisation Parent Not Null 
        /// </summary>
        /// <param name="periode">Period Generating Bareme</param>
        /// <param name="orgas">List Of Organisation Parent</param>
        /// <returns>List Of Bareme Organisation</returns>
        public List<BaremeExploitationOrganisationEnt> GetFirstNotNullBaremeOfOrganisationParent(DateTime periode, List<OrganisationEnt> orgas)
        {
            if (GetBaremesOrganisationEtablissemnt(periode, orgas).Count > 0)
            {
                return GetBaremesOrganisationEtablissemnt(periode, orgas);
            }
            if (GetBaremesOrganisationUo(periode, orgas).Count > 0)
            {
                return GetBaremesOrganisationUo(periode, orgas);
            }
            if (GetBaremesOrganisationPuo(periode, orgas).Count > 0)
            {
                return GetBaremesOrganisationPuo(periode, orgas);
            }
            if (GetBaremesOrganisationSociete(periode, orgas).Count > 0)
            {
                return GetBaremesOrganisationSociete(periode, orgas);
            }
            return Enumerable.Empty<BaremeExploitationOrganisationEnt>().ToList();
        }

        /// <summary>
        /// Transforme MemoryStream To  en Pdf or  Excel
        /// </summary>
        /// <param name="pdf">True is is PDF</param>
        /// <param name="stream">Object MemoryStream à transformer</param>
        /// <returns>String IDCache</returns>
        public string TransformMemoryStreamToPdfOrExcel(bool pdf, MemoryStream stream)
        {
            byte[] bytes = stream.GetBuffer();
            string typeCache;
            string cacheId = Guid.NewGuid().ToString();
            ExcelFormat excelFormat = new ExcelFormat();

            if (pdf)
            {
                typeCache = "pdfBytes_";
            }
            else
            {
                typeCache = "excelBytes_";
                // --> Comme ça, ça marche pour l'excel mais pas pour le pdf!        
                stream.Position = 0;
                bytes = new byte[stream.Length];
                stream.Read(bytes, 0, (int)stream.Length);
            }
            excelFormat.Dispose();
            stream.Dispose();
            CacheItemPolicy policy = new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.Now.AddSeconds(300), Priority = CacheItemPriority.NotRemovable };
            MemoryCache.Default.Add(typeCache + cacheId, bytes, policy);

            return cacheId;
        }

        /// <summary>
        /// Generate  PDF or Excel based on MemoryStream
        /// </summary>
        /// <param name="pdf">True if PDF</param>
        /// <param name="excelFormat">Formate Excel</param>
        /// <param name="workbook">Object Excel Workbook</param>
        /// <returns>MemoryStream</returns>
        public MemoryStream GeneratePdfOrExcel(bool pdf, ExcelFormat excelFormat, IWorkbook workbook)
        {
            MemoryStream stream = new MemoryStream();
            if (pdf)
            {
                PdfDocument pdfDoc = excelFormat.PrintExcelToPdf(workbook);
                string cacheId = Guid.NewGuid().ToString();
                string tempFilename = Path.Combine(Path.GetTempPath(), cacheId + ".pdf");
                pdfDoc.Save(tempFilename);
                stream = excelFormat.ChargerFichier(tempFilename);
                File.Delete(tempFilename);
                pdfDoc.Close();
            }
            else
            {
                workbook.SaveAs(stream);
            }
            workbook.Close();
            return stream;
        }
        /// <summary>
        /// Insert A Text To a range Of Cells And Apply Merge
        /// </summary>
        /// <param name="worksheet">WorkSheet</param>
        /// <param name="text">Text To Insert</param>
        /// <param name="numLigne">Identification number of Ligne</param>
        /// <param name="numStartColumn">Identification number of Start Column</param>
        /// <param name="numEndColumn">Identification number Of End Column</param>
        public void ApplyTextAndMerge(IWorksheet worksheet, string text, int numLigne, int numStartColumn, int numEndColumn)
        {
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].Text = text;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].CellStyle.Font.Size = FontSize;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].CellStyle.Font.FontName = FontName;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].Merge();
        }

        /// <summary>
        /// Insert A Number To a range Of Cells And Apply and Merge
        /// </summary>
        /// <param name="worksheet">WorkSheet</param>
        /// <param name="text">Text To Insert</param>
        /// <param name="numLigne">Identification number of the ligne</param>
        /// <param name="numStartColumn">Identification number of the start column</param>
        /// <param name="numEndColumn">Identification number of the end column</param>
        public void ApplyValueAndMerge(IWorksheet worksheet, string text, int numLigne, int numStartColumn, int numEndColumn)
        {
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].Value2 = text;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].CellStyle.Font.Size = FontSize;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].CellStyle.Font.FontName = FontName;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].Merge();
        }

        /// <summary>
        /// Insert A text To a range Of Cells And Apply Align centre and Merge
        /// </summary>
        /// <param name="worksheet">WorkSheet</param>
        /// <param name="text">Text To Insert</param>
        /// <param name="numLigne">Identification number of the ligne</param>
        /// <param name="numStartColumn">Identification number of the start column</param>
        /// <param name="numEndColumn">Identification number of the end column</param>
        public void ApplyTextAndCenterAlignMerge(IWorksheet worksheet, string text, int numLigne, int numStartColumn, int numEndColumn)
        {
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].Text = text;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].CellStyle.Font.Size = FontSize;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].CellStyle.Font.FontName = FontName;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].Merge();
        }

        /// <summary>
        /// Insert A Number To a range Of Cells And Apply Align centre and Merge
        /// </summary>
        /// <param name="worksheet">WorkSheet</param>
        /// <param name="text">Text To Insert</param>
        /// <param name="numLigne">Identification number of the ligne</param>
        /// <param name="numStartColumn">Identification number of the start column</param>
        /// <param name="numEndColumn">Identification number of the end column</param>
        public void ApplyValueAndCenterAlignMerge(IWorksheet worksheet, string text, int numLigne, int numStartColumn, int numEndColumn)
        {
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].Value2 = text;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].CellStyle.Font.Size = FontSize;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].CellStyle.Font.FontName = FontName;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].CellStyle.NumberFormat = "0.000";
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignRight;
            worksheet.Range[numLigne, numStartColumn, numLigne, numEndColumn].Merge();
        }

        /// <summary>
        /// Help To make The first letter in Upper Case
        /// </summary>
        /// <param name="str">string</param>
        /// <returns>String With the first letter in capital</returns>
        public string FirstLetterInUpperCase(string str)
        {
            return char.ToUpper(str[0]) + str.Remove(0, 1);
        }

        /// <summary>
        /// Setup Header And Footer For a Worksheet
        /// </summary>
        /// <param name="worksheet">workSheet</param>
        public void SetupHeaderAndFooter(IWorksheet worksheet)
        {
            worksheet.PageSetup.PrintTitleRows = "$1:$" + 7;
            worksheet.PageSetup.Orientation = ExcelPageOrientation.Landscape;
            worksheet.PageSetup.FitToPagesTall = 0;
            worksheet.PageSetup.CenterFooter = $" &P / &N";
        }
    }
}
