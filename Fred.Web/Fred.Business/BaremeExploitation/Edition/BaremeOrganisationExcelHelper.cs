using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Fred.Business.BaremeExploitation.ExportBaremeModel;
using Fred.Business.Images;
using Fred.Business.Societe;
using Fred.Business.Utilisateur;
using Fred.Entities;
using Fred.Entities.Bareme;
using Fred.Entities.Bareme.Models;
using Fred.Entities.Organisation;
using Fred.Entities.ReferentielFixe;
using Fred.Framework.Exceptions;
using Fred.Framework.Extensions;
using Fred.Framework.Reporting;
using Syncfusion.XlsIO;

namespace Fred.Business.BaremeExploitation.Edition
{
    /// <summary>
    /// This Is A class To Generate BaremeOrganisation Excel
    /// </summary>
    public class BaremeOrganisationExcelHelper : IBaremeOrganisationExcelHelper
    {
        private const int StartLigneNumber = 7;
        private const string LogoTag = "#Logo";

        private readonly IBaremeExploitationOrganisationManager baremeExploitationOrganisationManager;
        private readonly IUtilisateurManager utilisateurManager;
        private readonly IBaremeExportHelper baremeExportHelper;
        private readonly IImageManager imageManager;
        private readonly string excelTemplate = "TemplateFichierBaremesOrganisation.xlsx";
        private readonly Color colorForSocieteWorkSheet = Color.FromArgb(0, 208, 228, 177);
        private readonly ISocieteManager societeManager;

        protected List<SocieteExportModel> societeExportModel = new List<SocieteExportModel>();
        protected List<EtablissementExportModel> etablissementExportModel = new List<EtablissementExportModel>();
        protected List<PuoExportModel> puoExportModel = new List<PuoExportModel>();
        protected List<UoExportModel> uoExportModel = new List<UoExportModel>();
        protected BaremeTemplateModel baremeTemplateModel = new BaremeTemplateModel();

        public BaremeOrganisationExcelHelper(
            ISocieteManager societeManager,
            IBaremeExploitationOrganisationManager baremeExploitationOrganisationManager,
            IUtilisateurManager utilisateurManager,
            IBaremeExportHelper baremeExportHelper,
            IImageManager imageManager)
        {
            this.societeManager = societeManager;
            this.baremeExploitationOrganisationManager = baremeExploitationOrganisationManager;
            this.utilisateurManager = utilisateurManager;
            this.baremeExportHelper = baremeExportHelper;
            this.imageManager = imageManager;
        }

        /// <summary>
        ///  Prepare The Excel File 
        /// </summary>
        /// <param name="societe">List Of Societe Export Model</param>
        /// <param name="etablissement">List of Etablissement Export Model</param>
        /// <param name="puo">List Of Puo Export Model</param>
        /// <param name="uo">List Of Uo Export Model</param>
        /// <param name="baremeOrganisationExcelModel">Model send From Front</param>
        /// <returns>MemoryStream</returns>
        public async Task<MemoryStream> CreateBaremeOrganisationExcelAsync(List<SocieteExportModel> societe, List<EtablissementExportModel> etablissement, List<PuoExportModel> puo, List<UoExportModel> uo, ExportBaremeOrganisationExcelModel baremeOrganisationExcelModel)
        {
            try
            {
                using (var excelFormat = new ExcelFormat())
                {
                    string pathName = AppDomain.CurrentDomain.BaseDirectory + @"Templates\Bareme\" + excelTemplate;
                    IWorkbook workbook = excelFormat.OpenTemplateWorksheet(pathName);
                    IWorksheet worksheetSociete = workbook.Worksheets[0];
                    IWorksheet worksheetPuo = workbook.Worksheets[1];
                    IWorksheet worksheetUo = workbook.Worksheets[2];
                    IWorksheet worksheetEtablissement = workbook.Worksheets[3];


                    //Create Template Marker Processor
                    ITemplateMarkersProcessor marker = workbook.CreateTemplateMarkersProcessor();
                    var user = utilisateurManager.GetContextUtilisateur();
                    string nameOfMonth = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(baremeOrganisationExcelModel.Period.Month);
                    baremeTemplateModel.Periode = baremeExportHelper.FirstLetterInUpperCase(nameOfMonth) + " " + baremeOrganisationExcelModel.Period.Year.ToString();
                    baremeTemplateModel.EditionDate = DateTime.Now.ToString("dd/MM/yyyy HH:mm");
                    baremeTemplateModel.UserName = user.Prenom + " " + user.Nom;

                    marker.AddVariable("baremeTemplate", baremeTemplateModel);

                    //Add logo in workSheets
                    int societeId = societeManager.GetSocieteByOrganisationId(baremeOrganisationExcelModel.IdSelectedOrganisation).SocieteId;
                    var partielPath = imageManager.GetLogoImage(societeId).Path;
                    string pathCGA = !string.IsNullOrWhiteSpace(partielPath) ? AppDomain.CurrentDomain.BaseDirectory + partielPath : string.Empty;

                    excelFormat.FindLogoAndAddPictureForExcel(pathCGA, LogoTag, worksheetSociete);
                    excelFormat.FindLogoAndAddPictureForExcel(pathCGA, LogoTag, worksheetPuo);
                    excelFormat.FindLogoAndAddPictureForExcel(pathCGA, LogoTag, worksheetUo);
                    excelFormat.FindLogoAndAddPictureForExcel(pathCGA, LogoTag, worksheetEtablissement);

                    // Configuration Header And Footer
                    baremeExportHelper.SetupHeaderAndFooter(worksheetSociete);
                    baremeExportHelper.SetupHeaderAndFooter(worksheetPuo);
                    baremeExportHelper.SetupHeaderAndFooter(worksheetUo);
                    baremeExportHelper.SetupHeaderAndFooter(worksheetEtablissement);
                    // Fin Configuration

                    CreateWorkSheetSociete(worksheetSociete, societe);
                    CreateWorkSheetPuo(worksheetPuo, puo);
                    CreateWorkSheetUo(worksheetUo, uo);
                    CreateWorkSheetEtablissemnt(worksheetEtablissement, etablissement);
                    //Process the markers in the template
                    marker.ApplyMarkers();
                    if (!societe.Any() && !baremeOrganisationExcelModel.ListOfCheckedLevel.Any(x => x == OrganisationType.Societe.ToIntValue()))
                    {
                        worksheetSociete.Remove();
                    }
                    if (!puo.Any() && !baremeOrganisationExcelModel.ListOfCheckedLevel.Any(x => x == OrganisationType.Puo.ToIntValue()))
                    {
                        worksheetPuo.Remove();
                    }
                    if (!uo.Any() && !baremeOrganisationExcelModel.ListOfCheckedLevel.Any(x => x == OrganisationType.Uo.ToIntValue()))
                    {
                        worksheetUo.Remove();
                    }
                    if (!etablissement.Any() && !baremeOrganisationExcelModel.ListOfCheckedLevel.Any(x => x == OrganisationType.Etablissement.ToIntValue()))
                    {
                        worksheetEtablissement.Remove();
                    }

                    return baremeExportHelper.GeneratePdfOrExcel(baremeOrganisationExcelModel.IsPdf, excelFormat, workbook);
                }
            }
            catch (Exception ex)
            {
                throw new FredTechnicalException(ex.Message, ex);
            }
        }

        private void CreateWorkSheetSociete(IWorksheet worksheetSociete, List<SocieteExportModel> societesExportModel)
        {
            //Start Ligne Number 
            int numLigne = StartLigneNumber;
            foreach (var chapitre in societesExportModel)
            {
                numLigne++;
                baremeExportHelper.ApplyTextAndMerge(worksheetSociete, chapitre.CodeLibelleChapitre, numLigne, 1, 10);
                worksheetSociete.Range[numLigne, 1, numLigne, 20].CellStyle.Color = System.Drawing.Color.FromArgb(0, 230, 230, 230);
                worksheetSociete.Range[numLigne, 21, numLigne, 28].CellStyle.Color = colorForSocieteWorkSheet;
                foreach (var sousChapitre in chapitre.ListSousChapitres)
                {
                    numLigne++;
                    baremeExportHelper.ApplyTextAndMerge(worksheetSociete, sousChapitre.CodeLibelleSousChapitre, numLigne, 2, 10);
                    worksheetSociete.Range[numLigne, 1, numLigne, 20].CellStyle.Color = System.Drawing.Color.FromArgb(0, 242, 242, 242);
                    worksheetSociete.Range[numLigne, 21, numLigne, 28].CellStyle.Color = colorForSocieteWorkSheet;
                    foreach (var ressource in sousChapitre.Ressources)
                    {
                        numLigne++;
                        baremeExportHelper.ApplyTextAndMerge(worksheetSociete, ressource.CodeLibelleRessource, numLigne, 3, 10);
                        baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetSociete, ressource.Prix.ToString(), numLigne, 21, 22);
                        baremeExportHelper.ApplyTextAndCenterAlignMerge(worksheetSociete, ressource.Unite, numLigne, 23, 24);
                        baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetSociete, ressource.PrixChauffeur.ToString(), numLigne, 25, 26);
                        baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetSociete, ressource.PrixConduite.ToString(), numLigne, 27, 28);
                        worksheetSociete.Range[numLigne, 1, numLigne, 28].CellStyle.Color = System.Drawing.Color.White;
                        worksheetSociete.Range[numLigne, 21, numLigne, 28].CellStyle.Color = colorForSocieteWorkSheet;
                    }
                }
            }
        }

        private void CreateWorkSheetPuo(IWorksheet worksheetPuo, List<PuoExportModel> puoExportModel)
        {
            // Start Ligne Number
            int numLigne = StartLigneNumber;
            foreach (var chapitre in puoExportModel)
            {
                numLigne++;
                baremeExportHelper.ApplyTextAndMerge(worksheetPuo, chapitre.CodeLibelleChapitre, numLigne, 1, 10);
                worksheetPuo.Range[numLigne, 1, numLigne, 20].CellStyle.Color = System.Drawing.Color.FromArgb(0, 230, 230, 230);
                worksheetPuo.Range[numLigne, 18, numLigne, 19].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                worksheetPuo.Range[numLigne, 21, numLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 202, 231, 239);
                foreach (var sousChapitre in chapitre.ListSousChapitres)
                {
                    numLigne++;
                    baremeExportHelper.ApplyTextAndMerge(worksheetPuo, sousChapitre.CodeLibelleSousChapitre, numLigne, 2, 10);
                    worksheetPuo.Range[numLigne, 1, numLigne, 20].CellStyle.Color = System.Drawing.Color.FromArgb(0, 242, 242, 242);
                    worksheetPuo.Range[numLigne, 18, numLigne, 19].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                    worksheetPuo.Range[numLigne, 21, numLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 202, 231, 239);
                    foreach (var ressource in sousChapitre.Ressources)
                    {
                        numLigne++;
                        baremeExportHelper.ApplyTextAndMerge(worksheetPuo, ressource.CodeLibelleRessource, numLigne, 3, 10);
                        baremeExportHelper.ApplyTextAndCenterAlignMerge(worksheetPuo, ressource.PrixSocieteInfo, numLigne, 18, 19);
                        baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetPuo, ressource.Prix.ToString(), numLigne, 21, 22);
                        baremeExportHelper.ApplyTextAndCenterAlignMerge(worksheetPuo, ressource.Unite, numLigne, 23, 24);
                        baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetPuo, ressource.PrixChauffeur.ToString(), numLigne, 25, 26);
                        baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetPuo, ressource.PrixConduite.ToString(), numLigne, 27, 28);
                        worksheetPuo.Range[numLigne, 1, numLigne, 28].CellStyle.Color = System.Drawing.Color.White;
                        worksheetPuo.Range[numLigne, 18, numLigne, 19].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                        worksheetPuo.Range[numLigne, 21, numLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 202, 231, 239);
                    }
                }
            }
        }

        private void CreateWorkSheetUo(IWorksheet worksheetUo, List<UoExportModel> uoExportModel)
        {
            // Start Ligne Number
            int numLigne = StartLigneNumber;
            foreach (var chapitre in uoExportModel)
            {
                numLigne++;
                baremeExportHelper.ApplyTextAndMerge(worksheetUo, chapitre.CodeLibelleChapitre, numLigne, 1, 10);
                worksheetUo.Range[numLigne, 1, numLigne, 20].CellStyle.Color = System.Drawing.Color.FromArgb(0, 230, 230, 230);
                worksheetUo.Range[numLigne, 15, numLigne, 16].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                worksheetUo.Range[numLigne, 18, numLigne, 19].CellStyle.Color = System.Drawing.Color.FromArgb(0, 202, 231, 239);
                worksheetUo.Range[numLigne, 21, numLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                foreach (var sousChapitre in chapitre.ListSousChapitres)
                {
                    numLigne++;
                    baremeExportHelper.ApplyTextAndMerge(worksheetUo, sousChapitre.CodeLibelleSousChapitre, numLigne, 2, 10);
                    worksheetUo.Range[numLigne, 1, numLigne, 20].CellStyle.Color = System.Drawing.Color.FromArgb(0, 242, 242, 242);
                    worksheetUo.Range[numLigne, 15, numLigne, 16].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                    worksheetUo.Range[numLigne, 18, numLigne, 19].CellStyle.Color = System.Drawing.Color.FromArgb(0, 202, 231, 239);
                    worksheetUo.Range[numLigne, 21, numLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                    foreach (var ressource in sousChapitre.Ressources)
                    {
                        numLigne++;
                        baremeExportHelper.ApplyTextAndMerge(worksheetUo, ressource.CodeLibelleRessource, numLigne, 3, 10);
                        baremeExportHelper.ApplyTextAndCenterAlignMerge(worksheetUo, ressource.PrixSocieteInfo, numLigne, 15, 16);
                        baremeExportHelper.ApplyTextAndCenterAlignMerge(worksheetUo, ressource.PrixPuoInfo, numLigne, 18, 19);
                        baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetUo, ressource.Prix.ToString(), numLigne, 21, 22);
                        baremeExportHelper.ApplyTextAndCenterAlignMerge(worksheetUo, ressource.Unite, numLigne, 23, 24);
                        baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetUo, ressource.PrixChauffeur.ToString(), numLigne, 25, 26);
                        baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetUo, ressource.PrixConduite.ToString(), numLigne, 27, 28);
                        worksheetUo.Range[numLigne, 1, numLigne, 28].CellStyle.Color = System.Drawing.Color.White;
                        worksheetUo.Range[numLigne, 15, numLigne, 16].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                        worksheetUo.Range[numLigne, 18, numLigne, 19].CellStyle.Color = System.Drawing.Color.FromArgb(0, 202, 231, 239);
                        worksheetUo.Range[numLigne, 21, numLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                    }
                }
            }
        }

        private void CreateWorkSheetEtablissemnt(IWorksheet worksheetEtablissemnt, List<EtablissementExportModel> etablissementExportModel)
        {
            // Start Ligne Number
            int numLigne = StartLigneNumber;
            foreach (var chapitre in etablissementExportModel)
            {
                numLigne++;
                baremeExportHelper.ApplyTextAndMerge(worksheetEtablissemnt, chapitre.CodeLibelleChapitre, numLigne, 1, 10);
                worksheetEtablissemnt.Range[numLigne, 1, numLigne, 20].CellStyle.Color = System.Drawing.Color.FromArgb(0, 230, 230, 230);
                worksheetEtablissemnt.Range[numLigne, 12, numLigne, 13].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                worksheetEtablissemnt.Range[numLigne, 15, numLigne, 16].CellStyle.Color = System.Drawing.Color.FromArgb(0, 202, 231, 239);
                worksheetEtablissemnt.Range[numLigne, 18, numLigne, 19].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                worksheetEtablissemnt.Range[numLigne, 21, numLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 202, 231, 239);
                foreach (var sousChapitre in chapitre.ListSousChapitres)
                {
                    numLigne++;
                    baremeExportHelper.ApplyTextAndMerge(worksheetEtablissemnt, sousChapitre.CodeLibelleSousChapitre, numLigne, 2, 10);
                    worksheetEtablissemnt.Range[numLigne, 1, numLigne, 20].CellStyle.Color = System.Drawing.Color.FromArgb(0, 242, 242, 242);
                    worksheetEtablissemnt.Range[numLigne, 12, numLigne, 13].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                    worksheetEtablissemnt.Range[numLigne, 15, numLigne, 16].CellStyle.Color = System.Drawing.Color.FromArgb(0, 202, 231, 239);
                    worksheetEtablissemnt.Range[numLigne, 18, numLigne, 19].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                    worksheetEtablissemnt.Range[numLigne, 21, numLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 202, 231, 239);
                    foreach (var ressource in sousChapitre.Ressources)
                    {
                        numLigne++;
                        baremeExportHelper.ApplyTextAndMerge(worksheetEtablissemnt, ressource.CodeLibelleRessource, numLigne, 3, 10);
                        baremeExportHelper.ApplyTextAndCenterAlignMerge(worksheetEtablissemnt, ressource.PrixSocieteInfo, numLigne, 12, 13);
                        baremeExportHelper.ApplyTextAndCenterAlignMerge(worksheetEtablissemnt, ressource.PrixPuoInfo, numLigne, 15, 16);
                        baremeExportHelper.ApplyTextAndCenterAlignMerge(worksheetEtablissemnt, ressource.PrixUoInfo, numLigne, 18, 19);
                        baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetEtablissemnt, ressource.Prix.ToString(), numLigne, 21, 22);
                        baremeExportHelper.ApplyTextAndCenterAlignMerge(worksheetEtablissemnt, ressource.Unite, numLigne, 23, 24);
                        baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetEtablissemnt, ressource.PrixChauffeur.ToString(), numLigne, 25, 26);
                        baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetEtablissemnt, ressource.PrixConduite.ToString(), numLigne, 27, 28);
                        worksheetEtablissemnt.Range[numLigne, 1, numLigne, 28].CellStyle.Color = System.Drawing.Color.White;
                        worksheetEtablissemnt.Range[numLigne, 12, numLigne, 13].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                        worksheetEtablissemnt.Range[numLigne, 15, numLigne, 16].CellStyle.Color = System.Drawing.Color.FromArgb(0, 202, 231, 239);
                        worksheetEtablissemnt.Range[numLigne, 18, numLigne, 19].CellStyle.Color = System.Drawing.Color.FromArgb(0, 208, 228, 177);
                        worksheetEtablissemnt.Range[numLigne, 21, numLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 202, 231, 239);
                    }
                }
            }
        }

        public async Task<MemoryStream> GenerateBaremeOrganisationExcelAsync(ExportBaremeOrganisationExcelModel exportBaremeOrganisationExcelModel)
        {
            try
            {
                switch (exportBaremeOrganisationExcelModel.LevelOfSelectedOrganisation)
                {
                    case (int)OrganisationType.Societe:
                        HandleSelectedSociete(exportBaremeOrganisationExcelModel.IdSelectedOrganisation, exportBaremeOrganisationExcelModel.Period);
                        break;
                    case (int)OrganisationType.Puo:
                        HandleSelectedPuo(exportBaremeOrganisationExcelModel.ListOfCheckedLevel, exportBaremeOrganisationExcelModel.IdSelectedOrganisation, exportBaremeOrganisationExcelModel.Period);
                        break;
                    case (int)OrganisationType.Uo:
                        HandleSelectedUo(exportBaremeOrganisationExcelModel.ListOfCheckedLevel, exportBaremeOrganisationExcelModel.IdSelectedOrganisation, exportBaremeOrganisationExcelModel.Period);
                        break;
                    case (int)OrganisationType.Etablissement:
                        HandleSelectedEtablissement(exportBaremeOrganisationExcelModel.ListOfCheckedLevel, exportBaremeOrganisationExcelModel.IdSelectedOrganisation, exportBaremeOrganisationExcelModel.Period);
                        break;
                }

                return await CreateBaremeOrganisationExcelAsync(societeExportModel, etablissementExportModel, puoExportModel, uoExportModel, exportBaremeOrganisationExcelModel);
            }
            catch (Exception ex)
            {
                throw new FredTechnicalException(ex.Message, ex);
            }
        }

        /// <summary>
        /// Methode To Create Societe Bareme Export Model If The user Check Societe
        /// </summary>
        /// <param name="idSelectedOrganisation">Id Of Societe</param>
        /// <param name="period">Period Of generating Rapport</param>
        private void HandleSelectedSociete(int idSelectedOrganisation, DateTime period)
        {
            societeExportModel = FillSocieteExportModel(idSelectedOrganisation, period);
        }

        /// <summary>
        ///  Methode To Create Puo And/Or Societe Bareme Export Model switch of user choice
        /// </summary>
        /// <param name="checkedOrga">List Of Organisation That User Was Choose</param>
        /// <param name="idselectdOrga">Id Of Organisation Choosed In Picklist</param>
        /// <param name="period">Period Of generating Rapport</param>
        private void HandleSelectedPuo(List<int> checkedOrga, int idselectdOrga, DateTime period)
        {
            var listOrganisationParent = baremeExportHelper.GetPrentOfOrganisation(idselectdOrga);
            if (checkedOrga.Any(x => x == OrganisationType.Puo.ToIntValue()))
            {
                puoExportModel = FillPuoExportModel(idselectdOrga, period);
            }
            if (checkedOrga.Any(x => x == OrganisationType.Societe.ToIntValue()) && listOrganisationParent.Any(x => x.TypeOrganisation.TypeOrganisationId == OrganisationType.Societe.ToIntValue()))
            {
                int idorga = listOrganisationParent.FirstOrDefault(o => o.TypeOrganisation.TypeOrganisationId == OrganisationType.Societe.ToIntValue()).OrganisationId;
                societeExportModel = FillSocieteExportModel(idorga, period);
            }
        }

        /// <summary>
        /// Methode To Create Uo And/Or PUO,Societe Bareme Export Model switch of user choice
        /// </summary>
        /// <param name="checkedOrga">List Of Organisation That User Was Choose</param>
        /// <param name="idselectdOrga">Id Of Organisation Choosed In Picklist</param>
        /// <param name="period">Period Of generating Rapport</param>
        private void HandleSelectedUo(List<int> checkedOrga, int idselectdOrga, DateTime period)
        {
            var listOrganisationParent = baremeExportHelper.GetPrentOfOrganisation(idselectdOrga);

            if (checkedOrga.Any(x => x == OrganisationType.Uo.ToIntValue()))
            {
                uoExportModel = FillUoExportModel(idselectdOrga, period);
            }
            if (checkedOrga.Any(x => x == OrganisationType.Puo.ToIntValue())
                && listOrganisationParent.Any(x => x.TypeOrganisation.TypeOrganisationId == OrganisationType.Puo.ToIntValue()))
            {
                int idorga = listOrganisationParent.FirstOrDefault(o => o.TypeOrganisation.TypeOrganisationId == OrganisationType.Puo.ToIntValue()).OrganisationId;
                puoExportModel = FillPuoExportModel(idorga, period);
            }
            if (checkedOrga.Any(x => x == OrganisationType.Societe.ToIntValue()
            && listOrganisationParent.Any(xo => xo.TypeOrganisation.TypeOrganisationId == OrganisationType.Societe.ToIntValue())))
            {
                int idorga = listOrganisationParent.FirstOrDefault(o => o.TypeOrganisation.TypeOrganisationId == OrganisationType.Societe.ToIntValue()).OrganisationId;
                societeExportModel = FillSocieteExportModel(idorga, period);
            }
        }

        /// <summary>
        /// Methode To Create Etablissement And/Or Uo,PUO,Societe Bareme Export Model switch of user choice
        /// </summary>
        /// <param name="checkedOrga">List Of Organisation That User Was Choose</param>
        /// <param name="idselectdOrga">Id Of Organisation Choosed In Picklist</param>
        /// <param name="period">Period Of generating Rapport</param>
        private void HandleSelectedEtablissement(List<int> checkedOrga, int idselectdOrga, DateTime period)
        {
            List<OrganisationEnt> listOrganisationParent = baremeExportHelper.GetPrentOfOrganisation(idselectdOrga);

            if (checkedOrga.Any(x => x == OrganisationType.Uo.ToIntValue())
                                      && listOrganisationParent.Any(x => x.TypeOrganisation.TypeOrganisationId == OrganisationType.Uo.ToIntValue()))
            {
                int idorga = listOrganisationParent.FirstOrDefault(o => o.TypeOrganisation.TypeOrganisationId == OrganisationType.Uo.ToIntValue()).OrganisationId;
                uoExportModel = FillUoExportModel(idorga, period);
            }
            if (checkedOrga.Any(x => x == OrganisationType.Puo.ToIntValue())
                && listOrganisationParent.Any(x => x.TypeOrganisation.TypeOrganisationId == OrganisationType.Puo.ToIntValue()))
            {
                int idorga = listOrganisationParent.FirstOrDefault(o => o.TypeOrganisation.TypeOrganisationId == OrganisationType.Puo.ToIntValue()).OrganisationId;
                puoExportModel = FillPuoExportModel(idorga, period);
            }
            if (checkedOrga.Any(x => x == OrganisationType.Societe.ToIntValue())
                && listOrganisationParent.Any(x => x.TypeOrganisation.TypeOrganisationId == OrganisationType.Societe.ToIntValue()))
            {
                int idorga = listOrganisationParent.FirstOrDefault(o => o.TypeOrganisation.TypeOrganisationId == OrganisationType.Societe.ToIntValue()).OrganisationId;
                societeExportModel = FillSocieteExportModel(idorga, period);
            }
            if (checkedOrga.Any(x => x == OrganisationType.Etablissement.ToIntValue()))
            {
                etablissementExportModel = FillEtablissementExportModel(idselectdOrga, period);
            }
        }

        private List<SocieteExportModel> FillSocieteExportModel(int idOrganisation, DateTime period)
        {
            List<BaremeExploitationOrganisationEnt> listBaremesOrganisation = baremeExploitationOrganisationManager.GetBaremesByOrganisationIdAndPeriode(period, idOrganisation);
            List<OrganisationEnt> orga = baremeExportHelper.GetPrentOfOrganisation(idOrganisation);
            baremeTemplateModel.LibelleSociete = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Societe.ToIntValue())?.Libelle;
            int groupId = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Groupe.ToIntValue()).Groupe.GroupeId;
            List<ChapitreEnt> listChapitres = baremeExploitationOrganisationManager.GetReferentielFixe(groupId);
            BaremeOfAllTreeOrganisation lisOfBareme = new BaremeOfAllTreeOrganisation();
            return CreatExportOrganisationModel<SocieteExportModel>(listChapitres, listBaremesOrganisation, lisOfBareme);
        }

        private List<PuoExportModel> FillPuoExportModel(int idOrganisation, DateTime period)
        {
            List<BaremeExploitationOrganisationEnt> listBaremesOrganisation = baremeExploitationOrganisationManager.GetBaremesByOrganisationIdAndPeriode(period, idOrganisation);
            List<OrganisationEnt> orga = baremeExportHelper.GetPrentOfOrganisation(idOrganisation);
            List<BaremeExploitationOrganisationEnt> listBaremesOrganisationSociete = baremeExportHelper.GetBaremesOrganisationSociete(period, orga);
            baremeTemplateModel.CodeSociete = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Societe.ToIntValue())?.Code;
            baremeTemplateModel.LibellePuo = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Puo.ToIntValue())?.Libelle;
            int groupId = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Groupe.ToIntValue()).Groupe.GroupeId;
            List<ChapitreEnt> listChapitres = baremeExploitationOrganisationManager.GetReferentielFixe(groupId);
            BaremeOfAllTreeOrganisation lisOfBareme = new BaremeOfAllTreeOrganisation();
            lisOfBareme.ListBaremesOrganisationSociete = listBaremesOrganisationSociete;
            return CreatExportOrganisationModel<PuoExportModel>(listChapitres, listBaremesOrganisation, lisOfBareme);

        }

        private List<UoExportModel> FillUoExportModel(int idOrganisation, DateTime period)
        {
            List<BaremeExploitationOrganisationEnt> listBaremesOrganisation = baremeExploitationOrganisationManager.GetBaremesByOrganisationIdAndPeriode(period, idOrganisation);
            List<OrganisationEnt> orga = baremeExportHelper.GetPrentOfOrganisation(idOrganisation);
            List<BaremeExploitationOrganisationEnt> listBaremesOrganisationSociete = baremeExportHelper.GetBaremesOrganisationSociete(period, orga);
            List<BaremeExploitationOrganisationEnt> listBaremesOrganisationPuo = baremeExportHelper.GetBaremesOrganisationPuo(period, orga);
            baremeTemplateModel.CodeSociete = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Societe.ToIntValue())?.Code;
            baremeTemplateModel.LibelleUo = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Uo.ToIntValue())?.Libelle;
            baremeTemplateModel.CodePuo = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Puo.ToIntValue())?.Code;
            int groupId = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Groupe.ToIntValue()).Groupe.GroupeId;
            List<ChapitreEnt> listChapitres = baremeExploitationOrganisationManager.GetReferentielFixe(groupId);
            BaremeOfAllTreeOrganisation lisOfBareme = new BaremeOfAllTreeOrganisation();
            lisOfBareme.ListBaremesOrganisationSociete = listBaremesOrganisationSociete;
            lisOfBareme.ListBaremesOrganisationPuo = listBaremesOrganisationPuo;
            return CreatExportOrganisationModel<UoExportModel>(listChapitres, listBaremesOrganisation, lisOfBareme);
        }

        private List<EtablissementExportModel> FillEtablissementExportModel(int idOrganisation, DateTime period)
        {
            List<BaremeExploitationOrganisationEnt> listBaremesOrganisation = baremeExploitationOrganisationManager.GetBaremesByOrganisationIdAndPeriode(period, idOrganisation);
            List<OrganisationEnt> orga = baremeExportHelper.GetPrentOfOrganisation(idOrganisation);
            List<BaremeExploitationOrganisationEnt> listBaremesOrganisationSociete = baremeExportHelper.GetBaremesOrganisationSociete(period, orga);
            List<BaremeExploitationOrganisationEnt> listBaremesOrganisationPuo = baremeExportHelper.GetBaremesOrganisationPuo(period, orga);
            List<BaremeExploitationOrganisationEnt> listBaremesOrganisationUo = baremeExportHelper.GetBaremesOrganisationUo(period, orga);
            baremeTemplateModel.CodeSociete = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Societe.ToIntValue())?.Code;
            baremeTemplateModel.LibelleEtablissement = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Etablissement.ToIntValue())?.Libelle;
            baremeTemplateModel.CodeUo = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Uo.ToIntValue())?.Code;
            baremeTemplateModel.CodePuo = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Puo.ToIntValue())?.Code;
            baremeTemplateModel.LibellePuo = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Puo.ToIntValue())?.Libelle;
            BaremeOfAllTreeOrganisation lisOfBareme = new BaremeOfAllTreeOrganisation(listBaremesOrganisationSociete, listBaremesOrganisationPuo, listBaremesOrganisationUo, null);
            int groupId = orga.FirstOrDefault(x => x.TypeOrganisationId == OrganisationType.Groupe.ToIntValue()).Groupe.GroupeId;
            List<ChapitreEnt> listChapitres = baremeExploitationOrganisationManager.GetReferentielFixe(groupId);

            return CreatExportOrganisationModel<EtablissementExportModel>(listChapitres, listBaremesOrganisation, lisOfBareme);
        }

        private List<T> CreatExportOrganisationModel<T>(List<ChapitreEnt> listChapitres, List<BaremeExploitationOrganisationEnt> listBaremesOrganisation, BaremeOfAllTreeOrganisation listOfBarems) where T : AbstractExportBaremeModel, new()
        {
            List<T> listExportModel = new List<T>();
            foreach (var chapitre in listChapitres)
            {
                T modelExport = new T();
                modelExport.CodeLibelleChapitre = chapitre.Code + " " + chapitre.Libelle;
                foreach (var sousChapitre in chapitre.SousChapitres)
                {
                    SousChapitreOrganisationExportModel sousChapitreModelExport = new SousChapitreOrganisationExportModel();
                    sousChapitreModelExport.CodeLibelleSousChapitre = sousChapitre.Code + " " + sousChapitre.Libelle;

                    foreach (var ressource in sousChapitre.Ressources)
                    {
                        BaremeRessourceOrganisationModel ressourceModelExport = CreateRessourceModelExport(ressource, listBaremesOrganisation, listOfBarems);
                        sousChapitreModelExport.Ressources.Add(ressourceModelExport);
                    }
                    modelExport.ListSousChapitres.Add(sousChapitreModelExport);
                }
                listExportModel.Add(modelExport);
            }

            return listExportModel;
        }

        private BaremeRessourceOrganisationModel CreateRessourceModelExport(RessourceEnt ressource, List<BaremeExploitationOrganisationEnt> listBaremesOrganisation, BaremeOfAllTreeOrganisation listOfBarems)
        {
            BaremeRessourceOrganisationModel ressourceModelExport = new BaremeRessourceOrganisationModel(ressource.Code + " " + ressource.Libelle,
             listBaremesOrganisation.Count > 0 ? listBaremesOrganisation.FirstOrDefault(x => x.RessourceId == ressource.RessourceId)?.Prix : null,
            listBaremesOrganisation.Count > 0 ? listBaremesOrganisation.FirstOrDefault(x => x.RessourceId == ressource.RessourceId)?.PrixChauffeur : null,
            listBaremesOrganisation.Count > 0 ? listBaremesOrganisation.FirstOrDefault(x => x.RessourceId == ressource.RessourceId)?.PrixConduite : null,
             listBaremesOrganisation.Count > 0 ? listBaremesOrganisation.FirstOrDefault(x => x.RessourceId == ressource.RessourceId)?.Unite.Libelle : null);
            ressourceModelExport.PrixSocieteInfo = GetPrixSocieteInfo(listOfBarems, ressource);
            ressourceModelExport.PrixPuoInfo = GetPrixPuoInfo(listOfBarems, ressource);
            ressourceModelExport.PrixUoInfo = GetPrixUoInfo(listOfBarems, ressource);
            return ressourceModelExport;
        }

        private string GetPrixSocieteInfo(BaremeOfAllTreeOrganisation listOfBarems, RessourceEnt ressource)
        {
            BaremeExploitationOrganisationEnt bareme = listOfBarems?.ListBaremesOrganisationSociete?.FirstOrDefault(x => x.RessourceId == ressource.RessourceId);
            if (bareme != null && listOfBarems?.ListBaremesOrganisationSociete?.Count > 0)
            {
                return bareme.Prix.ToString() + "/" + bareme.Unite.Libelle;
            }

            return string.Empty;
        }

        private string GetPrixPuoInfo(BaremeOfAllTreeOrganisation listOfBarems, RessourceEnt ressource)
        {
            BaremeExploitationOrganisationEnt bareme = listOfBarems?.ListBaremesOrganisationPuo?.FirstOrDefault(x => x.RessourceId == ressource.RessourceId);
            if (bareme != null && listOfBarems.ListBaremesOrganisationPuo.Count > 0)
            {
                return bareme.Prix.ToString() + "/" + bareme.Unite.Libelle;
            }
            return string.Empty;
        }

        private string GetPrixUoInfo(BaremeOfAllTreeOrganisation listOfBarems, RessourceEnt ressource)
        {
            BaremeExploitationOrganisationEnt bareme = listOfBarems?.ListBaremesOrganisationUo?.FirstOrDefault(x => x.RessourceId == ressource.RessourceId);
            if (bareme != null && listOfBarems.ListBaremesOrganisationUo.Count > 0)
            {
                return bareme.Prix.ToString() + "/" + bareme.Unite.Libelle;
            }
            return string.Empty;
        }
    }
}

