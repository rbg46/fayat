using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using Fred.Business.BaremeExploitation.ExportBaremeModel;
using Fred.Business.CI;
using Fred.Business.Images;
using Fred.Business.Utilisateur;
using Fred.Entities.Bareme;
using Fred.Entities.Bareme.Models;
using Fred.Entities.Organisation;
using Fred.Framework.Exceptions;
using Fred.Framework.Reporting;
using Fred.Web.Models.ReferentielFixe;
using Fred.Web.Shared.Models.Bareme;
using Syncfusion.XlsIO;

namespace Fred.Business.BaremeExploitation.Edition
{
    /// <summary>
    /// Class To Create Excel Bareme Ci
    /// </summary>
    public class BaremeCiExcelHandler : IBaremeCiExcelHandler
    {
        private const int StartLigneNumber = 7;
        private const string searchTag = "#Logo";

        private readonly string excelTemplate = "Export_bareme_CI.xlsx";
        private readonly IBaremeExploitationCIManager baremeExploitationCiMgr;
        private readonly IMapper mapper;
        private readonly IUtilisateurManager utilisateurManager;
        private readonly IBaremeExportHelper baremeExportHelper;
        private readonly ICIManager ciManager;
        private readonly IImageManager imageManager;

        protected BaremeTemplateModel baremeTemplateModel = new BaremeTemplateModel();

        public BaremeCiExcelHandler(IBaremeExploitationCIManager baremeExploitationCiMgr,
            IMapper mapper,
            IUtilisateurManager utilisateurManager,
            IBaremeExportHelper baremeExportHelper,
            ICIManager ciManager,
            IImageManager imageManager)
        {
            this.baremeExploitationCiMgr = baremeExploitationCiMgr;
            this.mapper = mapper;
            this.utilisateurManager = utilisateurManager;
            this.baremeExportHelper = baremeExportHelper;
            this.ciManager = ciManager;
            this.imageManager = imageManager;
        }

        /// <summary>
        /// Prepar Data And Get File In Byte Format
        /// </summary>
        /// <param name="modelCiExcel">Model send from the front</param>
        /// <returns>MemoryStream Format</returns>
        public MemoryStream CreateBaremeCIExcelModelAsync(ExportBaremeCiExcelModel modelCiExcel)
        {
            try
            {
                List<ChapitreModel> listchapitres = mapper.Map<List<ChapitreModel>>(baremeExploitationCiMgr.GetReferentielEtendu(modelCiExcel.SelectedSocieteId));
                List<BaremeExploitationCIModel> listBaremeExploitationCi = mapper.Map<List<BaremeExploitationCIModel>>(baremeExploitationCiMgr.GetBaremeByCIIdAndPeriode(modelCiExcel.Period, modelCiExcel.SelectedCiId));
                baremeTemplateModel.CodeLibelleCi = ciManager.GetCiById(modelCiExcel.SelectedCiId, false)?.CodeLibelle;
                List<OrganisationEnt> parentsOrganisation = baremeExportHelper.GetPrentOfOrganisation(modelCiExcel.SelectedCiId);
                List<BaremeExploitationOrganisationEnt> listBaremesOrganisationsParent = baremeExportHelper.GetFirstNotNullBaremeOfOrganisationParent(modelCiExcel.Period, parentsOrganisation);
                
                return CreateBaremeCIExcel(listchapitres, listBaremeExploitationCi, listBaremesOrganisationsParent, modelCiExcel);
            }
            catch (Exception ex)
            {
                throw new FredTechnicalException(ex.Message, ex);
            }
        }

        /// <summary>
        /// Method To Creat Bareme Ci Export File
        /// </summary>
        /// <param name="listchapitres">List Of Chapter</param>
        /// <param name="listBaremeExploitationCi">List Bareme For Ci</param>
        /// <param name="listBaremesOrganisationsParent">List Of Parent Organisation</param>
        /// <param name="modelCiExport">Model Send From Front</param>
        /// <returns>MemoryStream Format</returns>
        private MemoryStream CreateBaremeCIExcel(List<ChapitreModel> listchapitres, List<BaremeExploitationCIModel> listBaremeExploitationCi, List<BaremeExploitationOrganisationEnt> listBaremesOrganisationsParent, ExportBaremeCiExcelModel modelCiExport)
        {
            try
            {
                using (var excelEngine = new ExcelFormat())
                {
                    string pathName = AppDomain.CurrentDomain.BaseDirectory + @"Templates\Bareme\" + excelTemplate;
                    IWorkbook workbook = excelEngine.OpenTemplateWorksheet(pathName);
                    IWorksheet worksheetCi = workbook.Worksheets[0];
                    baremeExportHelper.SetupHeaderAndFooter(worksheetCi);

                    string partielPath = imageManager.GetLogoImage(modelCiExport.SelectedSocieteId).Path;
                    string pathCGA = !string.IsNullOrWhiteSpace(partielPath) ? AppDomain.CurrentDomain.BaseDirectory + partielPath : string.Empty;
                    excelEngine.FindLogoAndAddPictureForExcel(pathCGA, searchTag, worksheetCi);

                    //Create Template Marker Processor
                    ITemplateMarkersProcessor marker = workbook.CreateTemplateMarkersProcessor();
                    var user = utilisateurManager.GetContextUtilisateur();
                    string nameOfMonth = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(modelCiExport.Period.Month);
                    baremeTemplateModel.Periode = baremeExportHelper.FirstLetterInUpperCase(nameOfMonth) + " " + modelCiExport.Period.Year.ToString();
                    baremeTemplateModel.EditionDate = DateTime.Now.ToString("dd/MM/yyyy HH:mm");
                    baremeTemplateModel.UserName = user.Prenom + " " + user.Nom;

                    marker.AddVariable("baremeTemplate", baremeTemplateModel);

                    int numLigne = StartLigneNumber;
                    foreach (var chapitre in listchapitres)
                    {
                        numLigne++;
                        FillWorkSheetChapitre(worksheetCi, chapitre.CodeLibelle, numLigne);
                        foreach (var sousChapitre in chapitre.SousChapitres)
                        {
                            numLigne++;
                            FillWorkSheetSousChapitre(worksheetCi, sousChapitre.CodeLibelle, numLigne);
                            foreach (var ressource in sousChapitre.Ressources)
                            {
                                numLigne++;
                                FillWorkSheetRessource(worksheetCi, ressource, listBaremeExploitationCi, listBaremesOrganisationsParent, numLigne);
                            }
                        }
                    }
                    marker.ApplyMarkers();
                    return baremeExportHelper.GeneratePdfOrExcel(modelCiExport.IsPdf, excelEngine, workbook);
                }
            }
            catch (Exception ex)
            {
                throw new FredTechnicalException(ex.Message, ex);
            }
        }

        private void FillWorkSheetChapitre(IWorksheet worksheetCi, string sousChapitreCodeLibelle, int nbrLigne)
        {
            baremeExportHelper.ApplyTextAndMerge(worksheetCi, sousChapitreCodeLibelle, nbrLigne, 1, 10);
            worksheetCi.Range[nbrLigne, 1, nbrLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 230, 230, 230);
            worksheetCi.Range[nbrLigne, 16, nbrLigne, 19].CellStyle.Color = System.Drawing.Color.FromArgb(0, 254, 219, 164);
            worksheetCi.Range[nbrLigne, 21, nbrLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 207, 232, 237);
        }

        private void FillWorkSheetSousChapitre(IWorksheet worksheetCi, string chapitreCodeLibelle, int nbrLigne)
        {
            baremeExportHelper.ApplyTextAndMerge(worksheetCi, chapitreCodeLibelle, nbrLigne, 2, 10);
            worksheetCi.Range[nbrLigne, 1, nbrLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 242, 242, 242);
            worksheetCi.Range[nbrLigne, 16, nbrLigne, 19].CellStyle.Color = System.Drawing.Color.FromArgb(0, 254, 219, 164);
            worksheetCi.Range[nbrLigne, 21, nbrLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 207, 232, 237);
        }

        private void FillWorkSheetRessource(IWorksheet worksheetCi, RessourceModel ressource, List<BaremeExploitationCIModel> listBaremeExploitationCi, List<BaremeExploitationOrganisationEnt> listBaremesOrganisationsParent, int nbrLigne)
        {
            baremeExportHelper.ApplyTextAndMerge(worksheetCi, ressource.CodeLibelle, nbrLigne, 3, 10);
            baremeExportHelper.ApplyTextAndCenterAlignMerge(worksheetCi, GetPrixOrgaInfo(listBaremesOrganisationsParent, ressource), nbrLigne, 16, 19);
            baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetCi, GetPrixInfo(listBaremeExploitationCi, ressource), nbrLigne, 21, 22);
            baremeExportHelper.ApplyTextAndCenterAlignMerge(worksheetCi, GetUniteInfo(listBaremeExploitationCi, ressource), nbrLigne, 23, 24);
            baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetCi, GetChauffeurPrixInfo(listBaremeExploitationCi, ressource), nbrLigne, 25, 26);
            baremeExportHelper.ApplyValueAndCenterAlignMerge(worksheetCi, GetConduitePrixInfo(listBaremeExploitationCi, ressource), nbrLigne, 27, 28);
            worksheetCi.Range[nbrLigne, 1, nbrLigne, 28].CellStyle.Color = System.Drawing.Color.White;
            worksheetCi.Range[nbrLigne, 16, nbrLigne, 19].CellStyle.Color = System.Drawing.Color.FromArgb(0, 254, 219, 164);
            worksheetCi.Range[nbrLigne, 21, nbrLigne, 28].CellStyle.Color = System.Drawing.Color.FromArgb(0, 207, 232, 237);
        }

        private string GetPrixInfo(List<BaremeExploitationCIModel> listBaremeExploitationCi, RessourceModel ressource)
        {
            var bareme = listBaremeExploitationCi.FirstOrDefault(x => x.ReferentielEtenduId == ressource.ReferentielEtendus?.First().ReferentielEtenduId);
            if (bareme != null)
            {
                return bareme.Prix.ToString();
            }
            return string.Empty;
        }

        private string GetUniteInfo(List<BaremeExploitationCIModel> listBaremeExploitationCi, RessourceModel ressource)
        {
            var bareme = listBaremeExploitationCi.FirstOrDefault(x => x.ReferentielEtenduId == ressource.ReferentielEtendus?.First().ReferentielEtenduId);
            if (bareme != null)
            {
                return bareme.Unite?.Libelle.ToString();
            }
            return string.Empty;
        }

        private string GetChauffeurPrixInfo(List<BaremeExploitationCIModel> listBaremeExploitationCi, RessourceModel ressource)
        {
            var bareme = listBaremeExploitationCi.FirstOrDefault(x => x.ReferentielEtenduId == ressource.ReferentielEtendus?.First().ReferentielEtenduId);
            if (bareme != null)
            {
                return bareme.PrixChauffeur.ToString();
            }
            return string.Empty;
        }

        private string GetConduitePrixInfo(List<BaremeExploitationCIModel> listBaremeExploitationCi, RessourceModel ressource)
        {
            var bareme = listBaremeExploitationCi.FirstOrDefault(x => x.ReferentielEtenduId == ressource.ReferentielEtendus?.First().ReferentielEtenduId);
            if (bareme != null)
            {
                return bareme.PrixConduite.ToString();
            }
            return string.Empty;
        }

        private string GetPrixOrgaInfo(List<BaremeExploitationOrganisationEnt> listBaremeExploitationParent, RessourceModel ressource)
        {
            var bareme = listBaremeExploitationParent.FirstOrDefault(x => x.RessourceId == ressource.RessourceId);
            if (bareme != null)
            {
                return bareme.Prix.ToString() + "/" + bareme.Unite?.Libelle;
            }
            return string.Empty;
        }
    }
}
