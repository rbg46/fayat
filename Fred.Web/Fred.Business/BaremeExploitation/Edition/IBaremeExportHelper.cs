using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Fred.Entities.Bareme;
using Fred.Entities.Organisation;
using Fred.Framework.Reporting;
using Syncfusion.XlsIO;

namespace Fred.Business.BaremeExploitation.Edition
{
    /// <summary>
    /// Interface Helper for creating Excel File Bareme Oganisation and CI 
    /// </summary>
    public interface IBaremeExportHelper
    {
        /// <summary>
        /// Get Bareme Organisation For Societe 
        /// </summary>
        /// <param name="periode">Period For Generating Bareme</param>
        /// <param name="orgas">List Of Organisation Parent</param>
        /// <returns>List Of Bareme Organisation</returns>
        List<BaremeExploitationOrganisationEnt> GetBaremesOrganisationSociete(DateTime periode, List<OrganisationEnt> orgas);

        /// <summary>
        /// GEt Bareme Organisation For PUO 
        /// </summary>
        /// <param name="periode">Period For Generating Bareme</param>
        /// <param name="orgas">List Of Organisation Parent</param>
        /// <returns>List Of Bareme Organisation</returns>
        List<BaremeExploitationOrganisationEnt> GetBaremesOrganisationPuo(DateTime periode, List<OrganisationEnt> orgas);

        /// <summary>
        /// GEt Bareme Organisation For UO 
        /// </summary>
        /// <param name="periode">Period For Generating Bareme</param>
        /// <param name="orgas">List Of Organisation Parent</param>
        /// <returns>List Of Bareme Organisation</returns>
        List<BaremeExploitationOrganisationEnt> GetBaremesOrganisationUo(DateTime periode, List<OrganisationEnt> orgas);

        /// <summary>
        /// GEt Bareme Organisation For Etablissement 
        /// </summary>
        /// <param name="periode">Period For Generating Bareme</param>
        /// <param name="orgas">List Of Organisation Parent</param>
        /// <returns>List Of Bareme Organisation</returns>
        List<BaremeExploitationOrganisationEnt> GetBaremesOrganisationEtablissemnt(DateTime periode, List<OrganisationEnt> orgas);

        /// <summary>
        /// Get Parent OF Organisation
        /// </summary>
        /// <param name="idorga">Id Organisation</param>
        /// <returns>List Of Bareme Organisation</returns>
        List<OrganisationEnt> GetPrentOfOrganisation(int idorga);

        /// <summary>
        /// Get First Bareme Of Organisation Parent Not Null 
        /// </summary>
        /// <param name="periode">Period Generating Bareme</param>
        /// <param name="orgas">List Of Organisation Parent</param>
        /// <returns>List Of Bareme Organisation</returns>
        List<BaremeExploitationOrganisationEnt> GetFirstNotNullBaremeOfOrganisationParent(DateTime periode, List<OrganisationEnt> orgas);

        /// <summary>
        /// Transforme MemoryStream To Pdf or  Excel
        /// </summary>
        /// <param name="pdf">True is is PDF</param>
        /// <param name="stream">Object MemoryStream à transformer</param>
        /// <returns>String IDCache</returns>
        string TransformMemoryStreamToPdfOrExcel(bool pdf, MemoryStream stream);

        /// <summary>
        /// Generate PDF or Excel based on MemoryStream
        /// </summary>
        /// <param name="pdf">True if PDF</param>
        /// <param name="excelFormat">Formate Excel</param>
        /// <param name="workbook">Object Excel Workbook</param>
        /// <returns>MemoryStream</returns>
        MemoryStream GeneratePdfOrExcel(bool pdf, ExcelFormat excelFormat, IWorkbook workbook);

        /// <summary>
        /// Insert A Text To a range Of Cells And Apply Merge
        /// </summary>
        /// <param name="worksheet">WorkSheet</param>
        /// <param name="text">Text To Insert</param>
        /// <param name="numLigne">Identification number of Ligne</param>
        /// <param name="numStartColumn">Identification number of Start Column</param>
        /// <param name="numEndColumn">Identification number Of End Column</param>
        void ApplyTextAndMerge(IWorksheet worksheet, string text, int numLigne, int numStartColumn, int numEndColumn);

        /// <summary>
        /// Insert A Number To a range Of Cells And Apply and Merge
        /// </summary>
        /// <param name="worksheet">WorkSheet</param>
        /// <param name="text">Text To Insert</param>
        /// <param name="numLigne">Identification number of the ligne</param>
        /// <param name="numStartColumn">Identification number of the start column</param>
        /// <param name="numEndColumn">Identification number of the end column</param>
        void ApplyValueAndMerge(IWorksheet worksheet, string text, int numLigne, int numStartColumn, int numEndColumn);

        /// <summary>
        /// Insert A text To a range Of Cells And Apply Align centre and Merge
        /// </summary>
        /// <param name="worksheet">WorkSheet</param>
        /// <param name="text">Text To Insert</param>
        /// <param name="numLigne">Identification number of the ligne</param>
        /// <param name="numStartColumn">Identification number of the start column</param>
        /// <param name="numEndColumn">Identification number of the end column</param>
        void ApplyTextAndCenterAlignMerge(IWorksheet worksheet, string text, int numLigne, int numStartColumn, int numEndColumn);

        /// <summary>
        /// Insert A Number To a range Of Cells And Apply Align centre and Merge
        /// </summary>
        /// <param name="worksheet">WorkSheet</param>
        /// <param name="text">Text To Insert</param>
        /// <param name="numLigne">Identification number of the ligne</param>
        /// <param name="numStartColumn">Identification number of the start column</param>
        /// <param name="numEndColumn">Identification number of the end column</param>
        void ApplyValueAndCenterAlignMerge(IWorksheet worksheet, string text, int numLigne, int numStartColumn, int numEndColumn);

        /// <summary>
        /// Help To make The first letter in Upper Case
        /// </summary>
        /// <param name="str">string</param>
        /// <returns>String With the first letter in capital</returns>
        string FirstLetterInUpperCase(string str);

        /// <summary>
        /// Setup Header And Footer For a Worksheet
        /// </summary>
        /// <param name="worksheet">workSheet</param>
        void SetupHeaderAndFooter(IWorksheet worksheet);
    }
}
