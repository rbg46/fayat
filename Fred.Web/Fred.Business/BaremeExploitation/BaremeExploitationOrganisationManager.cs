using System;
using System.Collections.Generic;
using System.Linq;
using Fred.Business.CI;
using Fred.Business.Organisation;
using Fred.Business.Organisation.Tree;
using Fred.Business.Referential;
using Fred.Business.ReferentielEtendu;
using Fred.Business.ReferentielFixe;
using Fred.Business.Valorisation;
using Fred.DataAccess.Interfaces;
using Fred.Entities;
using Fred.Entities.Bareme;
using Fred.Entities.CI;
using Fred.Entities.Organisation;
using Fred.Entities.Organisation.Tree;
using Fred.Entities.ReferentielEtendu;
using Fred.Entities.ReferentielFixe;
using Fred.Framework.Exceptions;
using Fred.Framework.Extensions;
using Fred.Web.Shared.App_LocalResources;
using Fred.Web.Shared.Models.Bareme;

namespace Fred.Business.BaremeExploitation
{
    public class BaremeExploitationOrganisationManager : Manager<BaremeExploitationOrganisationEnt, IBaremeExploitationOrganisationRepository>, IBaremeExploitationOrganisationManager
    {
        private int? lazyDeviseIdParDefaut;
        private readonly IOrganisationTreeService organisationTreeService;
        private readonly IReferentielFixeManager referentielFixeManager;
        private readonly IReferentielEtenduManager referentielEtenduManager;
        private readonly IOrganisationManager organisationManager;
        private readonly ICIManager ciManager;
        private readonly IBaremeExploitationCIManager baremeExploitationCiManager;
        private readonly IDeviseManager deviseManager;
        private readonly IValorisationManager valorisationManager;
        private readonly IBaremeValorisationManager baremeValorisationManager;

        public BaremeExploitationOrganisationManager(
            IUnitOfWork uow,
            IBaremeExploitationOrganisationRepository baremeExploitationOrganisationRepository,
            IOrganisationTreeService organisationTreeService,
            IReferentielFixeManager referentielFixeManager,
            IReferentielEtenduManager referentielEtenduManager,
            IOrganisationManager organisationManager,
            ICIManager ciManager,
            IBaremeExploitationCIManager baremeExploitationCiManager,
            IDeviseManager deviseManager,
            IValorisationManager valorisationManager,
            IBaremeValorisationManager baremeValorisationManager)
            : base(uow, baremeExploitationOrganisationRepository)
        {
            this.organisationTreeService = organisationTreeService;
            this.referentielFixeManager = referentielFixeManager;
            this.referentielEtenduManager = referentielEtenduManager;
            this.organisationManager = organisationManager;
            this.ciManager = ciManager;
            this.baremeExploitationCiManager = baremeExploitationCiManager;
            this.deviseManager = deviseManager;
            this.valorisationManager = valorisationManager;
            this.baremeValorisationManager = baremeValorisationManager;
        }

        private int DeviseIdParDefaut
        {
            get
            {
                if (!lazyDeviseIdParDefaut.HasValue)
                {
                    lazyDeviseIdParDefaut = deviseManager.GetDevise(Constantes.CodeDevise.Euro).DeviseId;
                }
                return lazyDeviseIdParDefaut.Value;
            }
        }

        public List<ChapitreEnt> GetReferentielFixe(int groupeId)
        {
            IEnumerable<ChapitreEnt> chapitres = referentielFixeManager.GetChapitreListByGroupeId(groupeId);
            return BaremeExploitationManagerHelper.GetReferentielMaterielEtMO(chapitres);
        }

        public List<BaremeExploitationOrganisationEnt> GetBaremesByOrganisationIdAndPeriode(DateTime periode, int organisationId, bool withParents = false)
        {
            return Repository.GetBaremeByOrganisationIdAndPeriode(periode, organisationId, withParents);
        }

        private IReadOnlyList<BaremeExploitationOrganisationEnt> GetBaremeByOrganisationIdAndPeriode(DateTime periode, IEnumerable<int> organisationIds)
        {
            return Repository.GetBaremeByOrganisationIdAndPeriode(periode, organisationIds);
        }

        public bool ParentIsEmpty(DateTime periode, int organisationId)
        {
            return Repository.ParentIsEmpty(periode, organisationId);
        }

        public BaremeExploitationSaveResultModel Save(BaremeExploitationOrganisationToUpdateModel bareme, int userId)
        {
            BaremeExploitationSaveResultModel ret = new BaremeExploitationSaveResultModel();
            DateTime utcNow = DateTime.UtcNow;
            DateTime periodeCourante = utcNow.GetPeriode();

            if (!bareme.Periode.IsSamePeriode(periodeCourante))
            {
                ret.MessageErreur = FeatureBareme.BaremeExploitationOrga_EnregistrementImpossible_PeriodeCouranteObligatoire;

                return ret;
            }

            DateTime? periodeDebutBaremeCourant = Repository.GetPeriodeDebutBaremeCourant(bareme.OrganisationId);

            if (!periodeDebutBaremeCourant.HasValue || periodeDebutBaremeCourant.Value.IsSamePeriode(periodeCourante))
            {
                Update(periodeCourante, bareme, userId, utcNow);
            }
            else
            {
                ret.BaremePeriodePrecedenteCloture = true;
                CloneAndCloture(periodeCourante, periodeDebutBaremeCourant.Value, bareme.OrganisationId, userId, utcNow);
                Save();
                Update(periodeCourante, bareme, userId, utcNow);
            }

            if (bareme.RessourcesToUpdate.Count > 0)
            {
                Save();
            }

            OrganisationEnt orga = organisationManager.GetOrganisationById(bareme.OrganisationId);

            if (orga.Societe != null || orga.Etablissement != null)
            {
                var ressourcesIds = bareme.RessourcesToUpdate.Select(x => x.RessourceId).ToList();
                valorisationManager.UpdateValorisationFromListBaremeStorm(bareme.OrganisationId, periodeCourante.GetPeriode(), ressourcesIds);
            }

            return ret;
        }

        public void SynchroBaremeOrgaFromParent(DateTime period, int orgaId, int userId)
        {
            try
            {
                OrganisationTree organisationTree = organisationTreeService.GetOrganisationTree();

                OrganisationBase orgaParent = organisationTree.GetFirstParent(orgaId);

                if (orgaParent != null)
                {
                    DateTime utcNow = DateTime.UtcNow;


                    var ressourcesIds = GetRessourceIdsWillChangeAfterSynchronise(period.GetPeriode(), orgaParent.OrganisationId, orgaId);

                    SynchronizeWithParent(period.GetPeriode(), orgaParent.OrganisationId, orgaId, userId, utcNow);

                    Save();

                    OrganisationEnt orga = organisationManager.GetOrganisationById(orgaId);

                    if (orga.Societe != null || orga.Etablissement != null)
                    {

                        valorisationManager.UpdateValorisationFromListBaremeStorm(orgaId, period.GetPeriode(), ressourcesIds);
                    }
                }

            }
            catch (FredBusinessException e)
            {
                throw new FredBusinessException(e.Message, e);
            }
            catch (Exception e)
            {
                throw new FredBusinessException(e.Message, e);
            }
        }

        public List<BaremeExploitationOrganisationEnt> GetHistorique(int organisationId, int ressourceId)
        {
            return Repository.GetHistorique(organisationId, ressourceId);
        }

        public List<BaremeExploitationOrganisationEnt> GetBaremeOrganisationParent(DateTime periode, int ciId, out OrganisationEnt organisation)
        {
            organisation = null;
            List<BaremeExploitationOrganisationEnt> baremesOrganisationEnt = new List<BaremeExploitationOrganisationEnt>();

            CIEnt ci = ciManager.GetCIById(ciId);

            if (ci == null || ci.Organisation == null)
            {
                return baremesOrganisationEnt;
            }
            
            baremesOrganisationEnt = GetBaremeByOrganisationIdAndPeriode(periode, ci.Parents.Select(o => o.OrganisationId)).ToList();

            foreach (OrganisationEnt orga in ci.Parents)
            {
                if (orga.TypeOrganisation == null || orga.TypeOrganisation.Code == TypeOrganisationEnt.CodeCi)
                {
                    continue;
                }
                else if (orga.TypeOrganisation.Code == TypeOrganisationEnt.CodeHolding || orga.TypeOrganisation.Code == TypeOrganisationEnt.CodePole)
                {
                    break;
                }
                if (baremesOrganisationEnt != null && baremesOrganisationEnt.Count > 0)
                {
                    organisation = orga;
                    break;
                }
            }
            int orgaId = organisation == null ? ci.Organisation.OrganisationId : organisation.OrganisationId;
            return baremesOrganisationEnt.Where(b => b.OrganisationId == orgaId).ToList();
        }

        private void Update(DateTime periode, BaremeExploitationOrganisationToUpdateModel bareme, int userId, DateTime utcNow)
        {
            foreach (BaremeExploitationOrganisationRessourceToUpdateModel ressourceBaremeToUpdate in bareme.RessourcesToUpdate)
            {
                BaremeExploitationOrganisationEnt baremeExploitationOrganisationEnt = Repository.Get(bareme.OrganisationId, periode, ressourceBaremeToUpdate.RessourceId);

                if (baremeExploitationOrganisationEnt != null)
                {
                    if (ressourceBaremeToUpdate.Prix == null && ressourceBaremeToUpdate.UniteId == 0 && ressourceBaremeToUpdate.PrixChauffeur == null && ressourceBaremeToUpdate.PrixConduite == null)
                    {
                        Repository.Delete(baremeExploitationOrganisationEnt);
                        DeleteBaremeCiMaterielStormFromBaremeorga(baremeExploitationOrganisationEnt, periode);
                    }
                    else
                    {
                        baremeExploitationOrganisationEnt.DateModification = utcNow;
                        baremeExploitationOrganisationEnt.AuteurModificationId = userId;
                        baremeExploitationOrganisationEnt.UniteId = ressourceBaremeToUpdate.UniteId;
                        baremeExploitationOrganisationEnt.Prix = ressourceBaremeToUpdate.Prix;
                        baremeExploitationOrganisationEnt.PrixChauffeur = ressourceBaremeToUpdate.PrixChauffeur;
                        baremeExploitationOrganisationEnt.PrixConduite = ressourceBaremeToUpdate.PrixConduite;
                        Repository.Update(baremeExploitationOrganisationEnt);
                    }
                }
                else
                {
                    baremeExploitationOrganisationEnt = new BaremeExploitationOrganisationEnt()
                    {
                        OrganisationId = bareme.OrganisationId,
                        RessourceId = ressourceBaremeToUpdate.RessourceId,
                        PeriodeDebut = periode,
                        UniteId = ressourceBaremeToUpdate.UniteId,
                        Prix = ressourceBaremeToUpdate.Prix,
                        PrixChauffeur = ressourceBaremeToUpdate.PrixChauffeur,
                        PrixConduite = ressourceBaremeToUpdate.PrixConduite,
                        DateCreation = utcNow,
                        AuteurCreationId = userId,
                        DeviseId = DeviseIdParDefaut,

                        Statut = 1,
                    };
                    Repository.Insert(baremeExploitationOrganisationEnt);
                }
            }
        }

        private void DeleteBaremeCiMaterielStormFromBaremeorga(BaremeExploitationOrganisationEnt baremeOrga, DateTime periode)
        {
            int? refEtenduId = GetReferentielEtenduId(baremeOrga);

            if (refEtenduId.HasValue)
            {
                foreach (CIEnt ci in ciManager.GetCIList(baremeOrga.OrganisationId))
                {
                    BaremeExploitationCIEnt baremeCI = baremeExploitationCiManager.Get(ci.CiId, periode, refEtenduId.Value);

                    if (baremeCI != null)
                    {
                        baremeExploitationCiManager.Delete(baremeCI);
                    }
                }
            }
        }

        private int? GetReferentielEtenduId(BaremeExploitationOrganisationEnt baremeOrga)
        {
            int? societeId = null;
            OrganisationEnt orga = organisationManager.GetOrganisationById(baremeOrga.OrganisationId);
            RessourceEnt ressource = referentielFixeManager.GetRessourceById(baremeOrga.RessourceId);

            if (orga.Societe != null)
            {
                societeId = orga.Societe.SocieteId;
            }
            else if (orga.Etablissement != null)
            {
                societeId = orga.Etablissement.SocieteId.Value;
            }

            if (societeId.HasValue)
            {
                ReferentielEtenduEnt referentielEtendu = referentielEtenduManager.GetByRessourceIdAndSocieteId(ressource.RessourceId, societeId.Value);

                if (referentielEtendu != null)
                {
                    return referentielEtendu.ReferentielEtenduId;
                }
            }

            return null;
        }

        private void CloneAndClotureBaremeOfOrganisationIfNecessary(int organisationId, int userId)
        {
            DateTime periodeCourante = DateTime.UtcNow.GetPeriode();

            DateTime? periodeDebutBaremeCourant = Repository.GetPeriodeDebutBaremeCourant(organisationId);
            // Je cloture si j'ai deja des baremes et si la periode du bareme est different de la periode courrante.
            if (periodeDebutBaremeCourant.HasValue && !periodeDebutBaremeCourant.Value.IsSamePeriode(periodeCourante))
            {
                var hasChange = CloneAndCloture(periodeCourante, periodeDebutBaremeCourant.Value, organisationId, userId, DateTime.UtcNow);
                if (hasChange)
                {
                    Save();
                }
            }
        }

        private bool CloneAndCloture(DateTime periodeCourante, DateTime periodeDebutBaremeCourant, int organisationId, int userId, DateTime utcNow)
        {
            var hasCreationOrUpdate = false;
            var baremePeriodePrecedentes = Repository.GetBaremeByOrganisationIdAndPeriode(periodeDebutBaremeCourant, organisationId);
            var newsBaremes = new List<BaremeExploitationOrganisationEnt>();

            foreach (BaremeExploitationOrganisationEnt baremePeriodePrecedente in baremePeriodePrecedentes)
            {
                // Clôt le barème courant sur la période précédente
                var newBareme = Clone(periodeCourante, userId, utcNow, baremePeriodePrecedente);
                newsBaremes.Add(newBareme);
            }

            if (baremePeriodePrecedentes.Any())
            {
                Repository.UpdateRange(baremePeriodePrecedentes);
            }
            if (newsBaremes.Any())
            {
                Repository.InsertRange(newsBaremes);
            }
            if (baremePeriodePrecedentes.Any() || newsBaremes.Any())
            {
                hasCreationOrUpdate = true;
            }
            return hasCreationOrUpdate;

        }

        private BaremeExploitationOrganisationEnt Clone(DateTime periodeCourante, int userId, DateTime utcNow, BaremeExploitationOrganisationEnt baremePeriodePrecedente)
        {

            baremePeriodePrecedente.PeriodeFin = periodeCourante;
            baremePeriodePrecedente.AuteurModificationId = userId;
            baremePeriodePrecedente.DateModification = DateTime.UtcNow;

            // Clone le bareme de la période précédente sur la période courante
            BaremeExploitationOrganisationEnt baremePeriodeCourante = new BaremeExploitationOrganisationEnt()
            {
                OrganisationId = baremePeriodePrecedente.OrganisationId,
                RessourceId = baremePeriodePrecedente.RessourceId,
                UniteId = baremePeriodePrecedente.UniteId,
                DeviseId = baremePeriodePrecedente.DeviseId,
                Statut = baremePeriodePrecedente.Statut,
                PeriodeDebut = periodeCourante,
                Prix = baremePeriodePrecedente.Prix,
                PrixChauffeur = baremePeriodePrecedente.PrixChauffeur,
                PrixConduite = baremePeriodePrecedente.PrixConduite,
                AuteurCreationId = userId,
                DateCreation = utcNow
            };

            return baremePeriodeCourante;
        }



        private List<int> GetRessourceIdsWillChangeAfterSynchronise(DateTime period, int orgaParentId, int orgaId)
        {
            List<BaremeExploitationOrganisationEnt> baremes = GetBaremesByOrganisationIdAndPeriode(period, orgaId);

            List<BaremeExploitationOrganisationEnt> baremesOfParent = GetBaremesByOrganisationIdAndPeriode(period, orgaParentId);

            var baremeParentsNotExistingInCurrent = GetBaremesWillCreateOrUpdateAfterSynchronise(orgaId, baremesOfParent, baremes);

            var result = baremeParentsNotExistingInCurrent.Select(x => x.RessourceId).ToList();

            return result;
        }

        private List<BaremeExploitationOrganisationEnt> GetBaremesWillCreateOrUpdateAfterSynchronise(int orgaId,
                                  List<BaremeExploitationOrganisationEnt> baremeParents,
                                  List<BaremeExploitationOrganisationEnt> baremes)
        {
            var baremesWillChange = new List<BaremeExploitationOrganisationEnt>();
            foreach (var baremeParent in baremeParents)
            {
                var bareme = GetBaremeIn(baremes, orgaId, baremeParent.RessourceId, baremeParent.DeviseId);
                if (bareme == null)
                {
                    baremesWillChange.Add(baremeParent);
                }
                else
                {
                    if (AreDifferent(bareme, baremeParent))
                    {
                        baremesWillChange.Add(baremeParent);
                    }
                }
            }
            return baremesWillChange;
        }

        private List<BaremeExploitationOrganisationEnt> SynchronizeWithParent(DateTime period, int orgaParentId, int orgaId, int userId, DateTime utcNow)
        {
            var result = new List<BaremeExploitationOrganisationEnt>();

            CloneAndClotureBaremeOfOrganisationIfNecessary(orgaId, userId);

            List<BaremeExploitationOrganisationEnt> baremes = GetBaremesByOrganisationIdAndPeriode(period, orgaId);

            List<BaremeExploitationOrganisationEnt> baremesOfParent = GetBaremesByOrganisationIdAndPeriode(period, orgaParentId);

            var baremeParentsNotExistingInCurrent = GetBaremeParentsNotExistingInCurrent(orgaId, baremesOfParent, baremes);

            var createBaremes = CreateBaremeWithParent(period, orgaId, userId, baremeParentsNotExistingInCurrent);

            var baremeParentsExistingInParentAndCurrent = GetBaremeParentsExistingInParentAndCurrent(orgaId, baremesOfParent, baremes);

            var updatedBaremes = UpdateBaremesWithParent(orgaId, userId, baremeParentsExistingInParentAndCurrent, baremes, period);

            if (createBaremes.Any() || updatedBaremes.Any())
            {
                Save();
            }



            return result;
        }

        private List<BaremeExploitationOrganisationEnt> GetBaremeParentsNotExistingInCurrent(int orgaId,
                                                                                            List<BaremeExploitationOrganisationEnt> baremeParents,
                                                                                            List<BaremeExploitationOrganisationEnt> baremes)
        {
            return GetBaremes(orgaId, baremeParents, baremes, bareme => bareme == null);
        }

        private List<BaremeExploitationOrganisationEnt> GetBaremeParentsExistingInParentAndCurrent(int orgaId,
                                                                                                    List<BaremeExploitationOrganisationEnt> baremeParents,
                                                                                                    List<BaremeExploitationOrganisationEnt> baremes)
        {
            return GetBaremes(orgaId, baremeParents, baremes, bareme => bareme != null);
        }

        private List<BaremeExploitationOrganisationEnt> GetBaremes(int orgaId,
                                                                    List<BaremeExploitationOrganisationEnt> baremeParents,
                                                                    List<BaremeExploitationOrganisationEnt> baremes,
                                                                    Func<BaremeExploitationOrganisationEnt, bool> predicate)
        {
            var result = new List<BaremeExploitationOrganisationEnt>();
            foreach (var baremeParent in baremeParents)
            {
                var bareme = GetBaremeIn(baremes, orgaId, baremeParent.RessourceId, baremeParent.DeviseId);
                if (predicate(bareme))
                {
                    result.Add(baremeParent);
                }
            }
            return result;
        }

        private List<BaremeExploitationOrganisationEnt> UpdateBaremesWithParent(int orgaId,
                                    int userId,
                                    List<BaremeExploitationOrganisationEnt> baremeParentsExistingInParentAndCurrent,
                                    List<BaremeExploitationOrganisationEnt> baremes,
                                    DateTime periodeDebut)
        {
            var result = new List<BaremeExploitationOrganisationEnt>();

            foreach (BaremeExploitationOrganisationEnt baremeParent in baremeParentsExistingInParentAndCurrent)
            {
                BaremeExploitationOrganisationEnt bareme = GetBaremeIn(baremes, orgaId, periodeDebut, baremeParent.RessourceId, baremeParent.DeviseId);

                if (bareme != null)
                {
                    if (AreDifferent(bareme, baremeParent))
                    {
                        bareme.UniteId = baremeParent.UniteId;
                        bareme.DeviseId = baremeParent.DeviseId;
                        bareme.Statut = baremeParent.Statut;
                        bareme.Prix = baremeParent.Prix;
                        bareme.PrixChauffeur = baremeParent.PrixChauffeur;
                        bareme.PrixConduite = baremeParent.PrixConduite;
                        bareme.AuteurModificationId = userId;
                        bareme.DateModification = DateTime.UtcNow;
                        result.Add(bareme);
                        Repository.Update(bareme);
                    }
                }
            }
            return result;
        }

        private List<BaremeExploitationOrganisationEnt> CreateBaremeWithParent(DateTime period, int orgaId, int userId, List<BaremeExploitationOrganisationEnt> baremesParents)
        {
            var result = new List<BaremeExploitationOrganisationEnt>();
            foreach (BaremeExploitationOrganisationEnt baremeParent in baremesParents)
            {
                BaremeExploitationOrganisationEnt scale = new BaremeExploitationOrganisationEnt()
                {
                    OrganisationId = orgaId,
                    RessourceId = baremeParent.RessourceId,
                    UniteId = baremeParent.UniteId,
                    DeviseId = baremeParent.DeviseId,
                    Statut = baremeParent.Statut,
                    PeriodeDebut = period,
                    Prix = baremeParent.Prix,
                    PrixChauffeur = baremeParent.PrixChauffeur,
                    PrixConduite = baremeParent.PrixConduite,
                    AuteurCreationId = userId,
                    DateCreation = DateTime.UtcNow
                };
                result.Add(scale);
                Repository.Insert(scale);

            }
            return result;
        }

        private BaremeExploitationOrganisationEnt GetBaremeIn(List<BaremeExploitationOrganisationEnt> baremes, int orgaId, DateTime periodeDebut, int ressourceId, int deviseId)
        {
            return baremes.FirstOrDefault(b => b.OrganisationId == orgaId && b.PeriodeDebut == periodeDebut && b.RessourceId == ressourceId && b.DeviseId == deviseId);
        }
        private BaremeExploitationOrganisationEnt GetBaremeIn(List<BaremeExploitationOrganisationEnt> baremes, int orgaId, int ressourceId, int deviseId)
        {
            return baremes.FirstOrDefault(b => b.OrganisationId == orgaId && b.RessourceId == ressourceId && b.DeviseId == deviseId);
        }

        private bool AreDifferent(BaremeExploitationOrganisationEnt baremeLeft, BaremeExploitationOrganisationEnt baremeRight)
        {
            if (baremeLeft.UniteId != baremeRight.UniteId) return true;
            if (baremeLeft.DeviseId != baremeRight.DeviseId) return true;
            if (baremeLeft.Statut != baremeRight.Statut) return true;
            if (baremeLeft.Prix != baremeRight.Prix) return true;
            if (baremeLeft.PrixChauffeur != baremeRight.PrixChauffeur) return true;
            if (baremeLeft.PrixConduite != baremeRight.PrixConduite) return true;
            return false;
        }
    }
}