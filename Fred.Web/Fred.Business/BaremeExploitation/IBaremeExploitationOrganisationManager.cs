using Fred.Entities.Bareme;
using Fred.Entities.Organisation;
using Fred.Entities.ReferentielFixe;
using Fred.Web.Shared.Models.Bareme;
using System;
using System.Collections.Generic;

namespace Fred.Business.BaremeExploitation
{
    /// <summary>
    /// Gestionnaire de barème exploitation organisation.
    /// </summary>
    public interface IBaremeExploitationOrganisationManager : IManager<BaremeExploitationOrganisationEnt>
    {
        /// <summary>
        /// Récupère le référentiel fixe d'un groupe.
        /// </summary>
        /// <param name="groupeId">L'identifiant du groupe</param>
        /// <returns>Le référentiel fixe du groupe.</returns>
        List<ChapitreEnt> GetReferentielFixe(int groupeId);

        /// <summary>
        /// Retourne la liste des barèmes en fonction d'une période et d'une organisation.
        /// </summary>
        /// <param name="periode">Periode</param>
        /// <param name="organisationId">Identifiant de l'organisation</param>
        /// <param name="withParents">Si vrai, charge également les barèmes des organisations parentes</param>
        /// <returns>Liste de barêmes exploitation organisation</returns>
        List<BaremeExploitationOrganisationEnt> GetBaremesByOrganisationIdAndPeriode(DateTime periode, int organisationId, bool withParents = false);

        /// <summary>
        /// Retourne Vrai si le parent ne contient aucun barème
        /// </summary>
        /// <param name="periode">Periode</param>
        /// <param name="organisationId">Identifiant de l'organisation</param>
        /// <returns>Vrai si le parent ne contient aucun barème</returns>
        bool ParentIsEmpty(DateTime periode, int organisationId);

        /// <summary>
        /// Gère la sauvegarde des barèmes exploitation organisation.
        /// </summary>
        /// <param name="bareme">Le barème concerné</param>
        /// <param name="userId">Identifiant Utilisateur</param>
        /// <returns>Le résultat de l'enregistrement pour mise à jour de la vue</returns>
        BaremeExploitationSaveResultModel Save(BaremeExploitationOrganisationToUpdateModel bareme, int userId);

        /// <summary>
        /// Synchronise la liste des barêmes orga en fonction d'une période et d'un CI avec le barème de l'orga.
        /// </summary>
        /// <param name="period">Periode</param>
        /// <param name="orgaId">Identifiant de l'organisation parente</param>
        /// <param name="userId">Identifiant de l'utilisateur</param>
        void SynchroBaremeOrgaFromParent(DateTime period, int orgaId, int userId);

        /// <summary>
        /// Retourne l'historique d'une ressource.
        /// </summary>
        /// <param name="organisationId">L'identifiant de l'organisation</param>
        /// <param name="ressourceId">L'identifiant de la ressource</param>
        /// <returns>L'historique de la ressource</returns>
        List<BaremeExploitationOrganisationEnt> GetHistorique(int organisationId, int ressourceId);

        /// <summary>
        /// Retourne la liste des barèmes organisation parent d'un CI.
        /// </summary>
        /// <param name="periode">Periode.</param>
        /// <param name="ciId">Identifiant du CI.</param>
        /// <param name="organisation">L'organisation correspondante ou null.</param>
        /// <returns>la liste des barèmes organisation parent d'un CI.</returns>
        List<BaremeExploitationOrganisationEnt> GetBaremeOrganisationParent(DateTime periode, int ciId, out OrganisationEnt organisation);
    }
}
