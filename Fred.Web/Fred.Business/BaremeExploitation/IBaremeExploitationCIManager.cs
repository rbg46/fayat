using Fred.Entities.Bareme;
using Fred.Entities.ReferentielFixe;
using Fred.Web.Shared.Models.Bareme;
using System;
using System.Collections.Generic;

namespace Fred.Business.BaremeExploitation
{
    /// <summary>
    /// Gestionnaire de barème exploitation CI.
    /// </summary>
    public interface IBaremeExploitationCIManager : IManager<BaremeExploitationCIEnt>
    {
        /// <summary>
        /// Retourne le message à utiliser en cas d'enregistrement impossible ou null si l'enregistrement est possible.
        /// </summary>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="periode">Période</param>
        /// <returns>Le message à utiliser en cas d'enregistrement impossible ou null si l'enregistrement est possible</returns>
        string GetEnregistrementImpossibleMessage(int ciId, DateTime periode);

        /// <summary>
        /// Récupère le référentiel étendu d'une société.
        /// </summary>
        /// <param name="societeId">L'identifiant de la société</param>
        /// <returns>Le référentiel étendu de la société.</returns>
        List<ChapitreEnt> GetReferentielEtendu(int societeId);

        /// <summary>
        /// Retourne la liste des barèmes en fonction d'une période et d'un CI.
        /// </summary>
        /// <param name="periode">Periode</param>
        /// <param name="ciId">Identifiant du CI</param>
        /// <returns>Liste de baremes exploitation CI</returns>
        List<BaremeExploitationCIEnt> GetBaremeByCIIdAndPeriode(DateTime periode, int ciId);

        /// <summary>
        /// Gère l'enregistrement de barèmes exploitation CI.
        /// </summary>
        /// <param name="bareme">Barème des ressources / surcharges et exceptions à enregistrer</param>
        /// <param name="userId">Identifiant Utilisateur</param>
        /// <returns>Le résultat de l'enregistrement pour mise à jour de la vue</returns>
        BaremeExploitationCISaveResultModel Save(BaremeExploitationCIToUpdateModel bareme, int userId);

        /// <summary>
        /// Retourne un barème exploitation CI en fonction des paramètres
        /// </summary>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="periode">Période</param>
        /// <param name="referentielEtenuId">Identifiant d'un référentiel étendu</param>
        /// <param name="currentPeriodOnly">Optionnel, demande le barème commencant sur la période</param>
        /// <returns>Un barème exploitation CI</returns>
        BaremeExploitationCIEnt Get(int ciId, DateTime periode, int referentielEtenuId, bool currentPeriodOnly = false);

        /// <summary>
        ///   Vérifie la validité et enregistre les fournisseurs importés depuis ANAËL Finances
        /// </summary>
        /// <param name="baremesCi">Liste des entités dont il faut vérifier la validité</param>
        void ManageImportedBareme(IEnumerable<BaremeExploitationCIEnt> baremesCi);

        /// <summary>
        /// Synchronise la liste des barêmes Ci en fonction d'une période et d'un CI avec le barème de l'orga.
        /// </summary>
        /// <param name="periode">Periode</param>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="userId">Identifiant de l'utilisateur</param>
        /// <returns>Vrai si la synchro est réussie</returns>
        BaremeExploitationSaveResultModel SynchroBaremeOrgaToCi(DateTime periode, int ciId, int userId);

        /// <summary>
        /// Retourne l'historique d'un référentiel étendue.
        /// </summary>
        /// <param name="ciId">L'identifiant du CI.</param>
        /// <param name="referentielEtenduId">L'identifiant du référentiel étendu.</param>
        /// <returns>L'historique du référentiel étendue.</returns>
        List<BaremeExploitationCIEnt> GetHistorique(int ciId, int referentielEtenduId);

        /// <summary>
        /// Supprime un barème
        /// </summary>
        /// <param name="baremeCI">Barème CI</param>
        void Delete(BaremeExploitationCIEnt baremeCI);
    }
}
