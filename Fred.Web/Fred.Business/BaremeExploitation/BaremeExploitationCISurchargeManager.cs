using System;
using System.Collections.Generic;
using Fred.Business.Referential;
using Fred.DataAccess.Interfaces;
using Fred.Entities;
using Fred.Entities.Bareme;
using Fred.Framework.Exceptions;
using Fred.Web.Shared.Models.Bareme;

namespace Fred.Business.BaremeExploitation
{
    /// <summary>
    /// Gestionnaire des surcharges et exceptions des barème exploitation CI.
    /// </summary>
    public class BaremeExploitationCISurchargeManager : Manager<SurchargeBaremeExploitationCIEnt, IBaremeExploitationCISurchargeRepository>, IBaremeExploitationCISurchargeManager
    {
        private readonly IDeviseManager deviseMgr;
        private int? lazyDeviseIdParDefaut;

        public BaremeExploitationCISurchargeManager(IUnitOfWork uow, IBaremeExploitationCISurchargeRepository baremeExploitationCiSurchargeRepository, IDeviseManager deviseMgr)
          : base(uow, baremeExploitationCiSurchargeRepository)
        {
            this.deviseMgr = deviseMgr;
        }

        #region Propriétés

        /// <summary>
        /// Obtient la devise par défaut.
        /// </summary>
        private int DeviseIdParDefaut
        {
            get
            {
                if (!lazyDeviseIdParDefaut.HasValue)
                {
                    lazyDeviseIdParDefaut = deviseMgr.GetDevise(Constantes.CodeDevise.Euro).DeviseId;
                }
                return lazyDeviseIdParDefaut.Value;
            }
        }

        #endregion

        /// <summary>
        /// Retourne la liste des surcharges et exceptions d'un barème exploitation CI en fonction d'une période et d'un CI.
        /// </summary>
        /// <param name="periode">Periode</param>
        /// <param name="ciId">Identifiant du CI</param>
        /// <returns>Liste des surcharges et exceptions du barème exploitation CI</returns>
        public List<SurchargeBaremeExploitationCIEnt> GetSurchargesByPeriodeAndCIId(DateTime periode, int ciId)
        {
            try
            {
                return Repository.GetSurchargeAndExceptionByPeriodeAndCIId(periode, ciId);
            }
            catch (FredRepositoryException e)
            {
                throw new FredBusinessException(e.Message, e);
            }
        }

        /// <summary>
        /// Gère l'enregistrement des surcharges et exceptions des barèmes exploitation CI.
        /// </summary>
        /// <param name="saveMode">Le mode d'enregistrement</param>
        /// <param name="bareme">Barèmes des ressources / surcharges et exceptions à enregistrer</param>
        /// <param name="dernierePeriodeComptableCloturee">Dernière période comptable clôturée ou null s'il n'y en a pas</param>
        /// <param name="periodeDebutBaremeCourant">Période de début du barème courant en BDD</param>
        /// <param name="userId">Identifiant utilisateur</param>
        /// <param name="utcNow">La date / heure courante</param>
        /// <returns>La liste des surcharges et exceptions ajoutées pour mise à jour de la vue, null si le bareme de la période précédente a été clôturé</returns>
        public List<BaremeExploitationCISurchargeAddedModel> Save(
          BaremeExploitationCIManager.SaveMode saveMode,
          BaremeExploitationCIToUpdateModel bareme,
          DateTime? dernierePeriodeComptableCloturee,
          DateTime? periodeDebutBaremeCourant,
          int userId,
          DateTime utcNow)
        {
            try
            {
                Dictionary<SurchargeBaremeExploitationCIEnt, int> surchargesAdded = null;

                switch (saveMode)
                {
                    case BaremeExploitationCIManager.SaveMode.EnregistrementImpossibleBaremeCourantInvalide:
                    case BaremeExploitationCIManager.SaveMode.EnregistrementImpossiblePeriodeCloturee:
                    case BaremeExploitationCIManager.SaveMode.EnregistrementImpossiblePasDeClotureComptable:
                        // Ce cas ne doit pas se produire
                        return null;

                    case BaremeExploitationCIManager.SaveMode.EnregistreSurPremierePeriodeNonCloturee:
                        var premierePeriodeComptableNonCloturee = dernierePeriodeComptableCloturee.Value.AddMonths(1);
                        surchargesAdded = Update(premierePeriodeComptableNonCloturee, bareme, userId, utcNow, null);
                        break;

                    case BaremeExploitationCIManager.SaveMode.ClotureBaremeCourantEtEnregistreSurPeriodeSelectionnee:
                        var surchargesCorrespondances = CloneAndCloture(bareme.Periode, periodeDebutBaremeCourant.Value, bareme.CiId, userId, utcNow);
                        Save();
                        Update(bareme.Periode, bareme, userId, utcNow, surchargesCorrespondances);
                        break;

                    case BaremeExploitationCIManager.SaveMode.EnregistreSurPeriodeSelectionnee:
                        Update(bareme.Periode, bareme, userId, utcNow, null);
                        break;

                    case BaremeExploitationCIManager.SaveMode.ClotureBaremeCourantEtEnregistreSurPremierePeriodeNonCloturee:
                        premierePeriodeComptableNonCloturee = dernierePeriodeComptableCloturee.Value.AddMonths(1);
                        var surchargesCorrespondance = CloneAndCloture(premierePeriodeComptableNonCloturee, periodeDebutBaremeCourant.Value, bareme.CiId, userId, utcNow);
                        Save();
                        Update(premierePeriodeComptableNonCloturee, bareme, userId, utcNow, surchargesCorrespondance);
                        break;
                }

                // Enregistre les changements
                if (bareme.SurchargesToAdd.Count > 0 || bareme.SurchargesToUpdate.Count > 0 || bareme.SurchargesToDelete.Count > 0)
                {
                    Save();
                }

                // Crée la liste des barèmes ajoutés avec leur identifiant
                if (surchargesAdded != null)
                {
                    var ret = new List<BaremeExploitationCISurchargeAddedModel>();
                    foreach (var surchargeAdded in surchargesAdded)
                    {
                        ret.Add(new BaremeExploitationCISurchargeAddedModel()
                        {
                            SurchargeBaremeId = surchargeAdded.Key.SurchargeBaremeId,
                            ViewId = surchargeAdded.Value
                        });
                    }
                    return ret;
                }
                else
                {
                    return null;
                }

            }
            catch (FredRepositoryException e)
            {
                throw new FredBusinessException(e.Message, e);
            }
        }

        /// <summary>
        /// Retourne l'historique d'une surcharge ou d'une exception.
        /// </summary>
        /// <param name="ciId">L'identifiant du CI.</param>
        /// <param name="referentielEtenduId">L'identifiant du référentiel étendu.</param>
        /// <param name="personnelId">L'identifiant du personnel pour une ressource de type personnel, sinon null</param>
        /// <param name="materielId">L'identifiant du matériel pour une ressource de type matériel, sinon null</param>
        /// <returns>L'historique de la surcharge ou de l'exception.</returns>
        public List<SurchargeBaremeExploitationCIEnt> GetHistorique(int ciId, int referentielEtenduId, int? personnelId, int? materielId)
        {
            return Repository.GetHistorique(ciId, referentielEtenduId, personnelId, materielId);
        }

        /// <summary>
        /// Met à jour les surcharges et exceptions.
        /// </summary>
        /// <param name="periode">La période concernée</param>
        /// <param name="bareme">Barèmes des surcharges et exceptions à enregistrer</param>
        /// <param name="userId">Identifiant utilisateur</param>
        /// <param name="utcNow">La date / heure courante</param>
        /// <param name="surchargesCorrespondance">En cas de clôture du barème de la période précédente, contient les relations entre les entités du barème précédent et celles du barème courant</param>
        /// <returns>La liste des surcharges et exceptions ajoutées pour mise à jour de la vue</returns>
        private Dictionary<SurchargeBaremeExploitationCIEnt, int> Update(DateTime periode, BaremeExploitationCIToUpdateModel bareme, int userId, DateTime utcNow, Dictionary<SurchargeBaremeExploitationCIEnt, SurchargeBaremeExploitationCIEnt> surchargesCorrespondance)
        {
            // Traite les baremes ajoutés
            var surchargesAdded = new Dictionary<SurchargeBaremeExploitationCIEnt, int>();
            foreach (var surchargeToAdd in bareme.SurchargesToAdd)
            {
                var surchargeBaremeExploitationCIEnt = new SurchargeBaremeExploitationCIEnt()
                {
                    CIId = bareme.CiId,
                    ReferentielEtenduId = surchargeToAdd.ReferentielEtenduId,
                    PersonnelId = surchargeToAdd.PersonnelId,
                    MaterielId = surchargeToAdd.MaterielId,
                    PeriodeDebut = periode,
                    UniteId = surchargeToAdd.UniteId,
                    Prix = surchargeToAdd.Prix,
                    PrixChauffeur = surchargeToAdd.PrixChauffeur,
                    PrixConduite = surchargeToAdd.PrixConduite,
                    DateCreation = utcNow,
                    AuteurCreationId = userId,
                    Type = surchargeToAdd.Type,
                    DeviseId = DeviseIdParDefaut,                        // EURO
                };
                Repository.Insert(surchargeBaremeExploitationCIEnt);
                surchargesAdded.Add(surchargeBaremeExploitationCIEnt, surchargeToAdd.ViewId);
            }

            // Traite les baremes modifiés
            foreach (var surchargeToUpdate in bareme.SurchargesToUpdate)
            {
                var surchargeBaremeExploitationCIEnt = Repository.FindById(surchargeToUpdate.SurchargeBaremeId);
                if (surchargeBaremeExploitationCIEnt != null)
                {
                    if (surchargesCorrespondance != null)
                    {
                        surchargeBaremeExploitationCIEnt = surchargesCorrespondance[surchargeBaremeExploitationCIEnt];
                    }

                    surchargeBaremeExploitationCIEnt.DateModification = utcNow;
                    surchargeBaremeExploitationCIEnt.AuteurModificationId = userId;
                    surchargeBaremeExploitationCIEnt.UniteId = surchargeToUpdate.UniteId;
                    surchargeBaremeExploitationCIEnt.Prix = surchargeToUpdate.Prix;
                    surchargeBaremeExploitationCIEnt.PrixChauffeur = surchargeToUpdate.PrixChauffeur;
                    surchargeBaremeExploitationCIEnt.PrixConduite = surchargeToUpdate.PrixConduite;
                    Repository.Update(surchargeBaremeExploitationCIEnt);
                }
            }

            // Traite les barèmes supprimés
            foreach (var surchargeToDelete in bareme.SurchargesToDelete)
            {
                var surchargeBaremeExploitationCIEnt = Repository.FindById(surchargeToDelete.SurchargeBaremeId);
                if (surchargeBaremeExploitationCIEnt != null)
                {
                    if (surchargesCorrespondance != null)
                    {
                        surchargeBaremeExploitationCIEnt = surchargesCorrespondance[surchargeBaremeExploitationCIEnt];
                    }

                    Repository.Delete(surchargeBaremeExploitationCIEnt);
                }
            }

            return surchargesAdded;
        }

        /// <summary>
        /// Clone et clôture le barême courant.
        /// </summary>
        /// <param name="premierePeriodeComptableNonCloturee">Première période comptable non clôturée</param>
        /// <param name="periodeDebutBaremeCourant">Période de début du barème courant en BDD</param>
        /// <param name="ciId">Identifiant du CI</param>
        /// <param name="userId">Identifiant utilisateur</param>
        /// <param name="utcNow">La date / heure courante</param>
        /// <returns>Les surcharges correspondantes</returns>
        private Dictionary<SurchargeBaremeExploitationCIEnt, SurchargeBaremeExploitationCIEnt> CloneAndCloture(DateTime premierePeriodeComptableNonCloturee, DateTime periodeDebutBaremeCourant, int ciId, int userId, DateTime utcNow)
        {
            var ret = new Dictionary<SurchargeBaremeExploitationCIEnt, SurchargeBaremeExploitationCIEnt>();

            foreach (var surchargePeriodePrecedente in Repository.GetSurchargeAndExceptionByPeriodeAndCIId(periodeDebutBaremeCourant, ciId))
            {
                // Clôt la surcharges ou l'exception sur la période précédente
                surchargePeriodePrecedente.PeriodeFin = premierePeriodeComptableNonCloturee;
                Repository.Update(surchargePeriodePrecedente);

                // Clone le bareme de la période précédente sur la période courante
                var surchargePeriodeCourante = new SurchargeBaremeExploitationCIEnt()
                {
                    CIId = surchargePeriodePrecedente.CIId,
                    ReferentielEtenduId = surchargePeriodePrecedente.ReferentielEtenduId,
                    PersonnelId = surchargePeriodePrecedente.PersonnelId,
                    MaterielId = surchargePeriodePrecedente.MaterielId,
                    UniteId = surchargePeriodePrecedente.UniteId,
                    DeviseId = surchargePeriodePrecedente.DeviseId,
                    PeriodeDebut = premierePeriodeComptableNonCloturee,
                    Prix = surchargePeriodePrecedente.Prix,
                    PrixChauffeur = surchargePeriodePrecedente.PrixChauffeur,
                    PrixConduite = surchargePeriodePrecedente.PrixConduite,
                    Type = surchargePeriodePrecedente.Type,
                    AuteurCreationId = userId,
                    DateCreation = utcNow
                };
                Repository.Insert(surchargePeriodeCourante);

                ret.Add(surchargePeriodePrecedente, surchargePeriodeCourante);
            }

            return ret;
        }
    }
}
