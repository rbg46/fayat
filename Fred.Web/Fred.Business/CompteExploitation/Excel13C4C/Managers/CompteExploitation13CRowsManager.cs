using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Fred.Business.CompteExploitation.Excel13C4C.Managers.Interfaces;
using Fred.Business.CompteExploitation.Helpers;
using Fred.Business.ExplorateurDepense;
using Fred.Web.Shared.Models.CompteExploitation;
using MoreLinq.Extensions;
namespace Fred.Business.CompteExploitation.Excel13C4C.Managers
{



    public class CompteExploitation13CRowsManager : ICompteExploitation13CRowsManager
    {

        private readonly IExplorateurDepenseManager explorateurDepenseManager;

        public CompteExploitation13CRowsManager(IExplorateurDepenseManager explorateurDepenseManager)
        {
            this.explorateurDepenseManager = explorateurDepenseManager;
        }

        public async Task<List<CompteExploitation13CRowModel>> GetRows(int ciId, List<SearchExplorateurDepense> allFilters)
        {
            List<Func<ExplorateurDepenseGeneriqueModel, bool>> additionnalFilters = new List<Func<ExplorateurDepenseGeneriqueModel, bool>>();

            foreach (SearchExplorateurDepense filter in allFilters)
            {
                additionnalFilters.Add(filter.GetPredicateWhereFor13C4C());
            }

            Dictionary<SearchExplorateurDepense, List<ExplorateurAxe>> dictionnary = await explorateurDepenseManager.GetAsync(ciId, allFilters, additionnalFilters).ConfigureAwait(false);

            List<CompteExploitation13CRowModel> compteExploitation13CRowModels = GenerateRows13C(dictionnary);

            return compteExploitation13CRowModels;
        }


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////// RECUPERATION DATA //////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        private List<CompteExploitation13CRowModel> GenerateRows13C(Dictionary<SearchExplorateurDepense, List<ExplorateurAxe>> dictionnary)
        {
            if (dictionnary == null)
                throw new ArgumentNullException(nameof(dictionnary));

            List<List<ExplorateurAxe>> allExplorateurAxes = dictionnary.Select(x => x.Value).ToList();

            List<List<ExplorateurAxe>> allflattenExplorateurAxes = allExplorateurAxes.FlattenAllExplorateurAxes();

            List<ExplorateurAxe> completeTree = new ExplorateurAxeMergeHelper().MergeAllTree(allExplorateurAxes);

            List<ExplorateurAxe> completeTreeFlatten = completeTree.FlattenExplorateurAxes();

            List<CompteExploitation13CRowModel> compteExploitation4CRowModels = new List<CompteExploitation13CRowModel>();

            foreach (ExplorateurAxe explorateurAxe in completeTreeFlatten)
            {
                string currentKey = explorateurAxe.GetIdentifier();
                ExplorateurAxe flattenExplorateurAxeCumulM = GetExplorateurAxe(allflattenExplorateurAxes, 0, currentKey);
                ExplorateurAxe flattenExplorateurAxeM = GetExplorateurAxe(allflattenExplorateurAxes, 1, currentKey);
                ExplorateurAxe flattenExplorateurAxeM1 = GetExplorateurAxe(allflattenExplorateurAxes, 2, currentKey);
                ExplorateurAxe flattenExplorateurAxeM2 = GetExplorateurAxe(allflattenExplorateurAxes, 3, currentKey);
                ExplorateurAxe flattenExplorateurAxeM3 = GetExplorateurAxe(allflattenExplorateurAxes, 4, currentKey);
                ExplorateurAxe flattenExplorateurAxeM4 = GetExplorateurAxe(allflattenExplorateurAxes, 5, currentKey);
                ExplorateurAxe flattenExplorateurAxeM5 = GetExplorateurAxe(allflattenExplorateurAxes, 6, currentKey);
                ExplorateurAxe flattenExplorateurAxeM6 = GetExplorateurAxe(allflattenExplorateurAxes, 7, currentKey);
                ExplorateurAxe flattenExplorateurAxeM7 = GetExplorateurAxe(allflattenExplorateurAxes, 8, currentKey);
                ExplorateurAxe flattenExplorateurAxeM8 = GetExplorateurAxe(allflattenExplorateurAxes, 9, currentKey);
                ExplorateurAxe flattenExplorateurAxeM9 = GetExplorateurAxe(allflattenExplorateurAxes, 10, currentKey);
                ExplorateurAxe flattenExplorateurAxeM10 = GetExplorateurAxe(allflattenExplorateurAxes, 11, currentKey);
                ExplorateurAxe flattenExplorateurAxeM11 = GetExplorateurAxe(allflattenExplorateurAxes, 12, currentKey);

                decimal montanCumulM = GetMontant(flattenExplorateurAxeCumulM);
                decimal montantM = GetMontant(flattenExplorateurAxeM11);
                decimal montantM1 = GetMontant(flattenExplorateurAxeM10);
                decimal montantM2 = GetMontant(flattenExplorateurAxeM9);
                decimal montantM3 = GetMontant(flattenExplorateurAxeM8);
                decimal montantM4 = GetMontant(flattenExplorateurAxeM7);
                decimal montantM5 = GetMontant(flattenExplorateurAxeM6);
                decimal montantM6 = GetMontant(flattenExplorateurAxeM5);
                decimal montantM7 = GetMontant(flattenExplorateurAxeM4);
                decimal montantM8 = GetMontant(flattenExplorateurAxeM3);
                decimal montantM9 = GetMontant(flattenExplorateurAxeM2);
                decimal montantM10 = GetMontant(flattenExplorateurAxeM1);
                decimal montantM11 = GetMontant(flattenExplorateurAxeM);

                CompteExploitation13CRowModel row = new CompteExploitation13CRowModel
                {
                    Libelle = explorateurAxe.Libelle,
                    RowCumulM = montanCumulM,
                    RowM = montantM,
                    RowM1 = montantM1,
                    RowM2 = montantM2,
                    RowM3 = montantM3,
                    RowM4 = montantM4,
                    RowM5 = montantM5,
                    RowM6 = montantM6,
                    RowM7 = montantM7,
                    RowM8 = montantM8,
                    RowM9 = montantM9,
                    RowM10 = montantM10,
                    RowM11 = montantM11,
                    Level = explorateurAxe.GetParents().Count,
                };

                compteExploitation4CRowModels.Add(row);
            }

            return compteExploitation4CRowModels;
        }

        private static ExplorateurAxe GetExplorateurAxe(List<List<ExplorateurAxe>> flattenExplorateurAxes, int index, string currentKey)
        {
            return flattenExplorateurAxes[index].Where(x => x.GetIdentifier() == currentKey).FirstOrDefault();
        }

        private decimal GetMontant(ExplorateurAxe flattenExplorateurAxe)
        {
            return flattenExplorateurAxe == null ? 0 : flattenExplorateurAxe.MontantHT;
        }


    }
}
