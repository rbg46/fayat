using System;
using System.Collections.Generic;
using System.IO;
using Fred.Business.CompteExploitation.Excel13C4C.Managers.Interfaces;
using Fred.Business.CompteExploitation.Excel13C4C.Models;
using Fred.Framework;
using Fred.Framework.Reporting;
using Syncfusion.XlsIO;
namespace Fred.Business.CompteExploitation.Excel13C4C.Managers
{
    public class CompteExploitation4CExcelManager : ICompteExploitation4CExcelManager
    {

        private const string DataColLevel = "U";
        private const int DataLineStart = 11;
        private const string ExcelSheetName = "Compte Exploitation";
        private const string ExcelTemplate4CMultiAxes = "Templates/CompteExploitation/Template4CMultiAxes.xlsx";

        public byte[] ComputeExport4CMultiAxes(CompteExploitation4CResult compteExploitation4CResult,
                                                Dictionary<string, string> staticMarkers,
                                                string exportFormat,
                                                string imagePath,
                                                int nbAxes = 1)
        {
            if (compteExploitation4CResult is null)
            {
                throw new ArgumentNullException(nameof(compteExploitation4CResult));
            }

            using (MemoryStream memoryStream = new MemoryStream())
            {
                using (var excelFormat = new ExcelFormat())
                {
                    IWorkbook excelTemplate = excelFormat.OpenTemplateWorksheet(AppDomain.CurrentDomain.BaseDirectory + ExcelTemplate4CMultiAxes);
                    var workSheetTemplate = excelTemplate.ActiveSheet;
                    IWorksheet worksheet = excelTemplate.Worksheets.AddCopy(workSheetTemplate);
                    worksheet.View = SheetView.PageLayout;
                    worksheet.Name = ExcelSheetName;

                    CompteExploitationExcelHelper.HandleSocieteLogoOnExcel(imagePath, worksheet);

                    ITemplateMarkersProcessor markerProc = worksheet.CreateTemplateMarkersProcessor();
                    excelFormat.AddVariableIntemplate(new List<ResultYear>() { compteExploitation4CResult.CompteExploitationTotalsContainer.Correctif }, "AvancementRecettecorrectif", markerProc);
                    excelFormat.AddVariableIntemplate(new List<ResultYear>() { compteExploitation4CResult.CompteExploitationTotalsContainer.Facture }, "AvancementRecettefacture", markerProc);
                    excelFormat.AddVariableIntemplate(new List<ResultYear>() { compteExploitation4CResult.CompteExploitationTotalsContainer.Production }, "AvancementRecetteproduction", markerProc);
                    excelFormat.AddVariableIntemplate(new List<Result4C>() { compteExploitation4CResult.CompteExploitationTotalsContainer.FraisPorp }, "AvancementRecettefraisPorp", markerProc);
                    excelFormat.AddVariableIntemplate(compteExploitation4CResult.CompteExploitation4CRowModels, "CompteExploitationRowModel", markerProc, staticMarkers);
                    markerProc.ApplyMarkers();


                    int endLineNum = compteExploitation4CResult.CompteExploitation4CRowModels.Count + DataLineStart - 1;
                    int totalLineNum = compteExploitation4CResult.CompteExploitation4CRowModels.Count + DataLineStart + 1;

                    CompleteExcelFormating(ref excelTemplate, totalLineNum, endLineNum, nbAxes, 4);
                    // Permet de supprimer tous filtres
                    excelTemplate.ActiveSheet.AutoFilters.FilterRange = null;

                    if (exportFormat == "PDF")
                    {
                        excelFormat.PrintExcelToPdf(excelTemplate).Save(memoryStream);
                    }
                    else
                    {
                        excelFormat.SaveExcelToMemoryStream(excelTemplate, memoryStream);
                    }
                }
                return memoryStream.ToArray();
            }

        }

        private void CompleteExcelFormating(ref IWorkbook workbook, int totalLineNum, int endLineNum, int nbAxes, int nbCol)
        {
            // Suppression de la feuille modèle
            if (workbook.Worksheets.Count > 1) { workbook.Worksheets.Remove(0); }

            if (endLineNum >= DataLineStart)
            {
                var totalStyle = ExcelHelperTechnical.CreateStyleTotal(ref workbook);
                ExcelHelperTechnical.CreateLineStyles(ref workbook, nbAxes);

                // Ajout des formules dynamiques & du formatage des cellules
                IWorksheet filledSheet = workbook.Worksheets[0];
                ExcelHelperTechnical.AddCorrectLibellesInCells(ref filledSheet, endLineNum, nbCol, nbAxes);

                AddExcelFormulas(ref filledSheet, totalLineNum, endLineNum, totalStyle);

            }
        }


        /// <summary>
        /// Ajout de formules dynamiques
        /// </summary>
        /// <param name="filledSheet">La référence de la feuille excel</param>
        /// <param name="totalLineNum">Nombre total de lignes</param>
        /// <param name="endLineNum">Numéro de la ligne de fin des données</param>
        /// <param name="totalStyle">Le style de la ligne Total</param>
        private void AddExcelFormulas(ref IWorksheet filledSheet, int totalLineNum, int endLineNum, IStyle totalStyle)
        {
            filledSheet.Range["E" + totalLineNum].Formula = "=SUMIF(" + CompteExploitationExcelHelper.GetFormatedExcelRange(DataColLevel, DataColLevel, DataLineStart, endLineNum) + ";0;" + CompteExploitationExcelHelper.GetFormatedExcelRange("E", "E", DataLineStart, endLineNum) + ")";
            filledSheet.Range["G" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;G" + DataLineStart + ":G" + endLineNum + ")";
            filledSheet.Range["I" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;I" + DataLineStart + ":I" + endLineNum + ")";
            filledSheet.Range["K" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;K" + DataLineStart + ":K" + endLineNum + ")";

            var cellDataRange1 = CompteExploitationExcelHelper.GetFormatedExcelRange("E", "F", totalLineNum);
            filledSheet.Range[cellDataRange1].CellStyle = totalStyle;
            filledSheet.Range[cellDataRange1].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
            var cellDataRange2 = CompteExploitationExcelHelper.GetFormatedExcelRange("I", "J", totalLineNum);
            filledSheet.Range[cellDataRange2].CellStyle = totalStyle;
            filledSheet.Range[cellDataRange2].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
        }

    }
}
