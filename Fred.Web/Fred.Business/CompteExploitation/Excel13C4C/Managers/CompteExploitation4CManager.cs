using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Fred.Business.CI;
using Fred.Business.CompteExploitation.Excel13C4C.Helpers;
using Fred.Business.CompteExploitation.Excel13C4C.Managers.Interfaces;
using Fred.Business.CompteExploitation.Excel13C4C.Models;
using Fred.Business.ExplorateurDepense;
using Fred.Framework.DateTimeExtend;
using Fred.Web.Shared.Models.CompteExploitation;

namespace Fred.Business.CompteExploitation.Excel13C4C.Managers
{
    public class CompteExploitation4CManager : ICompteExploitation4CManager
    {
        private readonly IExplorateurDepenseManager explorateurDepenseManager;
        private readonly ICompteExploitation4CTotalsManager compteExploitation4CManager;
        private readonly ICompteExploitation4CRowsManager compteExploitation4CRowsManager;
        private readonly ICompteExploitation4CExcelManager compteExploitation4CExcelManager;
        private readonly IImageSocietePathManager imageSocietePathManager;
        private readonly ICIManager cIManager;

        public CompteExploitation4CManager(IExplorateurDepenseManager explorateurDepenseManager,
                                           ICompteExploitation4CTotalsManager compteExploitation4CManager,
                                           ICompteExploitation4CRowsManager compteExploitation4CRowsManager,
                                           ICompteExploitation4CExcelManager compteExploitation4CExcelManager,
                                           IImageSocietePathManager imageSocietePathManager,
                                           ICIManager cIManager)
        {
            this.explorateurDepenseManager = explorateurDepenseManager;
            this.compteExploitation4CManager = compteExploitation4CManager;
            this.compteExploitation4CRowsManager = compteExploitation4CRowsManager;
            this.compteExploitation4CExcelManager = compteExploitation4CExcelManager;
            this.imageSocietePathManager = imageSocietePathManager;
            this.cIManager = cIManager;
        }

        /// <summary>
        /// Pour l'export excel du 4C, le principe est le suivant :
        /// L'affichage de la derniere colonne correspond  a l'affichage l'explorateur des depenses  pour le mois choisi en cumul
        /// L'affichage de la premiere colonne correspond  a l'affichage l'explorateur des depenses  pour le mois choisi en cumul M-1
        /// L'affichage de la deuxieme colonne correspond  à la difference entre ces 2 colonnes
        /// </summary>
        /// <returns></returns>      
        public async Task<byte[]> GenerateExcel4CAsync(GenerateExcel4CParameterModel generateExcel4CParameterModel)
        {
            if (generateExcel4CParameterModel == null)
                throw new ArgumentNullException(nameof(generateExcel4CParameterModel));

            string ciName = this.cIManager.GetCIById(generateExcel4CParameterModel.CiId).CodeLibelle;


            DateTime period = DateTime.Parse(generateExcel4CParameterModel.Period);

            DateTime periodeFinM = period.GetLimitsOfMonth().EndDate;

            DateTime periodeFinM1 = period.AddMonths(-1).GetLimitsOfMonth().EndDate;

            SearchExplorateurDepense filtreCumulM = FilterHelpers.CreateFilterForCumul(generateExcel4CParameterModel, periodeFinM);

            SearchExplorateurDepense filtreCumulM1 = FilterHelpers.CreateFilterForCumul(generateExcel4CParameterModel, periodeFinM1);


            IEnumerable<ExplorateurAxe> explorateurAxesM = await explorateurDepenseManager.GetAsync(filtreCumulM, additionalFilterFunc: filtreCumulM.GetPredicateWhereFor13C4C()).ConfigureAwait(false);

            IEnumerable<ExplorateurAxe> explorateurAxesM1 = await explorateurDepenseManager.GetAsync(filtreCumulM1, additionalFilterFunc: filtreCumulM1.GetPredicateWhereFor13C4C()).ConfigureAwait(false);

            List<CompteExploitation4CRowModel> compteExploitation4CRowModels = compteExploitation4CRowsManager.GenerateRows(periodeFinM, explorateurAxesM.ToList(), explorateurAxesM1.ToList());

            // Encapsulation du resultat final
            CompteExploitation4CResult excel4CResult = new CompteExploitation4CResult();

            excel4CResult.PeriodeFinM = periodeFinM;

            excel4CResult.CompteExploitationTotalsContainer = compteExploitation4CManager.GetTotals(generateExcel4CParameterModel.CiId, periodeFinM);

            excel4CResult.CompteExploitation4CRowModels = compteExploitation4CRowModels;

            Dictionary<string, string> staticMarkers = CompteExploitationCommonExcelHelper.FillStaticExcelMarkers(generateExcel4CParameterModel.Period,
                                                                                                                  ciName,
                                                                                                                  generateExcel4CParameterModel.Perimeter,
                                                                                                                  excel4CResult.PeriodeFinM,
                                                                                                                  generateExcel4CParameterModel.ValFiltreLibelle);

            string[] arrayAxis = generateExcel4CParameterModel.AllAxis.Split(',');

            string imagePath = imageSocietePathManager.GetImagePath(generateExcel4CParameterModel.CiId);

            return compteExploitation4CExcelManager.ComputeExport4CMultiAxes(excel4CResult,
                                                                            staticMarkers,
                                                                            generateExcel4CParameterModel.Format,
                                                                            imagePath,
                                                                            arrayAxis.Length);
        }
    }
}

