using System;
using System.Collections.Generic;
using System.Linq;
using Fred.Business.CompteExploitation.Excel13C4C.Managers.Interfaces;
using Fred.Business.CompteExploitation.Helpers;
using Fred.Business.ExplorateurDepense;
using Fred.Entities;
using Fred.Web.Shared.Models.CompteExploitation;
namespace Fred.Business.CompteExploitation.Excel13C4C.Managers
{
    public class CompteExploitation4CRowsManager : ICompteExploitation4CRowsManager
    {

        public List<CompteExploitation4CRowModel> GenerateRows(DateTime periodeFin, List<ExplorateurAxe> explorateurAxesM, List<ExplorateurAxe> explorateurAxesM1)
        {
            List<List<ExplorateurAxe>> allExplorateurAxes = new List<List<ExplorateurAxe>>();

            allExplorateurAxes.Add(explorateurAxesM);

            allExplorateurAxes.Add(explorateurAxesM1);

            List<List<ExplorateurAxe>> allflattenExplorateurAxes = allExplorateurAxes.FlattenAllExplorateurAxes();

            List<ExplorateurAxe> completeTree = new ExplorateurAxeMergeHelper().MergeAllTree(allExplorateurAxes);

            List<ExplorateurAxe> completeTreeFlatten = completeTree.FlattenExplorateurAxes();

            List<CompteExploitation4CRowModel> compteExploitation4CRowModels = new List<CompteExploitation4CRowModel>();

            foreach (ExplorateurAxe explorateurAxe in completeTreeFlatten)
            {
                string currentKey = explorateurAxe.GetIdentifier();

                ExplorateurAxe flattenExplorateurAxeM = GetExplorateurAxe(allflattenExplorateurAxes, 0, currentKey);
                ExplorateurAxe flattenExplorateurAxeM1 = GetExplorateurAxe(allflattenExplorateurAxes, 1, currentKey);

                decimal montantM = flattenExplorateurAxeM == null ? 0 : flattenExplorateurAxeM.MontantHT;
                decimal montantM1 = flattenExplorateurAxeM1 == null ? 0 : flattenExplorateurAxeM1.MontantHT;

                decimal soldeFar = explorateurAxe.Depenses == null ? 0 : GetSoldeFar(flattenExplorateurAxeM, periodeFin);

                CompteExploitation4CRowModel row = new CompteExploitation4CRowModel
                {
                    Libelle = explorateurAxe.Libelle,
                    RowM1 = montantM1,
                    RowM = montantM - montantM1,
                    RowCumulM = montantM,
                    Level = explorateurAxe.GetParents().Count,
                    RowFarM = soldeFar
                };

                compteExploitation4CRowModels.Add(row);
            }

            return compteExploitation4CRowModels;
        }

        private static ExplorateurAxe GetExplorateurAxe(List<List<ExplorateurAxe>> flattenExplorateurAxes, int index, string currentKey)
        {
            return flattenExplorateurAxes[index].Where(x => x.GetIdentifier() == currentKey).FirstOrDefault();
        }

        private decimal GetSoldeFar(ExplorateurAxe explorateurAxe, DateTime periode)
        {
            return explorateurAxe.Depenses
                 .Where(x => (100 * x.Periode.Year) + x.Periode.Month <= (100 * periode.Year) + periode.Month && x.TypeDepense == Constantes.DepenseType.Reception)
                 .Sum(x => x.SoldeFar);
        }

    }
}
