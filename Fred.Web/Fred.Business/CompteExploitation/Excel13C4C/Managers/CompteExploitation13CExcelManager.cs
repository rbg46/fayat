using System;
using System.Collections.Generic;
using System.IO;
using Fred.Business.CompteExploitation.Excel13C4C.Helpers;
using Fred.Business.CompteExploitation.Excel13C4C.Managers.Interfaces;
using Fred.Business.CompteExploitation.Excel13C4C.Models;
using Fred.Framework;
using Fred.Framework.Reporting;
using Syncfusion.XlsIO;

namespace Fred.Business.CompteExploitation.Excel13C4C.Managers
{
    public class CompteExploitation13CExcelManager : ICompteExploitation13CExcelManager
    {
        private const string DataColLevel = "U";
        private const int DataLineStart = 11;
        private const string ExcelSheetName = "Compte Exploitation";
        private const string ExcelTemplate13CMultiAxes = "Templates/CompteExploitation/Template13CMultiAxes.xlsx";


        public byte[] GenerateExcel13C(CompteExploitation13CResult exploitation13CDataContainer, Dictionary<string, string> staticMarkers, string exportFormat, string imagePath, int nbAxes)
        {
                     

            if (exploitation13CDataContainer is null)
            {
                throw new ArgumentNullException(nameof(exploitation13CDataContainer));
            }

            using (MemoryStream memoryStream = new MemoryStream())
            {
                using (var excelFormat = new ExcelFormat())
                {
                    IWorkbook excelTemplate = excelFormat.OpenTemplateWorksheet(AppDomain.CurrentDomain.BaseDirectory + ExcelTemplate13CMultiAxes);
                    var workSheetTemplate = excelTemplate.ActiveSheet;
                    IWorksheet worksheet = excelTemplate.Worksheets.AddCopy(workSheetTemplate);
                    worksheet.View = SheetView.PageLayout;
                    worksheet.Name = ExcelSheetName;

                    CompteExploitationExcelHelper.HandleSocieteLogoOnExcel(imagePath, worksheet);

                    ITemplateMarkersProcessor markerProc = worksheet.CreateTemplateMarkersProcessor();
                    excelFormat.AddVariableIntemplate(new List<ResultYear>() { exploitation13CDataContainer.CompteExploitationTotalsContainer.Correctif }, "AvancementRecettecorrectif", markerProc);
                    excelFormat.AddVariableIntemplate(new List<ResultYear>() { exploitation13CDataContainer.CompteExploitationTotalsContainer.Facture }, "AvancementRecettefacture", markerProc);
                    excelFormat.AddVariableIntemplate(new List<ResultYear>() { exploitation13CDataContainer.CompteExploitationTotalsContainer.Production }, "AvancementRecetteproduction", markerProc);
                    excelFormat.AddVariableIntemplate(new List<Result13C>() { exploitation13CDataContainer.CompteExploitationTotalsContainer.FraisPorp }, "AvancementRecettefraisPorp", markerProc);
                    excelFormat.AddVariableIntemplate(exploitation13CDataContainer.CompteExploitation13CRowModels, "CompteExploitationRowModel", markerProc, staticMarkers);
                    markerProc.ApplyMarkers();


                    int endLineNum = exploitation13CDataContainer.CompteExploitation13CRowModels.Count + DataLineStart - 1;
                    int totalLineNum = exploitation13CDataContainer.CompteExploitation13CRowModels.Count + DataLineStart + 1;

                    CompleteExcelFormating(ref excelTemplate, totalLineNum, endLineNum, nbAxes, 13);

                    if (exportFormat == "PDF")
                    {
                        excelFormat.PrintExcelToPdf(excelTemplate).Save(memoryStream);
                    }
                    else
                    {
                        excelFormat.SaveExcelToMemoryStream(excelTemplate, memoryStream);
                    }
                }
                return memoryStream.ToArray();
            }
        }

        private void CompleteExcelFormating(ref IWorkbook workbook, int totalLineNum, int endLineNum, int nbAxes, int nbCol)
        {
            // Suppression de la feuille modèle
            if (workbook.Worksheets.Count > 1) { workbook.Worksheets.Remove(0); }

            if (endLineNum >= DataLineStart)
            {
                var totalStyle = ExcelHelperTechnical.CreateStyleTotal(ref workbook);
                ExcelHelperTechnical.CreateLineStyles(ref workbook, nbAxes);

                // Ajout des formules dynamiques & du formatage des cellules
                IWorksheet filledSheet = workbook.Worksheets[0];

                ExcelHelperTechnical.AddCorrectLibellesInCells(ref filledSheet, endLineNum, nbCol, nbAxes);

                AddExcelFormulas(ref filledSheet, totalLineNum, endLineNum, totalStyle);

            }
        }


        private void AddExcelFormulas(ref IWorksheet filledSheet, int totalLineNum, int endLineNum, IStyle totalStyle)
        {
            filledSheet.Range["E" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;E" + DataLineStart + ":E" + endLineNum + ")";
            filledSheet.Range["F" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;F" + DataLineStart + ":F" + endLineNum + ")";
            filledSheet.Range["G" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;G" + DataLineStart + ":G" + endLineNum + ")";
            filledSheet.Range["H" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;H" + DataLineStart + ":H" + endLineNum + ")";
            filledSheet.Range["I" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;I" + DataLineStart + ":I" + endLineNum + ")";
            filledSheet.Range["J" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;J" + DataLineStart + ":J" + endLineNum + ")";
            filledSheet.Range["K" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;K" + DataLineStart + ":K" + endLineNum + ")";
            filledSheet.Range["L" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;L" + DataLineStart + ":L" + endLineNum + ")";
            filledSheet.Range["M" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;M" + DataLineStart + ":M" + endLineNum + ")";
            filledSheet.Range["N" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;N" + DataLineStart + ":N" + endLineNum + ")";
            filledSheet.Range["O" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;O" + DataLineStart + ":O" + endLineNum + ")";
            filledSheet.Range["P" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;P" + DataLineStart + ":P" + endLineNum + ")";
            filledSheet.Range["R" + totalLineNum].Formula = "=SUMIF(" + DataColLevel + DataLineStart + ":" + DataColLevel + endLineNum + ";0;R" + DataLineStart + ":R" + endLineNum + ")";

            // Mise en forme des données sommées
            var cellDataRange = CompteExploitationExcelHelper.GetFormatedExcelRange("E", "R", totalLineNum);
            filledSheet.Range[cellDataRange].CellStyle = totalStyle;
        }

    }
}
