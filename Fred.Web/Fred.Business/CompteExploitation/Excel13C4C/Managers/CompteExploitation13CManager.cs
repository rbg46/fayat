using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Fred.Business.CI;
using Fred.Business.CompteExploitation.Excel13C4C.Helpers;
using Fred.Business.CompteExploitation.Excel13C4C.Managers.Interfaces;
using Fred.Business.CompteExploitation.Excel13C4C.Models;
using Fred.Business.ExplorateurDepense;
using Fred.Web.Shared.Models.CompteExploitation;

namespace Fred.Business.CompteExploitation.Excel13C4C.Managers
{
    public class CompteExploitation13CManager : ICompteExploitation13CManager
    {
        private readonly ICompteExploitation13CTotalsManager compteExploitation13CTotalsManager;
        private readonly ICompteExploitation13CExcelManager compteExploitation13CExcelManager;
        private readonly ICompteExploitation13CRowsManager compteExploitation13CRowsManager;
        private readonly IImageSocietePathManager imageSocietePathManager;
        private readonly ICIManager cIManager;

        public CompteExploitation13CManager(IImageSocietePathManager imageSocietePathManager,
                                           ICIManager cIManager,
                                           ICompteExploitation13CTotalsManager compteExploitation13CTotalsManager,
                                           ICompteExploitation13CExcelManager compteExploitation13CExcelManager,
                                           ICompteExploitation13CRowsManager compteExploitation13CRowsManager)
        {

            this.compteExploitation13CTotalsManager = compteExploitation13CTotalsManager;
            this.compteExploitation13CExcelManager = compteExploitation13CExcelManager;
            this.compteExploitation13CRowsManager = compteExploitation13CRowsManager;
            this.imageSocietePathManager = imageSocietePathManager;
            this.cIManager = cIManager;

        }

        public async Task<byte[]> GenerateExcel13CAsync(GenerateExcel13CParameterModel parameters)
        {
            if (parameters == null)
                throw new ArgumentNullException(nameof(parameters));

            string ciName = this.cIManager.GetCIById(parameters.CiId).CodeLibelle;

            CompteExploitation13CResult excel13CResult = new CompteExploitation13CResult();

            excel13CResult.PeriodeFinM = DateTime.Parse(parameters.Period);

            excel13CResult.CompteExploitationTotalsContainer = compteExploitation13CTotalsManager.GetTotals(parameters.CiId, excel13CResult.PeriodeFinM);


            List<SearchExplorateurDepense> filters = CreateFiltersFor13C(parameters, excel13CResult.PeriodeFinM);
            // toutes les lignes du fichier excel            

            excel13CResult.CompteExploitation13CRowModels = await compteExploitation13CRowsManager.GetRows(parameters.CiId, filters)
                                                                                                 .ConfigureAwait(false);


            Dictionary<string, string> staticMarkers = CompteExploitationCommonExcelHelper.FillStaticExcelMarkers(parameters.Period,
                                                                                                                ciName,
                                                                                                                parameters.Perimeter,
                                                                                                                excel13CResult.PeriodeFinM,
                                                                                                                parameters.ValFiltreLibelle);

            string[] arrayAxis = parameters.AllAxis.Split(',');

            string imagePath = imageSocietePathManager.GetImagePath(parameters.CiId);

            return compteExploitation13CExcelManager.GenerateExcel13C(excel13CResult, staticMarkers, parameters.Format, imagePath, arrayAxis.Length);
        }



        private List<SearchExplorateurDepense> CreateFiltersFor13C(GenerateExcel13CParameterModel generateExcel13CParameterModel, DateTime periodeFinM)
        {

            List<SearchExplorateurDepense> allFilters = new List<SearchExplorateurDepense>();

            SearchExplorateurDepense filtreCumulM = FilterHelpers.CreateFilterForCumul(generateExcel13CParameterModel, periodeFinM);

            allFilters.Add(filtreCumulM);

            List<SearchExplorateurDepense> filtersForMonths = CreateFilterForMonths(generateExcel13CParameterModel, periodeFinM, 12);

            allFilters.AddRange(filtersForMonths);

            return allFilters;
        }


        private List<SearchExplorateurDepense> CreateFilterForMonths(GenerateExcel13CParameterModel generateExcel13CParameterModel, DateTime periodeFinM, int numberOfMonthBefore)
        {
            List<SearchExplorateurDepense> result = new List<SearchExplorateurDepense>();

            for (int i = 0; i < numberOfMonthBefore; i++)
            {
                SearchExplorateurDepense filtre = FilterHelpers.CreateFilterForMonth(generateExcel13CParameterModel, periodeFinM, i);
                result.Add(filtre);
            }
            return result;

        }


    }
}
