using System.Collections.Generic;
using System.Linq;
using Fred.Business.ExplorateurDepense;
using Fred.Framework.Comparers;

namespace Fred.Business.CompteExploitation.Helpers
{
    public class ExplorateurAxeMergeHelper
    {
        public List<ExplorateurAxe> MergeAllTree(List<List<ExplorateurAxe>> allExplorateurAxes)
        {
            List<ExplorateurAxe> result = new List<ExplorateurAxe>();

            foreach (List<ExplorateurAxe> item in allExplorateurAxes)
            {
                result = result.FlattenExplorateurAxes();
                result = DoMerge(result, item);
            }
            return result;
        }


        private List<ExplorateurAxe> DoMerge(IEnumerable<ExplorateurAxe> lefts, IEnumerable<ExplorateurAxe> rights)
        {
            List<ExplorateurAxe> result = new List<ExplorateurAxe>();

            IEnumerable<ExplorateurAxe> flattenLefts = lefts;

            List<ExplorateurAxe> flattenRights = rights.ToList().FlattenExplorateurAxes();

            foreach (ExplorateurAxe left in flattenLefts)
            {
                ExplorateurAxe leftParent = left.Parent;
                Add(result, left, leftParent);
            }

            foreach (ExplorateurAxe right in flattenRights)
            {
                ExplorateurAxe match = FindIn(right, result);
                if (match == null)
                {
                    ExplorateurAxe rightParent = right.Parent;
                    Add(result, right, rightParent);
                }
            }

            List<ExplorateurAxe> orderby = Order(result);

            return orderby;
        }

        private void Add(List<ExplorateurAxe> result, ExplorateurAxe element, ExplorateurAxe parent)
        {
            if (parent != null)
            {
                ExplorateurAxe parentInResult = FindIn(parent, result);
                ExplorateurAxe copy = Copy(element, parentInResult);
                List<ExplorateurAxe> sousExplorateurAxe = parentInResult.SousExplorateurAxe as List<ExplorateurAxe>;
                sousExplorateurAxe.Add(copy);
            }
            else
            {
                result.Add(Copy(element, null));
            }
        }

        private ExplorateurAxe Copy(ExplorateurAxe explorateurAxe, ExplorateurAxe parent)
        {
            ExplorateurAxe copy = new ExplorateurAxe()
            {
                AllRessourceCode = explorateurAxe.AllRessourceCode,
                Code = explorateurAxe.Code,
                AllT3Code = explorateurAxe.AllT3Code,
                CodeChapitreParent = explorateurAxe.CodeChapitreParent,
                Devise = explorateurAxe.Devise,
                Key = explorateurAxe.Key,
                Libelle = explorateurAxe.Libelle,
                MontantHT = explorateurAxe.MontantHT,
                Parent = explorateurAxe.Parent,
                SousExplorateurAxe = new List<ExplorateurAxe>(),
                Type = explorateurAxe.Type,
                Depenses = explorateurAxe.Depenses
            };
            copy.Parent = parent;
            return copy;
        }

        private ExplorateurAxe FindIn(ExplorateurAxe element, IEnumerable<ExplorateurAxe> sources)
        {
            if (element == null)
            {
                return null;
            }
            List<ExplorateurAxe> list = sources == null ? null : sources.ToList();

            List<ExplorateurAxe> allInTarget = list.FlattenExplorateurAxes();

            string sourceKey = element.GetIdentifier();

            return allInTarget.Where(x => x.GetIdentifier() == sourceKey).FirstOrDefault();
        }

        private List<ExplorateurAxe> Order(List<ExplorateurAxe> explorateurAxes)
        {
            List<ExplorateurAxe> result = new List<ExplorateurAxe>();

            result.AddRange(explorateurAxes.OrderBy(x => x.Code, new CustomAlphanumericComparer()).ToList());

            foreach (ExplorateurAxe axe in explorateurAxes)
            {
                if (axe.SousExplorateurAxe != null)
                {
                    axe.SousExplorateurAxe = axe.SousExplorateurAxe.OrderBy(x => x.Code, new CustomAlphanumericComparer()).ToList();

                    Order(axe.SousExplorateurAxe.ToList());
                }
            }
            return result;
        }


    }
}
