using System;
using System.Collections.Generic;
using System.Linq;
using Fred.Business.ExplorateurDepense;
using Fred.Framework.DateTimeExtend;
using Fred.Framework.Extensions;
using Fred.Web.Shared.Models.CompteExploitation;
using static Fred.Entities.Constantes;
namespace Fred.Business.CompteExploitation.Excel13C4C.Helpers
{
    public class FilterHelpers
    {
        protected static readonly List<string> AxesC = new List<string> { AnalysisAxis.Chapitre, AnalysisAxis.SousChapitre, AnalysisAxis.Ressource };

        /// <summary>
        /// Liste des axes de type Taches
        /// </summary>
        protected static readonly List<string> AxesT = new List<string> { AnalysisAxis.T1, AnalysisAxis.T2, AnalysisAxis.T3 };

        public static int GetAxeAnalytique(string analyticAxis)
        {
            if (analyticAxis.Equals("RessourceTache"))
            {
                // Axes principaux Chap / SousChap / Ress
                return ExplorateurDepenseHelper.AxeAnalytique.RessourceTache.ToIntValue();
            }
            else
            {
                // Axes principaux T1 / T2 / T3
                return ExplorateurDepenseHelper.AxeAnalytique.TacheRessource.ToIntValue();
            }
        }

        public static string[] GetAxePrincipal(string analyticAxis, string allAxis)
        {
            List<string> arrayAxis = allAxis.Split(',').ToList();
            List<string> selectedAxesC = GetSelectedAxesC(arrayAxis);
            List<string> selectedAxesT = GetSelectedAxesT(arrayAxis);

            if (analyticAxis.Equals("RessourceTache"))
            {
                // Axes principaux Chap / SousChap / Ress
                if (selectedAxesC.Count > 0)
                {
                    return selectedAxesC.ToArray();
                }
                else
                {
                    return selectedAxesT.ToArray();
                }
            }
            else
            {
                // Axes principaux T1 / T2 / T3

                if (selectedAxesT.Count > 0)
                {
                    return selectedAxesT.ToArray();
                }
                else
                {
                    return selectedAxesC.ToArray();
                }
            }
        }

        public static string[] GetAxeSecondaire(string analyticAxis, string allAxis)
        {
            List<string> arrayAxis = allAxis.Split(',').ToList();
            List<string> selectedAxesC = GetSelectedAxesC(arrayAxis);
            List<string> selectedAxesT = GetSelectedAxesT(arrayAxis);

            if (analyticAxis.Equals("RessourceTache"))
            {
                // Axes principaux Chap / SousChap / Ress
                if (selectedAxesC.Count > 0)
                {
                    return selectedAxesT.ToArray();
                }
                else
                {
                    return Array.Empty<string>();
                }
            }
            else
            {
                // Axes principaux T1 / T2 / T3
                if (selectedAxesT.Count > 0)
                {
                    return selectedAxesC.ToArray();
                }
                else
                {
                    return Array.Empty<string>();
                }
            }
        }

        private static List<string> GetSelectedAxesC(List<string> arrayAxis)
        {
            List<string> selectedAxesC = new List<string>();
            foreach (string axis in arrayAxis)
            {
                if (AxesC.Contains(axis))
                {
                    selectedAxesC.Add(axis);
                }
            }
            return selectedAxesC;
        }

        private static List<string> GetSelectedAxesT(List<string> arrayAxis)
        {
            List<string> selectedAxesT = new List<string>();
            foreach (string axis in arrayAxis)
            {
                if (AxesT.Contains(axis))
                {
                    selectedAxesT.Add(axis);
                }
            }
            return selectedAxesT;
        }


        public static int? GetValeurFiltre(string searchPerimeter, string perimeter, int? valFiltre)
        {
            if (searchPerimeter == perimeter)
            {
                return valFiltre;
            }
            return null;
        }

        public static int GetValeurFiltreComplet(string perimeter)
        {
            if (AnalysisAxis.Complet == perimeter)
            {
                return 1;
            }
            return 0;
        }


        public static SearchExplorateurDepense CreateFilterForCumul(GenerateExcel4CParameterModel generateExcel4CParameterModel, DateTime periodeFinM)
        {
            int ciId = generateExcel4CParameterModel.CiId;
            DateTime periodeFin = periodeFinM;
            string analyticAxis = generateExcel4CParameterModel.AnalyticAxis;
            string allAxis = generateExcel4CParameterModel.AllAxis;
            string perimeter = generateExcel4CParameterModel.Perimeter;
            int? valFiltre = generateExcel4CParameterModel.ValFiltre;
            return CreateFilterForCumul(ciId, periodeFin, analyticAxis, allAxis, perimeter, valFiltre);
        }


        public static SearchExplorateurDepense CreateFilterForCumul(GenerateExcel13CParameterModel generateExcel13CParameterModel, DateTime periodeFinM)
        {
            int ciId = generateExcel13CParameterModel.CiId;
            DateTime periodeFin = periodeFinM;
            string analyticAxis = generateExcel13CParameterModel.AnalyticAxis;
            string allAxis = generateExcel13CParameterModel.AllAxis;
            string perimeter = generateExcel13CParameterModel.Perimeter;
            int? valFiltre = generateExcel13CParameterModel.ValFiltre;

            return CreateFilterForCumul(ciId, periodeFin, analyticAxis, allAxis, perimeter, valFiltre);
        }

        public static SearchExplorateurDepense CreateFilterForCumul(int ciId, DateTime periodeFin, string analyticAxis, string allAxis, string perimeter, int? valFiltre)
        {
            return new SearchExplorateurDepense
            {
                CiId = ciId,
                PeriodeFin = periodeFin,
                AxeAnalytique = FilterHelpers.GetAxeAnalytique(analyticAxis),
                AxePrincipal = FilterHelpers.GetAxePrincipal(analyticAxis, allAxis),
                AxeSecondaire = FilterHelpers.GetAxeSecondaire(analyticAxis, allAxis),
                ValeurFiltreComplet = FilterHelpers.GetValeurFiltreComplet(perimeter),
                ValeurFiltreChap = FilterHelpers.GetValeurFiltre(AnalysisAxis.Chapitre, perimeter, valFiltre),
                ValeurFiltreT1 = FilterHelpers.GetValeurFiltre(AnalysisAxis.T1, perimeter, valFiltre),
                ValeurFiltreT2 = FilterHelpers.GetValeurFiltre(AnalysisAxis.T2, perimeter, valFiltre),
                ValeurFiltreSousChap = FilterHelpers.GetValeurFiltre(AnalysisAxis.SousChapitre, perimeter, valFiltre),
            };
        }

        public static SearchExplorateurDepense CreateFilterForMonth(GenerateExcel13CParameterModel generateExcel13CParameterModel, DateTime periodeFinM, int monthToRemove)
        {
            int ciId = generateExcel13CParameterModel.CiId;

            DateTime periodeFin = periodeFinM.AddMonths(-monthToRemove).GetLimitsOfMonth().EndDate;
            DateTime periodeDebut = periodeFinM.AddMonths(-monthToRemove).GetLimitsOfMonth().StartDate;

            string analyticAxis = generateExcel13CParameterModel.AnalyticAxis;
            string allAxis = generateExcel13CParameterModel.AllAxis;
            string perimeter = generateExcel13CParameterModel.Perimeter;
            int? valFiltre = generateExcel13CParameterModel.ValFiltre;

            SearchExplorateurDepense filter = CreateFilterForCumul(ciId, periodeFin, analyticAxis, allAxis, perimeter, valFiltre);

            filter.PeriodeDebut = periodeDebut;

            return filter;
        }


    }
}
