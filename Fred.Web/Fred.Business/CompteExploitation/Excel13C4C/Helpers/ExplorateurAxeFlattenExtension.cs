using System.Collections.Generic;
using System.Linq;
using Fred.Business.ExplorateurDepense;
namespace Fred.Business.CompteExploitation.Helpers
{
    public static class ExplorateurAxeFlattenExtension
    {
        /// <summary>
        /// METHODE RECURCIVE !!!!
        /// Nous avons un abre comme celui-ci :
        /// INPUT
        /// T1
        ///   T2
        ///     R1
        ///   T2
        ///     R2
        ///     
        /// OUTPUT
        /// T1
        /// T2
        /// R1
        /// T2
        /// R2
        /// Sachant que l'output contient encore les enfants
        /// </summary>
        /// <param name="explorateurAxes"></param>
        /// <returns></returns>
        public static List<ExplorateurAxe> FlattenExplorateurAxes(this List<ExplorateurAxe> explorateurAxes)
        {
            List<ExplorateurAxe> result = new List<ExplorateurAxe>();

            foreach (ExplorateurAxe explorateurAxe in explorateurAxes)
            {
                result.Add(explorateurAxe);

                if (explorateurAxe.SousExplorateurAxe != null && explorateurAxe.SousExplorateurAxe.Count() > 0)
                {
                    List<ExplorateurAxe> children = explorateurAxe.SousExplorateurAxe.ToList();

                    List<ExplorateurAxe> childenFlatten = FlattenExplorateurAxes(children); //METHODE RECURCIVE !!!!!

                    result.AddRange(childenFlatten);
                }
            }
            return result;
        }


        public static List<List<ExplorateurAxe>> FlattenAllExplorateurAxes(this List<List<ExplorateurAxe>> allExplorateurAxes)
        {
            List<List<ExplorateurAxe>> result = new List<List<ExplorateurAxe>>();
            foreach (List<ExplorateurAxe> explorateurAxes in allExplorateurAxes)
            {
                List<ExplorateurAxe> flattenExplorateurAxes = explorateurAxes.FlattenExplorateurAxes();
                result.Add(flattenExplorateurAxes);
            }
            return result;
        }

        public static List<ExplorateurAxe> ToAxesList(this ExplorateurAxe axe)
        {
            List<ExplorateurAxe> result = new List<ExplorateurAxe>();

            result.Add(axe);

            return result;
        }

        public static List<List<ExplorateurAxe>> ConcatAxes(this List<ExplorateurAxe> first, List<ExplorateurAxe> second)
        {
            List<List<ExplorateurAxe>> result = new List<List<ExplorateurAxe>>();

            result.Add(first);

            result.Add(second);

            return result;
        }

        public static List<List<ExplorateurAxe>> ConcatAxes(this List<List<ExplorateurAxe>> all, List<ExplorateurAxe> first)
        {
            all.Add(first);

            return all;
        }
    }
}
