using System;
using System.Collections.Generic;
using Fred.Business.CompteExploitation.Excel13C4C.Helpers;
using Fred.Business.CompteExploitation.Excel13C4C.Models;
using Fred.Web.Shared.Enum;
using Fred.Web.Shared.Models.Budget.Recette;

namespace Fred.Business.CompteExploitation.Excel13C4C.Calculators
{
    public class CommonsTotalsCalculator
    {


        public ResultYear CreateRows13C(List<PeriodAvancementRecetteLoadModel> periodAvancementRecetteLoadModels, int periodRequested, InfoAvancementRecette infoAvancementRecette)
        {

            var helper = new AvancementRecetteTimeHelper();

            var avancementRecetteLoadModel = helper.GetAvancementRecetteForPeriod(periodAvancementRecetteLoadModels, periodRequested, substractMonth: 11);
            var avancementRecetteLoadModel1 = helper.GetAvancementRecetteForPeriod(periodAvancementRecetteLoadModels, periodRequested, substractMonth: 10);
            var avancementRecetteLoadModel2 = helper.GetAvancementRecetteForPeriod(periodAvancementRecetteLoadModels, periodRequested, substractMonth: 9);
            var avancementRecetteLoadModel3 = helper.GetAvancementRecetteForPeriod(periodAvancementRecetteLoadModels, periodRequested, substractMonth: 8);
            var avancementRecetteLoadModel4 = helper.GetAvancementRecetteForPeriod(periodAvancementRecetteLoadModels, periodRequested, substractMonth: 7);
            var avancementRecetteLoadModel5 = helper.GetAvancementRecetteForPeriod(periodAvancementRecetteLoadModels, periodRequested, substractMonth: 6);
            var avancementRecetteLoadModel6 = helper.GetAvancementRecetteForPeriod(periodAvancementRecetteLoadModels, periodRequested, substractMonth: 5);
            var avancementRecetteLoadModel7 = helper.GetAvancementRecetteForPeriod(periodAvancementRecetteLoadModels, periodRequested, substractMonth: 4);
            var avancementRecetteLoadModel8 = helper.GetAvancementRecetteForPeriod(periodAvancementRecetteLoadModels, periodRequested, substractMonth: 3);
            var avancementRecetteLoadModel9 = helper.GetAvancementRecetteForPeriod(periodAvancementRecetteLoadModels, periodRequested, substractMonth: 2);
            var avancementRecetteLoadModel10 = helper.GetAvancementRecetteForPeriod(periodAvancementRecetteLoadModels, periodRequested, substractMonth: 1);
            var avancementRecetteLoadModel11 = helper.GetAvancementRecetteForPeriod(periodAvancementRecetteLoadModels, periodRequested, substractMonth: 0);

            var result = new ResultYear();
            result.MontantM = GetSumFor(avancementRecetteLoadModel, infoAvancementRecette);
            result.MontantM1 = GetSumFor(avancementRecetteLoadModel1, infoAvancementRecette);
            result.MontantM2 = GetSumFor(avancementRecetteLoadModel2, infoAvancementRecette);
            result.MontantM3 = GetSumFor(avancementRecetteLoadModel3, infoAvancementRecette);
            result.MontantM4 = GetSumFor(avancementRecetteLoadModel4, infoAvancementRecette);
            result.MontantM5 = GetSumFor(avancementRecetteLoadModel5, infoAvancementRecette);
            result.MontantM6 = GetSumFor(avancementRecetteLoadModel6, infoAvancementRecette);
            result.MontantM7 = GetSumFor(avancementRecetteLoadModel7, infoAvancementRecette);
            result.MontantM8 = GetSumFor(avancementRecetteLoadModel8, infoAvancementRecette);
            result.MontantM9 = GetSumFor(avancementRecetteLoadModel9, infoAvancementRecette);
            result.MontantM10 = GetSumFor(avancementRecetteLoadModel10, infoAvancementRecette);
            result.MontantM11 = GetSumFor(avancementRecetteLoadModel11, infoAvancementRecette);

            result.MontantCumul = GetMontantCumul(avancementRecetteLoadModel11, infoAvancementRecette);

            return result;

        }

        public ResultYear CreateRow4C(List<PeriodAvancementRecetteLoadModel> periodAvancementRecetteLoadModels, int periodRequested, InfoAvancementRecette infoAvancementRecette)
        {
            var result = new ResultYear();
            var helper = new AvancementRecetteTimeHelper();

            var avancementRecetteLoadModel = helper.GetAvancementRecetteForPeriod(periodAvancementRecetteLoadModels, periodRequested, substractMonth: 0);

            result.MontantM11 = GetSumFor(avancementRecetteLoadModel, infoAvancementRecette);
            result.MontantCumul = GetMontantCumul(avancementRecetteLoadModel, infoAvancementRecette);

            return result;

        }

        private decimal GetSumFor(AvancementRecetteLoadModel avancementRecetteLoadModel, InfoAvancementRecette infoAvancementRecette)
        {
            if (avancementRecetteLoadModel == null)
            {
                return 0;
            }
            switch (infoAvancementRecette)
            {
                case InfoAvancementRecette.correctif:
                    return avancementRecetteLoadModel.Correctif - avancementRecetteLoadModel.CorrectifPrevious;
                case InfoAvancementRecette.facture:
                    return avancementRecetteLoadModel.TotalAvancementRecette - avancementRecetteLoadModel.TotalAvancementPreviousRecette;
                case InfoAvancementRecette.production:
                    return avancementRecetteLoadModel.TotalAvancementFacture - avancementRecetteLoadModel.TotalAvancementPreviousFacture;

            }
            throw new ArgumentOutOfRangeException("typeList");
        }

        private decimal GetMontantCumul(AvancementRecetteLoadModel avancementRecetteLoadModel, InfoAvancementRecette infoAvancementRecette)
        {
            if (avancementRecetteLoadModel == null)
            {
                return 0;
            }
            switch (infoAvancementRecette)
            {
                case InfoAvancementRecette.correctif:
                    return avancementRecetteLoadModel.Correctif;
                case InfoAvancementRecette.facture:
                    return avancementRecetteLoadModel.MontantMarche + avancementRecetteLoadModel.MontantAvenants +
                    avancementRecetteLoadModel.SommeAValoir + avancementRecetteLoadModel.TravauxSupplementaires +
                    avancementRecetteLoadModel.Revision + avancementRecetteLoadModel.AutresRecettes +
                    avancementRecetteLoadModel.PenalitesEtRetenues;
                case InfoAvancementRecette.production:
                    return avancementRecetteLoadModel.MontantMarche + avancementRecetteLoadModel.MontantAvenants +
                     avancementRecetteLoadModel.SommeAValoir + avancementRecetteLoadModel.TravauxSupplementaires +
                     avancementRecetteLoadModel.Revision + avancementRecetteLoadModel.AutresRecettes +
                     avancementRecetteLoadModel.PenalitesEtRetenues + avancementRecetteLoadModel.Correctif;

            }
            throw new ArgumentOutOfRangeException("typeList");
        }

    }
}
