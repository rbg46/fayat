using MoreLinq;
using Syncfusion.XlsIO;
using System;
using System.Drawing;
using static Fred.Business.CompteExploitation.BilanTechnique.BilanTechniqueExportDescriber;

namespace Fred.Business.CompteExploitation.BilanTechnique
{
    /// <summary>
    /// Classe appliquant les styles à l'export du bilan technique
    /// </summary>
    internal sealed class BilanTechniqueExportStylizer
    {
        private readonly int bulkDataCount;

        /// <summary>
        /// Constructeur du styliste
        /// </summary>
        /// <param name="bulkDataCount">Nombres de ligne dans la source de données injectées dans l'excel</param>
        public BilanTechniqueExportStylizer(int bulkDataCount)
        {
            this.bulkDataCount = bulkDataCount;
        }

        /// <summary>
        /// Applique les styles sur la feuille
        /// </summary>
        /// <param name="sheet">feuille à styliser</param>
        public void ApplyStyleToSheet(IWorksheet sheet)
        {
            SetBulkDataRowsStyles(sheet);
            SetRowTotalStyles(sheet);
            SetRatioAndMontantAndThmRowsStyles(sheet);
            SetSyntheseFinanciereRowsStyles(sheet);
        }

        private void SetSyntheseFinanciereRowsStyles(IWorksheet sheet)
        {
            var syntheseFinanciereRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndSyntheseFinanciere;
            var syntheseFinanciereRange = sheet[$"{ColumnTacheLibelle}{syntheseFinanciereRow}"];
            SetBlockLineTitleStyle(syntheseFinanciereRange);

            CallActionForEachCellInRange(sheet, SetBlockLineTitleStyle, ColumnDadCumules, ColumnEcartsCumules, syntheseFinanciereRow, syntheseFinanciereRow);
            CallActionForEachCellInRange(sheet, SetBlockLineTitleStyle, ColumnDadCourant, ColumnEcartsCourant, syntheseFinanciereRow, syntheseFinanciereRow);

            var ecartNombreHeureRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndEcartNbHeures;
            var ecartNombreHeureRange = sheet[$"{ColumnTacheLibelle}{ecartNombreHeureRow}"];
            ecartNombreHeureRange.BorderAround();

            var ecfartTauxHoraireRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndEcartTauxHoraires;
            var ecartNombreHeureTauxRange = sheet[$"{ColumnTacheLibelle}{ecfartTauxHoraireRow }"];
            ecartNombreHeureTauxRange.BorderAround();

            var totalOfSyntheseFinanciereRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndTotalSyntheseFinanciere;
            CallActionForEachCellInRange(sheet, SetTotalCellStyle, ColumnDadCumules, ColumnEcartsCumules, totalOfSyntheseFinanciereRow, totalOfSyntheseFinanciereRow);
            CallActionForEachCellInRange(sheet, SetTotalCellStyle, ColumnDadCourant, ColumnEcartsCourant, totalOfSyntheseFinanciereRow, totalOfSyntheseFinanciereRow);
            SetRangeNegativeValueRedStyle(GetRange(sheet, ColumnDadCumules, ColumnEcartsCumules, totalOfSyntheseFinanciereRow, totalOfSyntheseFinanciereRow));
            SetRangeNegativeValueRedStyle(GetRange(sheet, ColumnDadCourant, ColumnEcartsCourant, totalOfSyntheseFinanciereRow, totalOfSyntheseFinanciereRow));

            var totalRange = sheet[$"{ColumnTacheLibelle}{totalOfSyntheseFinanciereRow}"];
            SetLineHeaderStyle(totalRange);

            CallActionForEachCellInRange(sheet, BorderAround, ColumnDadCumules, ColumnEcartsCumules, syntheseFinanciereRow, totalOfSyntheseFinanciereRow);
            CallActionForEachCellInRange(sheet, BorderAround, ColumnDadCourant, ColumnEcartsCourant, syntheseFinanciereRow, totalOfSyntheseFinanciereRow);
            SetRangeNegativeValueRedStyle(GetRange(sheet, ColumnDadCumules, ColumnEcartsCumules, syntheseFinanciereRow + 1, totalOfSyntheseFinanciereRow));
            SetRangeNegativeValueRedStyle(GetRange(sheet, ColumnDadCourant, ColumnEcartsCourant, syntheseFinanciereRow + 1, totalOfSyntheseFinanciereRow));
        }

        private void BorderAround(IRange range)
        {
            range.BorderAround();
        }

        private void SetRatioAndMontantAndThmRowsStyles(IWorksheet sheet)
        {
            var ratioRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndRatioBudget;
            var ratioRange = sheet[$"{ColumnTacheLibelle}{ratioRow}"];
            SetLineHeaderStyle(ratioRange);

            CallActionForEachCellInRange(sheet, SetAdditionnalValuesStyle, ColumnDadCumules, ColumnEcartsCumules, ratioRow, ratioRow);
            CallActionForEachCellInRange(sheet, SetAdditionnalValuesStyle, ColumnDadCourant, ColumnEcartsCourant, ratioRow, ratioRow);
            SetRangeNegativeValueRedStyle(GetRange(sheet, ColumnDadCumules, ColumnEcartsCumules, ratioRow, ratioRow));
            SetRangeNegativeValueRedStyle(GetRange(sheet, ColumnDadCourant, ColumnEcartsCourant, ratioRow, ratioRow));

            var montantMoRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndMontantMo;
            var montantMoRange = sheet[$"{ColumnTacheLibelle}{montantMoRow}"];
            SetLineHeaderStyle(montantMoRange);

            var montantBudgetMoValueName = $"{ColumnMontantBudgete}{montantMoRow}";
            var montantBudgetMoValueRange = sheet[montantBudgetMoValueName];
            montantBudgetMoValueRange.BorderAround();
            SetRangeNegativeValueRedStyle(montantBudgetMoValueRange);

            CallActionForEachCellInRange(sheet, SetAdditionnalValuesStyle, ColumnDadCumules, ColumnEcartsCumules, montantMoRow, montantMoRow);
            CallActionForEachCellInRange(sheet, SetAdditionnalValuesStyle, ColumnDadCourant, ColumnEcartsCourant, montantMoRow, montantMoRow);
            SetRangeNegativeValueRedStyle(GetRange(sheet, ColumnDadCumules, ColumnEcartsCumules, montantMoRow, montantMoRow));
            SetRangeNegativeValueRedStyle(GetRange(sheet, ColumnDadCourant, ColumnEcartsCourant, montantMoRow, montantMoRow));

            var tmhRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndThm;
            var tmhRange = sheet[$"{ColumnTacheLibelle}{tmhRow}"];
            SetLineHeaderStyle(tmhRange);

            var montanBudgetThmValueName = $"{ColumnMontantBudgete}{tmhRow}";
            var montantBudgetThmValueRange = sheet[montanBudgetThmValueName];
            montantBudgetThmValueRange.BorderAround();
            SetRangeNegativeValueRedStyle(montantBudgetThmValueRange);

            CallActionForEachCellInRange(sheet, SetAdditionnalValuesStyle, ColumnDadCumules, ColumnEcartsCumules, tmhRow, tmhRow);
            CallActionForEachCellInRange(sheet, SetAdditionnalValuesStyle, ColumnDadCourant, ColumnEcartsCourant, tmhRow, tmhRow);
            SetRangeNegativeValueRedStyle(GetRange(sheet, ColumnDadCumules, ColumnEcartsCumules, tmhRow, tmhRow));
            SetRangeNegativeValueRedStyle(GetRange(sheet, ColumnDadCourant, ColumnEcartsCourant, tmhRow, tmhRow));
        }




        private void SetRowTotalStyles(IWorksheet sheet)
        {
            var totalRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndTotalValues;
            var totalAmountCellName = $"{ColumnTacheLibelle}{totalRow}:{ColumnUniteRessource}{totalRow}";
            var totalAmountCellRange = sheet[totalAmountCellName];
            SetLineHeaderStyle(totalAmountCellRange);

            var totalMontantBudgetName = $"{ColumnMontantBudgete}{totalRow}";
            var totalMontantBudgetRange = sheet[totalMontantBudgetName];
            SetTotalCellStyle(totalMontantBudgetRange);

            var allTotauxCumulesName = $"{ColumnDadCumules}{totalRow}:{ColumnEcartsCumules}{totalRow}";
            var allTotauxCumuleRange = sheet[allTotauxCumulesName];
            SetTotalCellStyle(allTotauxCumuleRange);

            var allTotauxCourantName = $"{ColumnDadCourant}{totalRow}:{ColumnEcartsCourant}{totalRow}";
            var allTotauxCourantRange = sheet[allTotauxCourantName];
            SetTotalCellStyle(allTotauxCourantRange);
        }

        private void SetBulkDataRowsStyles(IWorksheet sheet)
        {
            var bulkDataLastRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndTotalValues - 1;

            CallActionForEachCellInRange(sheet, SetStyleImportantText, ColumnTacheLibelle, ColumnTacheLibelle, BulkDataStartRowInExcel, bulkDataLastRow);
            CallActionForEachCellInRange(sheet, SetStyleSingleCharText, ColumnUniteRessource, ColumnUniteRessource, BulkDataStartRowInExcel, bulkDataLastRow);

            var codeTacheAndUniteRange = sheet[$"{ColumnTacheLibelle}{BulkDataStartRowInExcel}:{ColumnUniteRessource}{bulkDataLastRow}"];
            codeTacheAndUniteRange.BorderAround();


            var allMontantBudgetName = $"{ColumnMontantBudgete}{BulkDataStartRowInExcel}:{ColumnMontantBudgete}{bulkDataLastRow}";
            var allMontantBudgetRange = sheet[allMontantBudgetName];
            SetMontantStyle(allMontantBudgetRange);

            var allMontantCumulesName = $"{ColumnDadCumules}{BulkDataStartRowInExcel}:{ColumnEcartsCumules}{bulkDataLastRow}";
            var allMontantCumulesRange = sheet[allMontantCumulesName];
            SetMontantStyle(allMontantCumulesRange);

            var allMontantCourantName = $"{ColumnDadCourant}{BulkDataStartRowInExcel}:{ColumnEcartsCourant}{bulkDataLastRow}";
            var allMontantCourantRange = sheet[allMontantCourantName];
            SetMontantStyle(allMontantCourantRange);
        }


        /// <summary>
        /// Applique le style font color rouge pour les cellules comportant des valeurs négatives
        /// </summary>
        /// <param name="range">range a traiter</param>
        private void SetRangeNegativeValueRedStyle(IRange range)
        {
            foreach (var cell in range.Cells)
            {
                double value;
                if (double.TryParse(cell.CalculatedValue, out value) && value < 0)
                {
                    cell.CellStyle.Font.RGBColor = Color.Red;
                }
            }
        }


        /// <summary>
        /// Applique le style associé aux montant a la Range passée en paramètre
        /// </summary>
        /// <param name="range">Range sur laquelle on applique le style</param>
        private void SetMontantStyle(IRange range)
        {
            range.BorderAround();
            range.HorizontalAlignment = ExcelHAlign.HAlignRight;
            SetRangeNegativeValueRedStyle(range);
        }

        /// <summary>
        /// Applique le style associé aux textes importants sur la range passée en paramètre
        /// </summary>
        /// <param name="range">range sur laquelle on applique le style</param>
        private void SetStyleImportantText(IRange range)
        {
            range.HorizontalAlignment = ExcelHAlign.HAlignLeft;
            range.CellStyle.Font.Bold = true;
        }

        private void SetStyleSingleCharText(IRange range)
        {
            range.HorizontalAlignment = ExcelHAlign.HAlignCenter;
        }

        /// <summary>
        /// Applique le style associé aux cellules considérées comme des entetes ed ligne
        /// </summary>
        /// <param name="range">range sur laquelle on applique le style</param>
        private void SetLineHeaderStyle(IRange range)
        {
            range.CellStyle.Color = Color.FromArgb(180, 198, 231);
            range.CellStyle.Font.Bold = true;
            range.BorderAround();
        }

        /// <summary>
        /// Applique le style associé aux cellules considérées contenant des totaux
        /// </summary>
        /// <param name="range">range sur laquelle on applique le style</param>
        private void SetTotalCellStyle(IRange range)
        {
            range.CellStyle.Color = Color.FromArgb(217, 217, 217);
            range.CellStyle.Font.Bold = true;
            range.BorderAround();
            SetRangeNegativeValueRedStyle(range);
        }

        /// <summary>
        /// Applique le style associé aux cellules considérées comme contenant des valeurs additionnelle (En dehors de la "liste" de valeurs)
        /// </summary>
        /// <param name="range">range sur laquelle on applique le style</param>
        private void SetAdditionnalValuesStyle(IRange range)
        {
            range.BorderAround();
        }


        /// <summary>
        /// Applique le style associé aux cellules considérées comme etant des titres d'un bloc de cellules
        /// </summary>
        /// <param name="range">range sur laquelle on applique le style</param>
        private void SetBlockLineTitleStyle(IRange range)
        {
            range.CellStyle.Color = Color.FromArgb(48, 84, 150);
            range.CellStyle.Font.Bold = true;
            range.CellStyle.Font.Color = ExcelKnownColors.White;
            range.BorderAround();
        }

        private void CallActionForEachCellInRange(IWorksheet sheet, Action<IRange> action, char firstColumnOfRange, char lastColumnOfRange, int firstRowOfRange, int lastRowOfRange)
        {
            var range = GetRange(sheet, firstColumnOfRange, lastColumnOfRange, firstRowOfRange, lastRowOfRange);
            range.Cells.ForEach(cell => action(cell));
        }

        private IRange GetRange(IWorksheet sheet, char firstColumnOfRange, char lastColumnOfRange, int firstRowOfRange, int lastRowOfRange)
        {
            var name = $"{firstColumnOfRange}{firstRowOfRange}:{lastColumnOfRange}{lastRowOfRange}";
            return sheet[name];
        }
    }
}
