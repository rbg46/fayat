using Fred.Business.Budget.Helpers;
using Fred.Business.Images;
using Fred.Business.Utilisateur;
using Fred.DataAccess.Interfaces;
using Fred.Entities;
using Fred.Entities.CI;
using Fred.Entities.ReferentielFixe;
using Fred.Framework.Extensions;
using Fred.Framework.Reporting;
using Fred.Web.Shared.App_LocalResources;
using Fred.Web.Shared.Models.CompteExploitation.BilanTechnique;
using Syncfusion.XlsIO;
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using static Fred.Business.CompteExploitation.BilanTechnique.BilanTechniqueExportDescriber;

namespace Fred.Business.CompteExploitation.BilanTechnique
{
    /// <summary>
    /// Implementation de l'export du bilan technique
    /// </summary>
    public class BilanTechniqueExportManager : ManagersAccess, IBilanTechniqueExportManager
    {
        private const string ExcelTemplate = "Templates/BilanTechnique/TemplateBilanTechnique.xls";
        private int bulkDataCount = 0;
        private int ciId = 0;
        private int periode = 0;
        private RessourceType ressourceType;
        private int ressourceId;
        private BilanTechniqueExportModel dataToExport;
        private readonly IPersonnelRepository personnelRepository;
        private readonly IImageManager imageManager;
        private readonly IUtilisateurManager utilisateurManager;
        private readonly IBilanTechniqueExportDataManager bilanTechniqueExportDataManager;

        /// <summary>
        /// Constructeur de la classe
        /// </summary>
        /// <param name="personnelRepository">Repo du Personnel</param>
        /// <param name="imageManager">Gestionnaire image</param>
        /// <param name="utilisateurManager">Gestionnaire utilisateur</param>
        public BilanTechniqueExportManager(
            IPersonnelRepository personnelRepository,
            IImageManager imageManager,
            IUtilisateurManager utilisateurManager,
            IBilanTechniqueExportDataManager bilanTechniqueExportDataManager)
        {
            this.personnelRepository = personnelRepository;
            this.imageManager = imageManager;
            this.utilisateurManager = utilisateurManager;
            this.bilanTechniqueExportDataManager = bilanTechniqueExportDataManager;
        }

        /// <summary>
        /// Représente la dernière ligne excel (basé sur 1) contenant des données
        /// </summary>
        private int BulkDataLastExcelRow => BulkDataStartRowInExcel + bulkDataCount - 1;

        public async Task<byte[]> GetExportBilanTechniqueAsync(LoadBilanTechniqueExportModel model)
        {
            dataToExport = await bilanTechniqueExportDataManager.GetExportBilanDataAsync(model).ConfigureAwait(false);
            bulkDataCount = dataToExport.BulkData.Count();
            if (bulkDataCount == 0)
            {
                return new byte[0];
            }
            ciId = model.CiId;
            periode = model.Periode;
            ressourceType = model.RessourceType;
            ressourceId = model.RessourceId;
            using (var excelFormat = new ExcelFormat())
            {
                byte[] excelByte = model.IsPdfConverted ?
                    excelFormat.GeneratePdfFromExcel(AppDomain.CurrentDomain.BaseDirectory + ExcelTemplate, dataToExport.BulkData, CustomWorkBook) :
                    excelFormat.GenerateExcel(AppDomain.CurrentDomain.BaseDirectory + ExcelTemplate, dataToExport.BulkData, CustomWorkBook);
                var memoryStream = new MemoryStream(excelByte);
                return memoryStream.ToArray();
            }
        }

        private void CustomWorkBook(IWorkbook workbook)
        {
            var sheet = workbook.Worksheets[0];
            sheet.DisableSheetCalculations();

            SetText(sheet);
            SetTotal(sheet);
            SetEcartFormula(sheet);
            SetTmoValues(sheet);
            SetSyntheseFinanciereFormula(sheet, ColumnDadCumules, ColumnDepensesCumules, ColumnEcartsCumules);
            SetSyntheseFinanciereFormula(sheet, ColumnDadCourant, ColumnDepensesCourant, ColumnEcartsCourant);
            sheet.EnableSheetCalculations();
            var stylizer = new BilanTechniqueExportStylizer(bulkDataCount);
            stylizer.ApplyStyleToSheet(sheet);

            using (var excelFormat = new ExcelFormat())
            {
                var utilisateurId = utilisateurManager.GetContextUtilisateurId();
                var editeur = personnelRepository.GetPersonnelPourExportExcelHeader(utilisateurId);


                excelFormat.AddLogoSociete(editeur.SocieteId != null ? AppDomain.CurrentDomain.BaseDirectory + imageManager.GetLogoImage(editeur.SocieteId.Value).Path : null, sheet);
            }
        }

        private void SetTmoValues(IWorksheet sheet)
        {
            var montantTmoRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndMontantMo;
            sheet[$"{ColumnDadCumules}{montantTmoRow}"].Number = dataToExport.MontantMoDadCumule;
            sheet[$"{ColumnDepensesCumules}{montantTmoRow}"].Number = dataToExport.MontantMoDepensesCumules;
            sheet[$"{ColumnDadCourant}{montantTmoRow}"].Number = dataToExport.MontantMoDadCourant;
            sheet[$"{ColumnDepensesCourant}{montantTmoRow}"].Number = dataToExport.MontantMoDepensesCourantes;
            sheet[$"{ColumnMontantBudgete}{montantTmoRow}"].Number = dataToExport.MontantMoBudget;
        }

        private void SetSyntheseFinanciereFormula(IWorksheet sheet, char columnDad, char columnDepense, char columnEcart)
        {
            var ecartNbrHeuresRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndEcartNbHeures;
            var totalRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndTotalValues;
            var ecartNbHeuresRange = sheet[$"{columnDad}{ecartNbrHeuresRow}"];
            ecartNbHeuresRange.Formula = $"{columnEcart}{totalRow}";

            var ecartTauxHoraireRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndEcartTauxHoraires;
            var ecartTauxHoraireRange = sheet[$"{columnDad}{ecartTauxHoraireRow}"];
            ecartTauxHoraireRange.Formula = $"{columnDepense}{totalRow}";

            var montantThmRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndThm;
            var tauxEcartNbHeuresRange = sheet[$"{columnDepense}{ecartNbrHeuresRow}"];
            tauxEcartNbHeuresRange.Formula = $"{columnDad}{montantThmRow}";

            var tauxEcartTauxHoraireRange = sheet[$"{columnDepense}{ecartTauxHoraireRow}"];
            tauxEcartTauxHoraireRange.Formula = $"{columnEcart}{montantThmRow}";

            var montantEcartNbHeuresRange = sheet[$"{columnEcart}{ecartNbrHeuresRow}"];
            montantEcartNbHeuresRange.Formula = $"{columnDad}{ecartNbrHeuresRow}*{columnDepense}{ecartNbrHeuresRow}";

            var montantTauxEcartTauxHoraireRange = sheet[$"{columnEcart}{ecartTauxHoraireRow}"];
            montantTauxEcartTauxHoraireRange.Formula = $"{columnDad}{ecartTauxHoraireRow}*{columnDepense}{ecartTauxHoraireRow}";

            var totalSyntheseFinanciereRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndTotalSyntheseFinanciere;
            var totalSyntheseFinanciereCumuleRange = sheet[$"{columnEcart}{totalSyntheseFinanciereRow}"];
            totalSyntheseFinanciereCumuleRange.Formula = $"SUM({columnEcart}{ecartNbrHeuresRow}:{columnEcart}{ecartTauxHoraireRow})";
        }

        /// <summary>
        /// Cette fonction rempli certaines cellules de l'export avec le texte qui convient
        /// e.g la première cellule de la lligne contenant les totaux contiendra le titre : Total des valeurs
        /// </summary>
        /// <param name="sheet">feuille excel</param>
        private void SetText(IWorksheet sheet)
        {
            string perimetre = GetPerimetreLibelle();
            sheet[PerimetreExcelRange].Text = FeatureRapport.Rapport_Search_Perimetre + ": " + perimetre;

            CIEnt ci = Managers.CI.FindById(ciId);
            var ciLibelle = $"{FredResource.Global_CI} : {ci.Code} - {ci.Libelle}";
            sheet[CiLibelleExcelRange].Text = ciLibelle;

            var dateTimePeriode = PeriodeHelper.ToFirstDayOfMonthDateTime(periode).Value;
            var ciInfoAndPeriode = $"{FredResource.Global_Period} : {dateTimePeriode.ToString("Y")}";
            sheet[PeriodeExcelRange].Text = ciInfoAndPeriode;

            var utilisateurConnecte = Managers.Utilisateur.GetContextUtilisateur();
            var editedByText = FeatureExportExcel.EditePar + ' ' + utilisateurConnecte.PrenomNom;
            sheet[EditedByExcelRange].Text = editedByText;

            var dateEdition = DateTime.Now.ToString("g");
            sheet[DateEditionExcelRange].Text = FeatureExportExcel.DateEdition + ' ' + dateEdition;

            var rowTotalQuantite = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndTotalValues;
            sheet[$"{ColumnTacheLibelle}{rowTotalQuantite}"].Text = FeatureExportBilanTechnique.BilanTechniqueTotalQuantite;

            var rowRatioBudget = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndRatioBudget;
            sheet[$"{ColumnTacheLibelle}{rowRatioBudget}"].Text = FeatureExportBilanTechnique.BilanTechniqueRatioBudget;

            var rowMontantMo = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndMontantMo;
            sheet[$"{ColumnTacheLibelle}{rowMontantMo}"].Text = FeatureExportBilanTechnique.BilanTechniqueMontantMoEuro;

            var rowThm = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndThm;
            sheet[$"{ColumnTacheLibelle}{rowThm}"].Text = FeatureExportBilanTechnique.BilanTechniqueThm;

            var rowSyntheseFinanciere = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndSyntheseFinanciere;
            sheet[$"{ColumnTacheLibelle}{rowSyntheseFinanciere}"].Text = FeatureExportBilanTechnique.BilanTechniqueSyntheseFinanciere;

            sheet[$"{ColumnDadCumules}{rowSyntheseFinanciere}"].Text = FredResource.Heures_lb;
            sheet[$"{ColumnDepensesCumules}{rowSyntheseFinanciere}"].Text = FredResource.Taux_lb;
            sheet[$"{ColumnEcartsCumules}{rowSyntheseFinanciere}"].Text = FredResource.Montant_lb;

            sheet[$"{ColumnDadCourant}{rowSyntheseFinanciere}"].Text = FredResource.Heures_lb;
            sheet[$"{ColumnDepensesCourant}{rowSyntheseFinanciere}"].Text = FredResource.Taux_lb;
            sheet[$"{ColumnEcartsCourant}{rowSyntheseFinanciere}"].Text = FredResource.Montant_lb;

            var rowEcartNbHeure = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndEcartNbHeures;
            sheet[$"{ColumnTacheLibelle}{rowEcartNbHeure}"].Text = FeatureExportBilanTechnique.BilanTechniqueEcartNbHeuresEuro;

            var rowEcartTauxHoraire = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndEcartTauxHoraires;
            sheet[$"{ColumnTacheLibelle}{rowEcartTauxHoraire}"].Text = FeatureExportBilanTechnique.BilanTechniqueEcartTauxHoraireEuro;

            var rowTotalSyntheseFinanciere = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndTotalSyntheseFinanciere;
            sheet[$"{ColumnTacheLibelle}{rowTotalSyntheseFinanciere}"].Text = FredResource.Total_lb;
        }

        private string GetPerimetreLibelle()
        {
            var perimetre = string.Empty;
            ChapitreEnt chapitre;
            SousChapitreEnt sousChapitre;
            switch (ressourceType)
            {
                case RessourceType.Chapitre:
                    chapitre = Managers.ReferentielFixe.GetChapitreById(ressourceId);
                    return chapitre.Code + " - " + chapitre.Libelle;
                case RessourceType.SousChaptre:
                    sousChapitre = Managers.ReferentielFixe.GetSousChapitreById(ressourceId);
                    return sousChapitre.Code + " - " + sousChapitre.Libelle;
                case RessourceType.Ressource:
                    RessourceEnt ressource = Managers.ReferentielFixe.GetRessourceById(ressourceId);
                    return ressource.Code + " - " + ressource.Libelle;
                default: return perimetre;
            }
        }

        private void SetTotal(IWorksheet sheet)
        {
            sheet.DisableSheetCalculations();
            SetFormulaSomme(sheet, ColumnMontantBudgete);

            SetFormulaSomme(sheet, ColumnDadCumules);
            SetFormulaSomme(sheet, ColumnDepensesCumules);
            SetFormulaSomme(sheet, ColumnEcartsCumules);

            SetFormulaSomme(sheet, ColumnDadCourant);
            SetFormulaSomme(sheet, ColumnDepensesCourant);
            SetFormulaSomme(sheet, ColumnEcartsCourant);

            SetRatioBudgetFormula(sheet, ColumnDadCumules);
            SetRatioBudgetFormula(sheet, ColumnDepensesCumules);
            SetRatioBudgetFormula(sheet, ColumnEcartsCumules);

            SetRatioBudgetFormula(sheet, ColumnDadCourant);
            SetRatioBudgetFormula(sheet, ColumnDepensesCourant);
            SetRatioBudgetFormula(sheet, ColumnEcartsCourant);

            SetThmFormula(sheet, ColumnMontantBudgete);

            SetThmFormula(sheet, ColumnDadCumules);
            SetThmFormula(sheet, ColumnDepensesCumules);
            SetThmFormula(sheet, ColumnEcartsCumules);

            SetThmFormula(sheet, ColumnDadCourant);
            SetThmFormula(sheet, ColumnDepensesCourant);
            SetThmFormula(sheet, ColumnEcartsCourant);
        }

        private void SetRatioBudgetFormula(IWorksheet sheet, char column)
        {
            var totalRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndTotalValues;
            var formula = $"IF({ColumnMontantBudgete}{totalRow},{column}{totalRow}/{ColumnMontantBudgete}{totalRow},0)";

            var rowRatioBudget = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndRatioBudget;
            var ratioFormulaRange = sheet[$"{column}{rowRatioBudget}"];
            ratioFormulaRange.Formula = formula;
        }

        private void SetThmFormula(IWorksheet sheet, char column)
        {
            var rowMontantMo = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndMontantMo;
            var totalRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndTotalValues;
            var formula = $"IF({column}{totalRow},{ column}{rowMontantMo}/{column}{totalRow},0)";

            var rowThm = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndThm;
            var ratioFormulaRange = sheet[$"{column}{rowThm}"];
            ratioFormulaRange.Formula = formula;
        }

        private void SetFormulaSomme(IWorksheet sheet, char column)
        {
            var formula = $"SUM({column}{BulkDataStartRowInExcel}:{column}{BulkDataLastExcelRow})";
            var range = $"{column}{BulkDataLastExcelRow + 1}";
            sheet[range].Formula = formula;
        }

        private void SetEcartFormula(IWorksheet sheet)
        {
            sheet.DisableSheetCalculations();
            sheet.Range[ComputeRange(ColumnEcartsCumules)].Cells.ForEach(cells => cells.Formula = $"{ColumnDadCumules}{cells.Row} - {ColumnDepensesCumules}{cells.Row}");
            sheet.Range[ComputeRange(ColumnEcartsCourant)].Cells.ForEach(cells => cells.Formula = $"{ColumnDadCourant}{cells.Row} - {ColumnDepensesCourant}{cells.Row}");

            var montantMoRow = BulkDataStartRowInExcel + bulkDataCount + GapBetweenBulkDataAndMontantMo;
            sheet[$"{ColumnEcartsCumules}{montantMoRow}"].Formula = $"{ColumnDadCumules}{montantMoRow}-{ColumnDepensesCumules}{montantMoRow}";
            sheet[$"{ColumnEcartsCourant}{montantMoRow}"].Formula = $"{ColumnDadCourant}{montantMoRow}-{ColumnDepensesCourant}{montantMoRow}";
        }

        private string ComputeRange(char column)
        {
            return $"{column}{BulkDataStartRowInExcel}:{column}{BulkDataLastExcelRow}";
        }
    }
}
