using System.Collections.Generic;
using System.Linq;
using Fred.Business.CompteExploitation.TableauSynthese.Models;
using Fred.Business.CompteExploitation.TableauSynthese.Services.Rows;
using Fred.Business.CompteExploitation.TableauSynthese.Services.Rows.Helpers;
using Fred.Web.Shared.Models.CompteExploitation.TableauSynthese;
namespace Fred.Business.CompteExploitation.TableauSynthese.Services
{
    public class TableauSyntheseTotalDebourseService : ITableauSyntheseTotalDebourseService
    {
        private readonly ITableauSyntheseCalculatedFieldsService tableauSyntheseCalculatedFieldsService;

        public TableauSyntheseTotalDebourseService(ITableauSyntheseCalculatedFieldsService tableauSyntheseCalculatedFieldsService)
        {
            this.tableauSyntheseCalculatedFieldsService = tableauSyntheseCalculatedFieldsService;
        }

        public TableauSyntheseDepenseExportModel GetDepensesTotalExportData(TableauSyntheseLoadExportModel model, IEnumerable<TableauSyntheseDepenseExportModel> depenses)
        {
            var axeHelper = new AxeHelper();
            var topAxe = axeHelper.GetOrderedAxeList(model.AxeDirection, model.Axes).FirstOrDefault();
            var topAxeDepenses = depenses.Where(x => x.AxeGroup == topAxe);

            var tableauSyntheseDepenseExportModel = new TableauSyntheseDepenseExportModel
            {
                MontantBudget = topAxeDepenses.Sum(x => x.MontantBudget),
                MoisMontantAvancement = topAxeDepenses.Sum(x => x.MoisMontantAvancement),
                MoisMontantAvancementPrevious = topAxeDepenses.Sum(x => x.MoisMontantAvancementPrevious),
                MoisMontantComptabilise = topAxeDepenses.Sum(x => x.MoisMontantComptabilise),
                MoisMontantComptabilisePrevious = topAxeDepenses.Sum(x => x.MoisMontantComptabilisePrevious),
                MoisMontantCorrectif = topAxeDepenses.Sum(x => x.MoisMontantCorrectif),
                MoisMontantCorrectifPrevious = topAxeDepenses.Sum(x => x.MoisMontantCorrectifPrevious),
                FinAffaireAjustementRad = topAxeDepenses.Sum(x => x.FinAffaireAjustementRad),
                FinAffaireAjustementRadPrevious = topAxeDepenses.Sum(x => x.FinAffaireAjustementRadPrevious)
            };

            tableauSyntheseCalculatedFieldsService.ComputeFields(new List<TableauSyntheseDepenseExportModel>() { tableauSyntheseDepenseExportModel });

            return tableauSyntheseDepenseExportModel;
        }

    }
}
