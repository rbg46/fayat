using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Fred.Business.CompteExploitation.Helpers;
using Fred.Business.CompteExploitation.TableauSynthese.Interfaces;
using Fred.Business.CompteExploitation.TableauSynthese.Models;
using Fred.Business.ExplorateurDepense;
using Fred.Web.Shared.Models.CompteExploitation.TableauSynthese;
namespace Fred.Business.CompteExploitation.TableauSynthese.Services.Rows
{
    public class TableauSyntheseRowsComptabilisesService : ITableauSyntheseRowsComptabilisesService
    {
        private readonly IExplorateurDepenseManager explorateurDepenseManager;

        public TableauSyntheseRowsComptabilisesService(IExplorateurDepenseManager explorateurDepenseManager)
        {
            this.explorateurDepenseManager = explorateurDepenseManager;
        }

        public async Task<List<ExplorateurAxe>> GetRowsComptabiliseForMonthDataAsync(TableauSyntheseLoadExportModel model)
        {
            if (model == null)
                throw new ArgumentNullException(nameof(model));

            var periodFin = PeriodHelper.CreatePeriodFin(model.Periode);

            var explorateurAxeFlatten = await GetRowsComptabiliseDataAsync(periodFin, model).ConfigureAwait(false);

            return explorateurAxeFlatten;
        }

        public async Task<List<ExplorateurAxe>> GetRowsComptabiliseForPreviousMonthDataAsync(TableauSyntheseLoadExportModel model)
        {
            if (model == null)
                throw new ArgumentNullException(nameof(model));

            var periodFinM1 = PeriodHelper.CreatePeriodFinM1(model.Periode);

            var explorateurAxeFlatten = await GetRowsComptabiliseDataAsync(periodFinM1, model).ConfigureAwait(false);

            return explorateurAxeFlatten;
        }

        private async Task<List<ExplorateurAxe>> GetRowsComptabiliseDataAsync(DateTime periodFin, TableauSyntheseLoadExportModel model)
        {
            if (model == null)
                throw new System.ArgumentNullException(nameof(model));

            var filterComptabilise = new SearchExplorateurDepense
            {
                CiId = model.CiId,
                PeriodeFin = periodFin,
                AxeAnalytique = FilterHelpers.GetAxeAnalytique(model.AxeDirection),
                AxePrincipal = FilterHelpers.GetAxePrincipal(model.AxeDirection, model.Axes),
                AxeSecondaire = FilterHelpers.GetAxeSecondaire(model.AxeDirection, model.Axes),
                TakeFacturation = true,
                TakeValorisation = true
            };

            IEnumerable<ExplorateurAxe> explorateurAxeComptabilise = await explorateurDepenseManager.GetAsync(filterComptabilise).ConfigureAwait(false);

            List<ExplorateurAxe> explorateurAxeFlatten = explorateurAxeComptabilise.ToList().FlattenExplorateurAxes();

            return explorateurAxeFlatten;
        }

        public void MapMoisMontantComptabilise(List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels, List<ExplorateurAxe> explorateurAxeComptabiliseFlatten)
        {
            if (explorateurAxeComptabiliseFlatten == null)
                throw new System.ArgumentNullException(nameof(explorateurAxeComptabiliseFlatten));

            if (tableauSyntheseDepenseExportModels == null)
                throw new ArgumentNullException(nameof(tableauSyntheseDepenseExportModels));

            CleanAllMoisMontantComptabilise(tableauSyntheseDepenseExportModels);

            SetMoisMontantComptabilise(tableauSyntheseDepenseExportModels, explorateurAxeComptabiliseFlatten);
        }



        public void MapMoisMontantComptabilisePrevious(List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels, List<ExplorateurAxe> explorateurAxeComptabilisePreviousFlatten)
        {
            if (explorateurAxeComptabilisePreviousFlatten == null)
                throw new System.ArgumentNullException(nameof(explorateurAxeComptabilisePreviousFlatten));

            if (tableauSyntheseDepenseExportModels == null)
                throw new ArgumentNullException(nameof(tableauSyntheseDepenseExportModels));

            CleanAllMoisMontantComptabilisePrevious(tableauSyntheseDepenseExportModels);

            SetMoisMontantComptabilisePrevious(tableauSyntheseDepenseExportModels, explorateurAxeComptabilisePreviousFlatten);
        }


        private void CleanAllMoisMontantComptabilise(List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels)
        {
            foreach (var tableauSyntheseDepenseExportModel in tableauSyntheseDepenseExportModels)
            {
                tableauSyntheseDepenseExportModel.MoisMontantComptabilise = 0;
            }
        }

        private void CleanAllMoisMontantComptabilisePrevious(List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels)
        {
            foreach (var tableauSyntheseDepenseExportModel in tableauSyntheseDepenseExportModels)
            {
                tableauSyntheseDepenseExportModel.MoisMontantComptabilisePrevious = 0;
            }
        }


        private void SetMoisMontantComptabilise(List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels, List<ExplorateurAxe> explorateurAxeComptabiliseFlatten)
        {
            Dictionary<string, TableauSyntheseDepenseExportModel> dico = tableauSyntheseDepenseExportModels.ToDictionary(x => x.GetIdentifier());

            foreach (ExplorateurAxe explorateurAxe in explorateurAxeComptabiliseFlatten)
            {
                var explorateurAxeKey = explorateurAxe.GetIdentifier();

                var tableauSyntheseDepenseExportModel = dico[explorateurAxeKey];

                tableauSyntheseDepenseExportModel.MoisMontantComptabilise = explorateurAxe.MontantHT;
            }
        }
        private void SetMoisMontantComptabilisePrevious(List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels, List<ExplorateurAxe> explorateurAxeComptabiliseFlatten)
        {
            Dictionary<string, TableauSyntheseDepenseExportModel> dico = tableauSyntheseDepenseExportModels.ToDictionary(x => x.GetIdentifier());

            foreach (ExplorateurAxe explorateurAxe in explorateurAxeComptabiliseFlatten)
            {
                var explorateurAxeKey = explorateurAxe.GetIdentifier();

                var tableauSyntheseDepenseExportModel = dico[explorateurAxeKey];

                tableauSyntheseDepenseExportModel.MoisMontantComptabilisePrevious = explorateurAxe.MontantHT;
            }
        }
    }
}
