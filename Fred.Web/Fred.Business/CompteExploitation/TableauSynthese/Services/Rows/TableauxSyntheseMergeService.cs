using System.Collections.Generic;
using System.Linq;
using Fred.Business.CompteExploitation.TableauSynthese.Models;
using Fred.Business.ExplorateurDepense;

namespace Fred.Business.CompteExploitation.TableauSynthese.Services
{
    public class TableauxSyntheseMergeService : ITableauxSyntheseMergeService
    {
        public List<TableauSyntheseDepenseFlatModel> MergeAxesToFlatModels(List<TableauSyntheseDepenseFlatModel> flatModels, params List<ExplorateurAxe>[] explorateurAxesArray)
        {
            if (explorateurAxesArray == null)
                throw new System.ArgumentNullException(nameof(explorateurAxesArray));

            var allFlatModels = flatModels.ToList();

            foreach (var explorateurAxes in explorateurAxesArray)
            {
                var notExistingFlatModels = GetNotExistingFlatModels(allFlatModels, explorateurAxes);

                allFlatModels = allFlatModels.Concat(notExistingFlatModels).ToList();
            }
            return allFlatModels;
        }

        public List<TableauSyntheseDepenseFlatModel> GetNotExistingFlatModels(List<TableauSyntheseDepenseFlatModel> allFlatModels, List<ExplorateurAxe> explorateurAxesForComptabilises)
        {
            if (allFlatModels == null)
                throw new System.ArgumentNullException(nameof(allFlatModels));

            if (explorateurAxesForComptabilises == null)
                throw new System.ArgumentNullException(nameof(explorateurAxesForComptabilises));

            var result = new List<TableauSyntheseDepenseFlatModel>();

            foreach (ExplorateurAxe explorateurAxe in explorateurAxesForComptabilises)
            {
                var firstDepenseGenerique = explorateurAxe.Depenses.First();

                var tacheId = firstDepenseGenerique.TacheId;

                var tache = firstDepenseGenerique.Tache;

                var ressourceId = firstDepenseGenerique.RessourceId;

                var ressource = firstDepenseGenerique.Ressource;

                var existInAllFlatModels = allFlatModels.Exists(x => x.RessourceId == ressourceId && x.Tache3Id == tacheId);

                var existInCurrentResult = result.Exists(x => x.RessourceId == ressourceId && x.Tache3Id == tacheId);

                if (!existInAllFlatModels && !existInCurrentResult)
                {

                    result.Add(new TableauSyntheseDepenseFlatModel()
                    {
                        Tache3Id = tacheId,
                        Tache3 = tache,
                        RessourceId = ressourceId,
                        Ressource = ressource,
                    });
                }
            }
            return result;
        }
    }
}






