using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Fred.Business.Budget;
using Fred.Business.Budget.Avancement;
using Fred.Business.Budget.Helpers;
using Fred.Business.Budget.Mapper;
using Fred.Business.CompteExploitation.TableauSynthese.Interfaces;
using Fred.Business.CompteExploitation.TableauSynthese.Models;
using Fred.Business.CompteExploitation.TableauSynthese.Services.Rows;
using Fred.Business.CompteExploitation.TableauSynthese.Services.Rows.Helpers;
using Fred.Business.Depense;
using Fred.Business.Depense.Services;
using Fred.Business.ExplorateurDepense;
using Fred.DataAccess.Referential.Common;
using Fred.Entities.Budget;
using Fred.Entities.Budget.Avancement;
using Fred.Web.Shared.Models.Budget.Depense;
using Fred.Web.Shared.Models.CompteExploitation.TableauSynthese;

namespace Fred.Business.CompteExploitation.TableauSynthese.Services
{
    public class TableauSyntheseRowsProviderService : ITableauSyntheseRowsProviderService
    {

        private readonly IAvancementManager avancementManager;
        private readonly IControleBudgetaireManager controleBudgetaireManager;
        private readonly IDepenseServiceMediator depenseServiceMediator;
        private readonly IBudgetT4Manager budgetT4Manager;
        private readonly ITacheSearchHelper taskSearchHelper;
        private readonly ITableauSyntheseRowsComptabilisesService tableauSyntheseRowsComptabilisesService;
        private readonly ITableauSyntheseRowsCorrectifService tableauSyntheseRowsCorrectifService;
        private readonly ITableauxSyntheseMergeService tableauxSyntheseMergeService;
        private readonly ITableauSyntheseCalculatedFieldsService tableauSyntheseRowsCalculatedFieldsService;

        public TableauSyntheseRowsProviderService(

            IAvancementManager avancementManager,
            IControleBudgetaireManager controleBudgetaireManager,
            IDepenseServiceMediator depenseServiceMediator,
            IBudgetT4Manager budgetT4Manager,
            ITableauxSyntheseMergeService tableauxSyntheseMergeService,
            ITableauSyntheseRowsComptabilisesService tableauSyntheseRowsComptabilisesService,
            ITableauSyntheseRowsCorrectifService tableauSyntheseRowsCorrectifService,
            ITableauSyntheseCalculatedFieldsService tableauSyntheseRowsCalculatedFieldsService,
            ITacheSearchHelper taskSearchHelper)
        {
            this.avancementManager = avancementManager;
            this.controleBudgetaireManager = controleBudgetaireManager;
            this.depenseServiceMediator = depenseServiceMediator;
            this.budgetT4Manager = budgetT4Manager;
            this.taskSearchHelper = taskSearchHelper;
            this.tableauSyntheseRowsComptabilisesService = tableauSyntheseRowsComptabilisesService;
            this.tableauSyntheseRowsCorrectifService = tableauSyntheseRowsCorrectifService;
            this.tableauxSyntheseMergeService = tableauxSyntheseMergeService;
            this.tableauSyntheseRowsCalculatedFieldsService = tableauSyntheseRowsCalculatedFieldsService;
        }
        public async Task<List<TableauSyntheseDepenseExportModel>> GetDepensesExportDataAsync(TableauSyntheseLoadExportModel model, int budgetId)
        {
            int? periodePrevious = PeriodeHelper.GetPreviousPeriod(model.Periode);
            List<BudgetDepenseModel> depenseList = await GetDepensesAsync(model.CiId, model.Periode).ConfigureAwait(false);
            IEnumerable<BudgetSousDetailEnt> sdList = budgetT4Manager.GetByBudgetId(budgetId, loadSousDetails: true).SelectMany(b => b.BudgetSousDetails);
            IEnumerable<AvancementEnt> avancementsCumule = avancementManager.GetAllAvancementCumuleForBudgetAndPeriode(budgetId, model.Periode);
            IEnumerable<ControleBudgetaireValeursEnt> controleBudgetaireValeurs = controleBudgetaireManager.GetControleBudgetaireValeurs(budgetId, model.Periode);
            IEnumerable<AvancementEnt> avancementsCumulePrevious = Enumerable.Empty<AvancementEnt>();
            IEnumerable<ControleBudgetaireValeursEnt> controleBudgetaireValeursPrevious = Enumerable.Empty<ControleBudgetaireValeursEnt>();
            IEnumerable<BudgetDepenseModel> depenseListPrevious = new List<BudgetDepenseModel>();
            IEnumerable<BudgetSousDetailEnt> sdListPrevious = new List<BudgetSousDetailEnt>();

            if (periodePrevious.HasValue)
            {
                // chargement des données du budget de la période précédente, le budget peut etre différent pour la période précédente si le controle budgétaire a été validé
                BudgetEnt budgetPrevious = controleBudgetaireManager.GetBudgetForCiAndPeriode(model.CiId, periodePrevious.Value);
                avancementsCumulePrevious = avancementManager.GetAllAvancementCumuleForBudgetAndPeriode(budgetPrevious.BudgetId, periodePrevious.Value);
                controleBudgetaireValeursPrevious = controleBudgetaireManager.GetControleBudgetaireValeurs(budgetPrevious.BudgetId, periodePrevious.Value);
                depenseListPrevious = await GetDepensesAsync(model.CiId, periodePrevious.Value).ConfigureAwait(false);
                if (budgetPrevious != null && budgetPrevious.BudgetId != budgetId)
                {
                    sdListPrevious = budgetT4Manager.GetByBudgetId(budgetPrevious.BudgetId, loadSousDetails: true).SelectMany(b => b.BudgetSousDetails);
                }
            }

            var flatData = new List<TableauSyntheseDepenseFlatModel>();
            foreach (var depense in depenseList)
            {
                flatData.Add(new TableauSyntheseDepenseFlatModel
                {
                    RessourceId = depense.RessourceId,
                    Ressource = depense.Ressource,
                    Tache3Id = depense.TacheId,
                    Tache3 = depense.Tache,
                });
            }

            foreach (var depense in depenseListPrevious)
            {
                flatData.Add(new TableauSyntheseDepenseFlatModel
                {
                    RessourceId = depense.RessourceId,
                    Ressource = depense.Ressource,
                    Tache3Id = depense.TacheId,
                    Tache3 = depense.Tache,
                });
            }

            foreach (var sd in sdList)
            {
                var sdAvancement = avancementsCumule.FirstOrDefault(x => x.BudgetSousDetailId == sd.BudgetSousDetailId);
                var sdAvancementPrevious = avancementsCumulePrevious.FirstOrDefault(x => x.BudgetSousDetailId == sd.BudgetSousDetailId);
                flatData.Add(new TableauSyntheseDepenseFlatModel
                {
                    RessourceId = sd.RessourceId,
                    Ressource = sd.Ressource,
                    Tache3Id = sd.BudgetT4?.T3Id,
                    Tache3 = sd.BudgetT4.T3,
                    MontantBudget = sd.Montant,
                    MontantAvancement = (sd.Quantite * ((sdAvancement?.PourcentageSousDetailAvance ?? 0) / 100) * sd.PU) ?? 0,
                    MontantAvancementPrevious = (sd.Quantite * ((sdAvancementPrevious?.PourcentageSousDetailAvance ?? 0) / 100) * sd.PU) ?? 0,
                });
            }

            // chargement des avancements portant sur un autre budget, les données seront ensuite aggrégées par ressource/tache
            foreach (var sd in sdListPrevious)
            {
                var sdAvancementPrevious = avancementsCumulePrevious.FirstOrDefault(x => x.BudgetSousDetailId == sd.BudgetSousDetailId);
                flatData.Add(new TableauSyntheseDepenseFlatModel
                {
                    RessourceId = sd.RessourceId,
                    Ressource = sd.Ressource,
                    Tache3Id = sd.BudgetT4?.T3Id,
                    Tache3 = sd.BudgetT4.T3,
                    MontantAvancementPrevious = (sd.Quantite * ((sdAvancementPrevious?.PourcentageSousDetailAvance ?? 0) / 100) * sd.PU) ?? 0,
                });
            }

            // RECUPERATION DES VALEURS DE L EXPLORATEURS DES DEPENSES
            List<ExplorateurAxe> explorateurAxesForComptabilises = await tableauSyntheseRowsComptabilisesService.GetRowsComptabiliseForMonthDataAsync(model).ConfigureAwait(false);
            List<ExplorateurAxe> explorateurAxesForComptabilisesPrevious = await tableauSyntheseRowsComptabilisesService.GetRowsComptabiliseForPreviousMonthDataAsync(model).ConfigureAwait(false);
            List<ExplorateurAxe> explorateurAxesForCorrectif = await tableauSyntheseRowsCorrectifService.GetRowsCorrectifForMonthDataAsync(model).ConfigureAwait(false);
            List<ExplorateurAxe> explorateurAxesForCorrectifPrevious = await tableauSyntheseRowsCorrectifService.GetRowsCorrectifForPreviousMonthDataAsync(model).ConfigureAwait(false);

            // CREATION DES MODELS NON EXISTANTS
            var allFlatModels = tableauxSyntheseMergeService.MergeAxesToFlatModels(flatData,
                                                                            explorateurAxesForComptabilises,
                                                                            explorateurAxesForComptabilisesPrevious,
                                                                            explorateurAxesForCorrectif,
                                                                            explorateurAxesForCorrectifPrevious);

            allFlatModels = MoveTacheEcart(allFlatModels);

            List<TableauSyntheseDepenseFlatModel> groupedTacheRessourceData = GroupByTacheRessource(allFlatModels, controleBudgetaireValeurs, controleBudgetaireValeursPrevious);

            //CREATION DES GROUPES-AXES
            var axeHelper = new AxeHelper();

            var axeList = axeHelper.GetOrderedAxeList(model.AxeDirection, model.Axes);

            DepenseExportCreatorHelper depenseExportCreatorHelper = new DepenseExportCreatorHelper();

            List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels = depenseExportCreatorHelper.GroupByAxes(groupedTacheRessourceData, axeList, parent: null);


            // AFFECTATION DES CHAMPS AVEC LES VALEURS DE L EXPLORATEUR DES DEPENSES
            tableauSyntheseRowsComptabilisesService.MapMoisMontantComptabilise(tableauSyntheseDepenseExportModels, explorateurAxesForComptabilises);

            tableauSyntheseRowsComptabilisesService.MapMoisMontantComptabilisePrevious(tableauSyntheseDepenseExportModels, explorateurAxesForComptabilisesPrevious);

            tableauSyntheseRowsCorrectifService.MapMoisMontantCorrectif(tableauSyntheseDepenseExportModels, explorateurAxesForCorrectif);

            tableauSyntheseRowsCorrectifService.MapMoisMontantCorrectifPrevious(tableauSyntheseDepenseExportModels, explorateurAxesForCorrectifPrevious);

            // CHAMPS CALCULES
            tableauSyntheseRowsCalculatedFieldsService.ComputeFields(tableauSyntheseDepenseExportModels);

            return tableauSyntheseDepenseExportModels;

        }


        protected async Task<List<BudgetDepenseModel>> GetDepensesAsync(int ciId, int periode)
        {
            var filtre = new SearchDepense
            {
                CiId = ciId,
                PeriodeDebut = null,
                PeriodeFin = PeriodeHelper.ToLastDayOfMonthDateTime(periode),
            };

            // Le ToList est indispensable ici pour avoir de bonne performance
            // Sans celui-ci, le mapper sera appelé à chaque énumération
            return BudgetDepenseMapper.Map(await depenseServiceMediator.GetAllDepenseExterneForExportAsync(filtre).ConfigureAwait(false)).ToList();
        }


        private List<TableauSyntheseDepenseFlatModel> MoveTacheEcart(List<TableauSyntheseDepenseFlatModel> flatData)
        {
            var tacheNotEcartList = flatData.Where(x => !taskSearchHelper.IsTacheEcart(x.Tache3));
            var tacheEcartList = flatData.Where(x => taskSearchHelper.IsTacheEcart(x.Tache3));
            return tacheNotEcartList.Concat(tacheEcartList).ToList();
        }

        private List<TableauSyntheseDepenseFlatModel> GroupByTacheRessource(List<TableauSyntheseDepenseFlatModel> allData,
                                                                            IEnumerable<ControleBudgetaireValeursEnt> controleBudgetaireValeurs,
                                                                            IEnumerable<ControleBudgetaireValeursEnt> controleBudgetaireValeursPrevious)
        {
            return allData.GroupBy(x => new { x.RessourceId, x.Tache3Id })
                .Select(x => new TableauSyntheseDepenseFlatModel
                {
                    Tache3Id = x.First().Tache3Id,
                    Tache3 = x.First().Tache3,
                    RessourceId = x.First().RessourceId,
                    Ressource = x.First().Ressource,
                    MontantBudget = x.Sum(y => y.MontantBudget),
                    MontantAvancement = x.Sum(y => y.MontantAvancement),
                    MontantAvancementPrevious = x.Sum(y => y.MontantAvancementPrevious),
                    MontantAjustement = controleBudgetaireValeurs?.FirstOrDefault(v => v.RessourceId == x.Key.RessourceId && v.TacheId == x.Key.Tache3Id)?.Ajustement,
                    MontantAjustementPrevious = controleBudgetaireValeursPrevious?.FirstOrDefault(v => v.RessourceId == x.Key.RessourceId && v.TacheId == x.Key.Tache3Id)?.Ajustement,
                }).ToList();
        }

    }
}
