using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Fred.Business.CompteExploitation.Helpers;
using Fred.Business.CompteExploitation.TableauSynthese.Interfaces;
using Fred.Business.CompteExploitation.TableauSynthese.Models;
using Fred.Business.ExplorateurDepense;
using Fred.Web.Shared.Models.CompteExploitation.TableauSynthese;

namespace Fred.Business.CompteExploitation.TableauSynthese.Services.Rows
{
    public class TableauSyntheseRowsCorrectifService : ITableauSyntheseRowsCorrectifService
    {
        private readonly IExplorateurDepenseManager explorateurDepenseManager;

        public TableauSyntheseRowsCorrectifService(IExplorateurDepenseManager explorateurDepenseManager)
        {
            this.explorateurDepenseManager = explorateurDepenseManager;
        }

        public async Task<List<ExplorateurAxe>> GetRowsCorrectifForMonthDataAsync(TableauSyntheseLoadExportModel model)
        {
            if (model == null)
                throw new ArgumentNullException(nameof(model));

            var periodFin = PeriodHelper.CreatePeriodFin(model.Periode);

            var explorateurAxeFlatten = await GetRowsCorrectifDataAsync(periodFin, model).ConfigureAwait(false);

            return explorateurAxeFlatten;
        }

        public async Task<List<ExplorateurAxe>> GetRowsCorrectifForPreviousMonthDataAsync(TableauSyntheseLoadExportModel model)
        {
            if (model == null)
                throw new ArgumentNullException(nameof(model));

            var periodFinM1 = PeriodHelper.CreatePeriodFinM1(model.Periode);

            var explorateurAxeFlatten = await GetRowsCorrectifDataAsync(periodFinM1, model).ConfigureAwait(false);

            return explorateurAxeFlatten;
        }

        private async Task<List<ExplorateurAxe>> GetRowsCorrectifDataAsync(DateTime periodFin, TableauSyntheseLoadExportModel model)
        {
            if (model == null)
                throw new ArgumentNullException(nameof(model));

            var filterCorrectif = new SearchExplorateurDepense
            {
                CiId = model.CiId,
                PeriodeFin = periodFin,
                AxeAnalytique = FilterHelpers.GetAxeAnalytique(model.AxeDirection),
                AxePrincipal = FilterHelpers.GetAxePrincipal(model.AxeDirection, model.Axes),
                AxeSecondaire = FilterHelpers.GetAxeSecondaire(model.AxeDirection, model.Axes),
                TakeReception = true,
                TakeFar = true
            };

            IEnumerable<ExplorateurAxe> explorateurAxeCorrectif = await explorateurDepenseManager.GetAsync(filterCorrectif).ConfigureAwait(false);

            var explorateurAxeCorrectifFlatten = explorateurAxeCorrectif.ToList().FlattenExplorateurAxes();

            return explorateurAxeCorrectifFlatten;
        }

        public void MapMoisMontantCorrectif(List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels, List<ExplorateurAxe> explorateurAxeCorrectifFlatten)
        {
            if (explorateurAxeCorrectifFlatten == null)
                throw new ArgumentNullException(nameof(explorateurAxeCorrectifFlatten));

            if (tableauSyntheseDepenseExportModels == null)
                throw new ArgumentNullException(nameof(tableauSyntheseDepenseExportModels));

            CleanAllMoisMontantCorrectif(tableauSyntheseDepenseExportModels);

            SetMoisMontantCorrectif(tableauSyntheseDepenseExportModels, explorateurAxeCorrectifFlatten);
        }

        public void MapMoisMontantCorrectifPrevious(List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels, List<ExplorateurAxe> explorateurAxeCorrectifPreviousFlatten)
        {
            if (explorateurAxeCorrectifPreviousFlatten == null)
                throw new ArgumentNullException(nameof(explorateurAxeCorrectifPreviousFlatten));

            if (tableauSyntheseDepenseExportModels == null)
                throw new ArgumentNullException(nameof(tableauSyntheseDepenseExportModels));

            CleanAllMoisMontantCorrectifPrevious(tableauSyntheseDepenseExportModels);

            SetMoisMontantCorrectifPrevious(tableauSyntheseDepenseExportModels, explorateurAxeCorrectifPreviousFlatten);
        }

        private void CleanAllMoisMontantCorrectif(List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels)
        {
            foreach (var tableauSyntheseDepenseExportModel in tableauSyntheseDepenseExportModels)
            {
                tableauSyntheseDepenseExportModel.MoisMontantCorrectif = 0;
            }
        }

        private void CleanAllMoisMontantCorrectifPrevious(List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels)
        {
            foreach (var tableauSyntheseDepenseExportModel in tableauSyntheseDepenseExportModels)
            {
                tableauSyntheseDepenseExportModel.MoisMontantCorrectifPrevious = 0;
            }
        }

        private static void SetMoisMontantCorrectif(List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels, List<ExplorateurAxe> explorateurAxeCorrectifFlatten)
        {
            Dictionary<string, TableauSyntheseDepenseExportModel> dico = tableauSyntheseDepenseExportModels.ToDictionary(x => x.GetIdentifier());

            foreach (ExplorateurAxe explorateurAxe in explorateurAxeCorrectifFlatten)
            {
                var explorateurAxeKey = explorateurAxe.GetIdentifier();

                var tableauSyntheseDepenseExportModel = dico[explorateurAxeKey];

                tableauSyntheseDepenseExportModel.MoisMontantCorrectif = explorateurAxe.MontantHT;
            }
        }

        private static void SetMoisMontantCorrectifPrevious(List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels, List<ExplorateurAxe> explorateurAxeCorrectifPreviousFlatten)
        {
            Dictionary<string, TableauSyntheseDepenseExportModel> dico = tableauSyntheseDepenseExportModels.ToDictionary(x => x.GetIdentifier());

            foreach (ExplorateurAxe explorateurAxe in explorateurAxeCorrectifPreviousFlatten)
            {
                var explorateurAxeKey = explorateurAxe.GetIdentifier();

                var tableauSyntheseDepenseExportModel = dico[explorateurAxeKey];

                tableauSyntheseDepenseExportModel.MoisMontantCorrectifPrevious = explorateurAxe.MontantHT;
            }
        }
    }
}
