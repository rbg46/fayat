using System;
using System.Collections.Generic;
using Fred.Business.ExplorateurDepense;
using Fred.Framework.Extensions;
using static Fred.Entities.Constantes;

namespace Fred.Business.CompteExploitation.TableauSynthese.Services.Rows
{
    public class FilterHelpers
    {
        protected static readonly List<string> AxesC = new List<string> { AnalysisAxis.Chapitre, AnalysisAxis.SousChapitre, AnalysisAxis.Ressource };

        /// <summary>
        /// Liste des axes de type Taches
        /// </summary>
        protected static readonly List<string> AxesT = new List<string> { AnalysisAxis.T1, AnalysisAxis.T2, AnalysisAxis.T3 };

        public static int GetAxeAnalytique(string analyticAxis)
        {
            if (analyticAxis.Equals("RessourceTache"))
            {
                // Axes principaux Chap / SousChap / Ress
                return ExplorateurDepenseHelper.AxeAnalytique.RessourceTache.ToIntValue();
            }
            else
            {
                // Axes principaux T1 / T2 / T3
                return ExplorateurDepenseHelper.AxeAnalytique.TacheRessource.ToIntValue();
            }
        }

        public static string[] GetAxePrincipal(string analyticAxis, List<string> arrayAxis)
        {
            List<string> selectedAxesC = GetSelectedAxesC(arrayAxis);
            List<string> selectedAxesT = GetselectedAxesT(arrayAxis);

            if (analyticAxis.Equals("RessourceTache"))
            {
                // Axes principaux Chap / SousChap / Ress
                if (selectedAxesC.Count > 0)
                {
                    return selectedAxesC.ToArray();
                }
                else
                {
                    return selectedAxesT.ToArray();
                }
            }
            else
            {
                // Axes principaux T1 / T2 / T3

                if (selectedAxesT.Count > 0)
                {
                    return selectedAxesT.ToArray();
                }
                else
                {
                    return selectedAxesC.ToArray();
                }
            }
        }

        public static string[] GetAxeSecondaire(string analyticAxis, List<string> arrayAxis)
        {
            List<string> selectedAxesC = GetSelectedAxesC(arrayAxis);
            List<string> selectedAxesT = GetselectedAxesT(arrayAxis);

            if (analyticAxis.Equals("RessourceTache"))
            {
                // Axes principaux Chap / SousChap / Ress
                if (selectedAxesC.Count > 0)
                {
                    return selectedAxesT.ToArray();
                }
                else
                {
                    return Array.Empty<string>();
                }
            }
            else
            {
                // Axes principaux T1 / T2 / T3
                if (selectedAxesT.Count > 0)
                {
                    return selectedAxesC.ToArray();
                }
                else
                {
                    return Array.Empty<string>();
                }
            }
        }

        private static List<string> GetSelectedAxesC(List<string> arrayAxis)
        {
            List<string> selectedAxesC = new List<string>();
            foreach (var axis in arrayAxis)
            {
                if (AxesC.Contains(axis))
                {
                    selectedAxesC.Add(axis);
                }
            }
            return selectedAxesC;
        }

        private static List<string> GetselectedAxesT(List<string> arrayAxis)
        {
            List<string> selectedAxesT = new List<string>();
            foreach (var axis in arrayAxis)
            {
                if (AxesT.Contains(axis))
                {
                    selectedAxesT.Add(axis);
                }
            }
            return selectedAxesT;
        }
    }
}
