using System;
using System.Collections.Generic;
using System.Linq;
using Fred.Business.CompteExploitation.TableauSynthese.Models;
using static Fred.Entities.Constantes;

namespace Fred.Business.CompteExploitation.TableauSynthese.Services.Rows.Helpers
{
    public class DepenseExportCreatorHelper
    {
        public List<TableauSyntheseDepenseExportModel> GroupByAxes(List<TableauSyntheseDepenseFlatModel> rawData, List<string> axes, TableauSyntheseDepenseExportModel parent)
        {
            List<TableauSyntheseDepenseExportModel> exportData = new List<TableauSyntheseDepenseExportModel>();

            string axe = axes.FirstOrDefault();
            rawData = rawData.OrderBy(this.GetOrderByProperty(axe)).ToList();
            //Axes restants
            axes = axes.Where(x => x != axe).ToList();

            var groupKey = this.GetGroupingKey(axe);
            // regroupement des données en fonction des axes
            foreach (var group in rawData.GroupBy(groupKey))
            {
                var firstInGroup = group.First();
                var tableauSyntheseDepenseExportModel = CreateTableauSyntheseDepenseExportModel(axe, group, firstInGroup, parent);
                exportData.Add(tableauSyntheseDepenseExportModel);
                if (axes.Any())
                {
                    exportData.AddRange(GroupByAxes(group.ToList(), axes, tableauSyntheseDepenseExportModel));
                }
            }
            return exportData;
        }

        private Func<TableauSyntheseDepenseFlatModel, object> GetGroupingKey(string axe)
        {
            switch (axe)
            {
                case TableauSyntheseConstantes.AxeRessource:
                    return x => x.Ressource?.RessourceId;
                case TableauSyntheseConstantes.AxeSousChapitre:
                    return x => x.Ressource?.SousChapitre?.SousChapitreId;
                case TableauSyntheseConstantes.AxeChapitre:
                    return x => x.Ressource?.SousChapitre?.Chapitre?.ChapitreId;
                case TableauSyntheseConstantes.AxeTache3:
                    return x => x.Tache3?.TacheId;
                case TableauSyntheseConstantes.AxeTache2:
                    return x => x.Tache3?.Parent?.TacheId;
                case TableauSyntheseConstantes.AxeTache1:
                    return x => x.Tache3?.Parent?.Parent?.TacheId;
                default:
                    return null;
            }
        }

        private TableauSyntheseDepenseExportModel CreateTableauSyntheseDepenseExportModel(string axe, IGrouping<object, TableauSyntheseDepenseFlatModel> group, TableauSyntheseDepenseFlatModel firstInGroup, TableauSyntheseDepenseExportModel parent)
        {

            return new TableauSyntheseDepenseExportModel
            {
                Parent = parent,
                Key = GetKey(axe, firstInGroup),
                AxeGroup = axe,
                Libelle = GetCodeLibelle(firstInGroup, axe),
                MontantBudget = group.Sum(x => x.MontantBudget ?? 0),
                MoisMontantAvancement = group.Sum(x => x.MontantAvancement ?? 0),
                MoisMontantAvancementPrevious = group.Sum(x => x.MontantAvancementPrevious),
                FinAffaireAjustementRad = group.Sum(x => x.MontantAjustement ?? 0),
                FinAffaireAjustementRadPrevious = group.Sum(x => x.MontantAjustementPrevious ?? 0)
            };
        }

        private string GetKey(string axe, TableauSyntheseDepenseFlatModel data)
        {
            switch (axe)
            {
                case TableauSyntheseConstantes.AxeRessource:
                    return $"{ AnalysisAxis.Ressource} {data.Ressource?.RessourceId}".Trim();
                case TableauSyntheseConstantes.AxeSousChapitre:
                    return $"{ AnalysisAxis.SousChapitre} {data.Ressource?.SousChapitre?.SousChapitreId}".Trim();
                case TableauSyntheseConstantes.AxeChapitre:
                    return $"{ AnalysisAxis.Chapitre} {data.Ressource?.SousChapitre?.Chapitre.ChapitreId}".Trim();
                case TableauSyntheseConstantes.AxeTache3:
                    return $"{ AnalysisAxis.T3} { data.Tache3?.TacheId}".Trim();
                case TableauSyntheseConstantes.AxeTache2:
                    return $"{ AnalysisAxis.T2} { data.Tache3?.Parent?.TacheId}".Trim();
                case TableauSyntheseConstantes.AxeTache1:
                    return $"{ AnalysisAxis.T1} { data.Tache3?.Parent?.Parent?.TacheId}".Trim();
                default:
                    return string.Empty;
            }
        }
        private string GetCodeLibelle(TableauSyntheseDepenseFlatModel data, string axe)
        {
            switch (axe)
            {
                case TableauSyntheseConstantes.AxeRessource:
                    return $"{ data.Ressource?.Code}-{data.Ressource?.Libelle}";
                case TableauSyntheseConstantes.AxeSousChapitre:
                    return $"{ data.Ressource?.SousChapitre?.Code}-{data.Ressource?.SousChapitre?.Libelle}";
                case TableauSyntheseConstantes.AxeChapitre:
                    return $"{ data.Ressource?.SousChapitre?.Chapitre?.Code}-{data.Ressource?.SousChapitre?.Chapitre?.Libelle}";
                case TableauSyntheseConstantes.AxeTache3:
                    return $"{ data.Tache3?.Code}-{data.Tache3?.Libelle}";
                case TableauSyntheseConstantes.AxeTache2:
                    return $"{ data.Tache3?.Parent?.Code}-{data.Tache3?.Parent?.Libelle}";
                case TableauSyntheseConstantes.AxeTache1:
                    return $"{ data.Tache3?.Parent?.Parent?.Code}-{data.Tache3?.Parent?.Parent?.Libelle}";
                default:
                    return string.Empty;
            }
        }

        private Func<TableauSyntheseDepenseFlatModel, object> GetOrderByProperty(string axe)
        {
            switch (axe)
            {
                case TableauSyntheseConstantes.AxeRessource:
                    return x => x.Ressource?.Code + x.Ressource?.Libelle;
                case TableauSyntheseConstantes.AxeSousChapitre:
                    return x => x.Ressource?.SousChapitre?.Code + x.Ressource?.SousChapitre?.Libelle;
                case TableauSyntheseConstantes.AxeChapitre:
                    return x => x.Ressource?.SousChapitre?.Chapitre?.Code + x.Ressource?.SousChapitre?.Chapitre?.Libelle;
                case TableauSyntheseConstantes.AxeTache3:
                    return x => x.Tache3?.Code + x.Tache3?.Libelle;
                case TableauSyntheseConstantes.AxeTache2:
                    return x => x.Tache3?.Parent?.Code + x.Tache3?.Parent?.Libelle;
                case TableauSyntheseConstantes.AxeTache1:
                    return x => x.Tache3?.Parent?.Parent?.Code + x.Tache3?.Parent?.Parent?.Libelle;
                default:
                    return null;
            }
        }

    }
}
