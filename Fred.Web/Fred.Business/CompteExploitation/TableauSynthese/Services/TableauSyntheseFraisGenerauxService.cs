using System;
using Fred.Business.CompteExploitation.TableauSynthese.Interfaces;
using Fred.Business.CompteExploitation.TableauSynthese.Models;
using Fred.Web.Shared.Models.Budget.Recette;
namespace Fred.Business.CompteExploitation.TableauSynthese.Services
{
    public class TableauSyntheseFraisGenerauxService : ITableauSyntheseFraisGenerauxService
    {
        private readonly ITableauSyntheseTotalRecetteService tableauSyntheseTotalRecetteService;

        public TableauSyntheseFraisGenerauxService(ITableauSyntheseTotalRecetteService tableauSyntheseTotalRecetteService)
        {
            this.tableauSyntheseTotalRecetteService = tableauSyntheseTotalRecetteService;
        }
        public TableauSyntheseFraisGenerauxModel CreateRowFraisGeneraux(AvancementRecetteLoadModel avancementRecetteLoadModel)
        {
            if (avancementRecetteLoadModel == null)
                throw new ArgumentNullException(nameof(avancementRecetteLoadModel));

            //Recuperation des totaux de la recette
            decimal totalRecetteBudget = tableauSyntheseTotalRecetteService.GetTotalRecetteBudget(avancementRecetteLoadModel);
            decimal totalRecetteComptabilise = tableauSyntheseTotalRecetteService.GetTotalRecetteComptabilise(avancementRecetteLoadModel);
            decimal totalRecetteCorrectif = tableauSyntheseTotalRecetteService.GetTotalRecetteCorrectif(avancementRecetteLoadModel);
            decimal totalRecetteActualisationFDC = tableauSyntheseTotalRecetteService.GetTotalRecetteActualisationFDC(avancementRecetteLoadModel);

            // recuperation des donnees de l'avancement recette
            decimal pourcentagefraisGeneraux = avancementRecetteLoadModel.TauxFraisGeneraux;
            decimal pourcentageFraisGenerauxPart = pourcentagefraisGeneraux / 100;
            decimal ajustement = avancementRecetteLoadModel.AjustementFraisGeneraux;
            decimal pourcentagefraisGenerauxCumul = avancementRecetteLoadModel.AvancementTauxFraisGeneraux;
            decimal pourcentagefraisGenerauxCumulPart = pourcentagefraisGenerauxCumul / 100;
            decimal ajustementCumul = avancementRecetteLoadModel.AvancementAjustementFraisGeneraux;
            decimal pourcentagefraisGenerauxPFA = avancementRecetteLoadModel.TauxFraisGenerauxPFA;
            decimal pourcentagefraisGenerauxPFAPart = pourcentagefraisGenerauxPFA / 100;
            decimal ajustementPFA = avancementRecetteLoadModel.AjustementFraisGenerauxPFA;

            // execution des calculs
            decimal fraisGenerauxPourcentage = GetFraisGenerauxPourcentage(totalRecetteBudget, pourcentagefraisGeneraux, ajustement);
            decimal fraisGenerauxBudget = GetFraisGenerauxBudget(totalRecetteBudget, pourcentageFraisGenerauxPart, ajustement);
            decimal fraisGenerauxComptabilise = GetFraisGenerauxComptabilise(totalRecetteComptabilise, pourcentagefraisGenerauxCumulPart);
            decimal fraisGenerauxCorrectif = GetFraisGenerauxCorrectif(totalRecetteCorrectif, pourcentagefraisGenerauxCumulPart, ajustementCumul);
            decimal fraisGenerauxTotal = GetFraisGenerauxTotal(fraisGenerauxComptabilise, fraisGenerauxCorrectif);
            decimal fraisGenerauxActualisationFDC = GetFraisGenerauxActualisationFDC(pourcentagefraisGenerauxPFAPart, ajustementPFA, totalRecetteActualisationFDC);
            decimal fraisGenerauxAjustementRAD = GetFraisGenerauxAjustementRAD(fraisGenerauxActualisationFDC, fraisGenerauxBudget);

            return new TableauSyntheseFraisGenerauxModel()
            {
                FraisGenerauxPourcentage = fraisGenerauxPourcentage,
                FraisGenerauxBudget = fraisGenerauxBudget,
                FraisGenerauxComptabilise = fraisGenerauxComptabilise,
                FraisGenerauxCorrectif = fraisGenerauxCorrectif,
                FraisGenerauxTotal = fraisGenerauxTotal,
                FraisGenerauxAjustementRAD = fraisGenerauxAjustementRAD,
                FraisGenerauxActualisationFDC = fraisGenerauxActualisationFDC,
            };
        }

        private decimal GetFraisGenerauxPourcentage(decimal totalRecetteBudget, decimal pourcentagefraisGeneraux, decimal ajustement)
        {
            if (totalRecetteBudget == 0)
            {
                return 0;
            }
            return ((pourcentagefraisGeneraux * totalRecetteBudget) + ajustement) / totalRecetteBudget / 100;
        }

        private decimal GetFraisGenerauxBudget(decimal totalRecetteBudget, decimal pourcentagefraisGeneraux, decimal ajustement)
        {
            return (pourcentagefraisGeneraux * totalRecetteBudget) + ajustement;
        }

        private decimal GetFraisGenerauxComptabilise(decimal totalRecetteComptabilise, decimal pourcentagefraisGenerauxCumul)
        {
            return pourcentagefraisGenerauxCumul * totalRecetteComptabilise;
        }

        private decimal GetFraisGenerauxCorrectif(decimal totalRecetteCorrectif, decimal pourcentagefraisGenerauxCumul, decimal ajustementCumul)
        {
            return (pourcentagefraisGenerauxCumul * totalRecetteCorrectif) + ajustementCumul;
        }

        private decimal GetFraisGenerauxTotal(decimal fraisGenerauxComptabilise, decimal fraisGenerauxCorrectif)
        {
            return fraisGenerauxComptabilise + fraisGenerauxCorrectif;
        }
        private decimal GetFraisGenerauxActualisationFDC(decimal pourcentagefraisGenerauxPFA, decimal ajustementPFA, decimal totalRecetteActualisationFDC)
        {
            return (pourcentagefraisGenerauxPFA * totalRecetteActualisationFDC) + ajustementPFA;
        }

        private decimal GetFraisGenerauxAjustementRAD(decimal totalRecetteActualisationFDC, decimal totalRecetteBudget)
        {
            return totalRecetteActualisationFDC - totalRecetteBudget;
        }
    }
}
