using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Threading.Tasks;
using Fred.Business.Budget;
using Fred.Business.Budget.Helpers;
using Fred.Business.CI;
using Fred.Business.CompteExploitation.TableauSynthese.Interfaces;
using Fred.Business.CompteExploitation.TableauSynthese.Models;
using Fred.Business.CompteExploitation.TableauSynthese.Services;
using Fred.Business.Images;
using Fred.Business.Utilisateur;
using Fred.DataAccess.Interfaces;
using Fred.Framework.Exceptions;
using Fred.Framework.Reporting;
using Fred.Web.Shared.App_LocalResources;
using Fred.Web.Shared.Models.Budget.Recette;
using Fred.Web.Shared.Models.CompteExploitation.TableauSynthese;
using Syncfusion.XlsIO;

namespace Fred.Business.CompteExploitation.TableauSynthese
{
    public class TableauSyntheseExportManager : ITableauSyntheseExportManager
    {
        private const string AxeRessource = "Ressource";
        private const string AxeSousChapitre = "SousChapitre";
        private const string AxeChapitre = "Chapitre";
        private const string AxeTache3 = "T3";
        private const string AxeTache2 = "T2";
        private const string AxeTache1 = "T1";

        private const string ExcelTemplate = "Templates/TableauSynthese/TemplateTableauSyntheseExport.xlsx";
        private const string NumberFormat = "#,##0.00";

        private readonly IImageManager imageManager;
        private readonly IPersonnelRepository personnelRepository;
        private readonly IControleBudgetaireManager controleBudgetaireManager;
        private readonly IUtilisateurManager utilisateurManager;
        private readonly IBudgetMainManager budgetMainManager;
        private readonly ICIManager cIManager;
        private readonly ITableauSyntheseFraisGenerauxService tableauSyntheseFraisGenerauxService;
        private readonly ITableauSyntheseRowsProviderService tableauSyntheseRowsProviderService;
        private readonly ITableauSyntheseTotalDebourseService tableauSyntheseTotalDebourseService;
        private readonly ITableauSyntheseRecetteService tableauSyntheseRecetteService;

        public TableauSyntheseExportManager(
            IImageManager imageManager,
            IPersonnelRepository personnelRepository,
            IControleBudgetaireManager controleBudgetaireManager,
            ITableauSyntheseFraisGenerauxService tableauSyntheseFraisGenerauxService,
            IUtilisateurManager utilisateurManager,
            IBudgetMainManager budgetMainManager,
            ICIManager cIManager,
            ITableauSyntheseRecetteService tableauSyntheseRecetteService,
            ITableauSyntheseRowsProviderService tableauSyntheseRowsProviderService,
            ITableauSyntheseTotalDebourseService tableauSyntheseTotalDebourseService)
        {
            this.imageManager = imageManager;
            this.personnelRepository = personnelRepository;
            this.controleBudgetaireManager = controleBudgetaireManager;
            this.utilisateurManager = utilisateurManager;
            this.budgetMainManager = budgetMainManager;
            this.cIManager = cIManager;
            this.tableauSyntheseFraisGenerauxService = tableauSyntheseFraisGenerauxService;
            this.tableauSyntheseRowsProviderService = tableauSyntheseRowsProviderService;
            this.tableauSyntheseTotalDebourseService = tableauSyntheseTotalDebourseService;
            this.tableauSyntheseRecetteService = tableauSyntheseRecetteService;
        }


        public async Task<byte[]> GetExportTableauSyntheseAsync(TableauSyntheseLoadExportModel model)
        {
            string pathName = AppDomain.CurrentDomain.BaseDirectory + ExcelTemplate;
            var excelFormat = new ExcelFormat();
            var workbook = excelFormat.OpenTemplateWorksheet(pathName);
            var sheet = workbook.Worksheets[0];

            var budget = controleBudgetaireManager.GetBudgetForCiAndPeriode(model.CiId, model.Periode);
            if (budget == null)
            {
                throw new FredBusinessMessageResponseException(FeatureExportTableauSynthese.TableauSyntheseErrorBudgetCINotFound);
            }

            var ciCodeLibelle = cIManager.GetCIById(model.CiId)?.CodeLibelle;
            var utilisateur = await utilisateurManager.GetContextUtilisateurAsync().ConfigureAwait(false);

            AvancementRecetteLoadModel avancementRecette = budgetMainManager.GetAvancementRecette(model.CiId, model.Periode);

            TableauSyntheseRecetteExportModel recetteData = tableauSyntheseRecetteService.GetRecetteExportData(avancementRecette);
            List<TableauSyntheseDepenseExportModel> depenses = await tableauSyntheseRowsProviderService.GetDepensesExportDataAsync(model, budget.BudgetId).ConfigureAwait(false);
            TableauSyntheseDepenseExportModel totalDebourseData = tableauSyntheseTotalDebourseService.GetDepensesTotalExportData(model, depenses);
            TableauSyntheseFraisGenerauxModel fraisGenerauxData = tableauSyntheseFraisGenerauxService.CreateRowFraisGeneraux(avancementRecette);

            excelFormat.InitVariables(workbook);
            excelFormat.AddVariable("Periode", PeriodeHelper.FormatPeriode(model.Periode));
            excelFormat.AddVariable("CICodeLibelle", ciCodeLibelle);
            excelFormat.AddVariable("EditePar", utilisateur.PrenomNom);
            excelFormat.AddVariable("DateEdition", DateTime.Now);
            excelFormat.AddVariable("TableauSyntheseRecetteExportModel", recetteData);
            excelFormat.AddVariable("TableauSyntheseDepenseExportModel", depenses);
            excelFormat.AddVariable("TableauSyntheseDepenseTotalExportModel", totalDebourseData);
            excelFormat.AddVariable("TableauSyntheseFraisGenerauxModel", fraisGenerauxData);

            excelFormat.ApplyVariables();

            CustomTransformation(workbook, depenses);

            var utilisateurId = utilisateurManager.GetContextUtilisateurId();
            var editeur = personnelRepository.GetPersonnelPourExportExcelHeader(utilisateurId);
            excelFormat.AddLogoSociete(editeur.SocieteId != null ? AppDomain.CurrentDomain.BaseDirectory + imageManager.GetLogoImage(editeur.SocieteId.Value).Path : null, sheet);

            // conversion pdf ou excel en tableau de bytes
            byte[] bytes = null;
            if (model.IsPdfConverted)
            {
                MemoryStream memoryStream = new MemoryStream();
                excelFormat.PrintExcelToPdfAutoFit(workbook).Save(memoryStream);
                bytes = memoryStream.ToArray();
            }
            else
            {
                bytes = excelFormat.ConvertToByte(workbook);
            }

            return bytes;
        }




        private static Dictionary<string, Tuple<Color, Color>> AxeColors => new Dictionary<string, Tuple<Color, Color>>
        {
            {AxeChapitre, new Tuple<Color, Color>(Color.FromArgb(255, 216, 0), Color.Black)},
            {AxeSousChapitre, new Tuple<Color, Color>(Color.FromArgb(255, 234, 113), Color.Black) },
            {AxeRessource, new Tuple<Color, Color>(Color.FromArgb(255, 244, 187), Color.Black)},
            {AxeTache1, new Tuple<Color, Color>(Color.FromArgb(64, 109, 156), Color.White)},
            {AxeTache2, new Tuple<Color, Color>(Color.FromArgb(102, 138, 180), Color.White)},
            {AxeTache3, new Tuple<Color, Color>(Color.FromArgb(160, 182, 208), Color.White)}
        };




        private void CustomTransformation(IWorkbook workbook, List<TableauSyntheseDepenseExportModel> data)
        {
            FormatRowsRecetteAsNumber(workbook, data);

            // mise en forme de la colonne Axe
            for (int index = 0; index < data.Count; index++)
            {
                int rowIndex = 22 + index;
                var range = workbook.ActiveSheet.Range[rowIndex, 1, rowIndex, 2];
                range.CellStyle.Color = AxeColors[data[index].AxeGroup].Item1;
                range.CellStyle.Font.RGBColor = AxeColors[data[index].AxeGroup].Item2;
                range.Merge();
                range.HorizontalAlignment = ExcelHAlign.HAlignCenter;

            }

            // encadrés
            int firstRow = 22;
            int lastRow = 22 + data.Count;
            workbook.ActiveSheet.Range[firstRow, 4, lastRow, 4].BorderAround();
            workbook.ActiveSheet.Range[firstRow, 6, lastRow, 12].BorderAround();
            workbook.ActiveSheet.Range[firstRow, 14, lastRow, 18].BorderAround();

            // paysage
            workbook.ActiveSheet.PageSetup.Orientation = ExcelPageOrientation.Landscape;
        }

        private void FormatRowsRecetteAsNumber(IWorkbook workbook, List<TableauSyntheseDepenseExportModel> data)
        {
            var rangeBudgetRecette = workbook.ActiveSheet.Range["D11:D19"];
            SetFormatAndNumber(rangeBudgetRecette);

            var rangeRecetteProduction = workbook.ActiveSheet.Range["H11:J19"];
            SetFormatAndNumber(rangeRecetteProduction);

            var rangeRecettPrevision = workbook.ActiveSheet.Range["N11:P19"];
            SetFormatAndNumber(rangeRecettPrevision);

            var startRowNumber = 22;
            var endRowNumber = startRowNumber + data.Count;
            var rangeBudgetRows = workbook.ActiveSheet.Range[$"D{startRowNumber}:D{endRowNumber + 7}"];
            SetFormatAndNumber(rangeBudgetRows);

            var rangeOthersRows = workbook.ActiveSheet.Range[$"G{startRowNumber}:R{endRowNumber + 7}"];
            SetFormatAndNumber(rangeOthersRows);

            var rangePercentage = workbook.ActiveSheet.Range[$"F{startRowNumber}:F{endRowNumber + 1}"];
            SetFormatPercentageAndNumber(rangePercentage);

            var rangePercentageTauxFrais = workbook.ActiveSheet.Range[$"b{endRowNumber + 4}"];
            SetFormatPercentageAndNumber(rangePercentageTauxFrais);

        }

        private static void SetFormatPercentageAndNumber(IRange range)
        {
            foreach (var cell in range.Cells)
            {
                SetFormat(cell, "0.00%");
                SetNumber(cell);
            }
        }

        private static void SetFormatAndNumber(IRange range)
        {
            foreach (var cell in range.Cells)
            {
                SetFormat(cell, NumberFormat);
                SetNumber(cell);
            }
        }

        private static void SetFormat(IRange range2, string rangeFormat)
        {

            range2.NumberFormat = rangeFormat;

        }

        private static void SetNumber(IRange range2)
        {
            if (!string.IsNullOrEmpty(range2.Value))
            {
                double resultNumber;

                if (double.TryParse(range2.Text, out resultNumber))
                {
                    range2.Number = resultNumber;
                }
            }
        }

    }

}