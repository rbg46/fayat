using System.Collections.Generic;
using Fred.Business.CompteExploitation.TableauSynthese.Models;

namespace Fred.Business.CompteExploitation.TableauSynthese.Services.Rows
{
    public class TableauSyntheseCalculatedFieldsService : ITableauSyntheseCalculatedFieldsService
    {
        public void ComputeFields(List<TableauSyntheseDepenseExportModel> tableauSyntheseDepenseExportModels)
        {
            if (tableauSyntheseDepenseExportModels == null)
                throw new System.ArgumentNullException(nameof(tableauSyntheseDepenseExportModels));


            foreach (var model in tableauSyntheseDepenseExportModels)
            {
                //calculs
                model.MoisMontantTotal = model.MoisMontantComptabilise + model.MoisMontantCorrectif;
                model.MoisMontantTotalPrevious = model.MoisMontantComptabilisePrevious + model.MoisMontantCorrectifPrevious;
                model.MoisPourcentAvancement = model.MontantBudget == 0 ? 0 : model.MoisMontantAvancement / model.MontantBudget;
                model.MoisEcartCumul = model.MoisMontantAvancement - model.MoisMontantTotal;
                model.MoisEcartCumulPrevious = model.MoisMontantAvancementPrevious - model.MoisMontantTotalPrevious;
                model.MoisEcart = model.MoisEcartCumul - model.MoisEcartCumulPrevious;
                model.FinAffaireRad = model.MontantBudget - model.MoisMontantAvancement;
                model.FinAffaireRadPrevious = model.MontantBudget - model.MoisMontantAvancementPrevious;
                model.FinAffaireMontantActualise = model.MoisMontantTotal + model.FinAffaireRad + model.FinAffaireAjustementRad;
                model.FinAffaireMontantActualisePrevious = model.MoisMontantTotalPrevious + model.FinAffaireRadPrevious + model.FinAffaireAjustementRadPrevious;
                model.FinAffaireEcartCumul = model.MontantBudget - model.FinAffaireMontantActualise;
                model.FinAffaireEcartCumulPrevious = model.MontantBudget - model.FinAffaireMontantActualisePrevious;
                model.FinAffaireEcartMois = model.FinAffaireEcartCumul - model.FinAffaireEcartCumulPrevious;

                //affichage              
                model.MontantBudgetText = FormatDecimal(model.MontantBudget);
                model.MoisPourcentAvancementText = FormatPoucentageAvancement(model.MoisPourcentAvancement);
                model.MoisMontantAvancementText = FormatDecimal(model.MoisMontantAvancement);
                model.MoisMontantComptabiliseText = FormatDecimal(model.MoisMontantComptabilise);
                model.MoisMontantCorrectifText = FormatDecimal(model.MoisMontantCorrectif);
                model.MoisMontantTotalText = FormatDecimal(model.MoisMontantTotal);
                model.MoisEcartCumulText = FormatDecimal(model.MoisEcartCumul);
                model.MoisEcartText = FormatDecimal(model.MoisEcart);
                model.FinAffaireRadText = FormatDecimal(model.FinAffaireRad);
                model.FinAffaireAjustementRadText = FormatDecimal(model.FinAffaireAjustementRad);
                model.FinAffaireMontantActualiseText = FormatDecimal(model.FinAffaireMontantActualise);
                model.FinAffaireEcartCumulText = FormatDecimal(model.FinAffaireEcartCumul);
                model.FinAffaireEcartMoisText = FormatDecimal(model.FinAffaireEcartMois);
            }
        }
        private string FormatDecimal(decimal value)
        {
            return string.Format("{0:0.00}", value);
        }

        private string FormatPoucentageAvancement(decimal value)
        {
            return string.Format("{0:0.00000}", System.Math.Truncate(10000 * value) / 10000);
        }

    }
}
