using System;
using Fred.Framework;
using Fred.Framework.Exceptions;
using Syncfusion.XlsIO;

namespace Fred.Business.CompteExploitation
{
    /// <summary>
    /// C   lsspour la mise en forme de page Excel
    /// </summary>
    public static class ExcelHelperTechnical
    {
        private const int DataLineStart = 11;
        private const int DataColLevelNum = 21;
        private const int DataColLibelleNum = 20;
        private const string DataColStart = "A";
        private const string DataColEnd13C = "R";
        private const string DataColLevel = "U";
        private const string DataColLibelle = "T";
        private static IStyle l1Style;
        private static IStyle l1StyleGrey;
        private static IStyle l2Style;
        private static IStyle l2StyleGrey;
        private static IStyle l3Style;
        private static IStyle l3StyleGrey;
        private static IStyle l4Style;
        private static IStyle l4StyleGrey;

        private const ExcelKnownColors DefaultBackgroundColor = ExcelKnownColors.Grey_25_percent;
        private const string NumberFormat = "#,0";

        #region Technical Excel Methods


        /// <summary>
        /// Déplace les libellés des dépenses dans les bonnes cellules
        /// </summary>
        /// <param name="filledSheet">La référence de la feuille excel</param>
        /// <param name="endLineNum">Numéro de la ligne de fin des données</param>
        /// <param name="nbCol">Nombre de colonnes</param>
        /// <param name="nbAxes">Nombre d'axes</param>
        public static void AddCorrectLibellesInCells(ref IWorksheet filledSheet, int endLineNum, int nbCol, int nbAxes)
        {
            for (int i = DataLineStart; i <= endLineNum; i++)
            {
                string currentAxe = filledSheet[DataColLevel + i].Text;
                ApplyRowStyle(ref filledSheet, i, int.Parse(currentAxe), nbCol, nbAxes);
                try
                {
                    switch (currentAxe)
                    {
                        case "0":
                            filledSheet["A" + i].Text = filledSheet[DataColLibelle + i].Text;
                            break;
                        case "1":
                            filledSheet["B" + i].Text = filledSheet[DataColLibelle + i].Text;
                            break;
                        case "2":
                            filledSheet["C" + i].Text = filledSheet[DataColLibelle + i].Text;
                            break;
                        case "3":
                            filledSheet["D" + i].Text = filledSheet[DataColLibelle + i].Text;
                            break;
                        default: break;
                    }
                }
                catch (Exception e)
                {
                    throw new FredTechnicalException(e.Message, e);
                }
            }
            HideTechnicalColumns(ref filledSheet);
        }

        /// <summary>
        /// Affecte les 4 styles de lignes du doc excel
        /// </summary>
        /// <param name="workbook">Le doc excel</param>
        /// <param name="nbAxes">Le nombre d'axes du doc actuel</param>
        public static void CreateLineStyles(ref IWorkbook workbook, int nbAxes)
        {
            CreateStyleL1(ref workbook, nbAxes);
            CreateStyleL2(ref workbook, nbAxes);
            CreateStyleL3(ref workbook, nbAxes);
            CreateStyleL4(ref workbook, nbAxes);

            CreateStyleL1Grey(ref workbook, nbAxes);
            CreateStyleL2Grey(ref workbook, nbAxes);
            CreateStyleL3Grey(ref workbook, nbAxes);
            CreateStyleL4Grey(ref workbook, nbAxes);
        }

        /// <summary>
        /// Applique un style au texte de la ligne suivant 
        /// son niveau dans l'export
        /// </summary>
        /// <param name="filledSheet">La référence de la feuille excel</param>
        /// <param name="rowNum">Numéro de ligne</param>
        /// <param name="numAxe">Axe en cours (0-3)</param>
        /// <param name="nbCol">Nombre colonnes export</param>
        /// <param name="nbAxes">Nombre d'axes</param>
        private static void ApplyRowStyle(ref IWorksheet filledSheet, int rowNum, int numAxe, int nbCol, int nbAxes)
        {
            var fullRange = DataColStart + rowNum + ":" + DataColEnd13C + rowNum;
            string greyRange1 = string.Empty;
            string greyRange2 = string.Empty;
            string cumulRange = CompteExploitationExcelHelper.GetFormatedExcelRange(DataColEnd13C, DataColEnd13C, rowNum);
            int rowHeight = 25;

            if (nbCol.Equals(4))
            {
                numAxe += 10; // On décale de 10 pour profiter du switch sans écraser les autres valeurs
                greyRange1 = CompteExploitationExcelHelper.GetFormatedExcelRange("E", "F", rowNum);
                greyRange2 = CompteExploitationExcelHelper.GetFormatedExcelRange("I", "J", rowNum);
            }

            try
            {
                switch (numAxe)
                {
                    case 0:
                        filledSheet.Range[fullRange].CellStyle = l1Style;
                        filledSheet.Range[cumulRange].CellStyle = l1StyleGrey;
                        rowHeight = nbAxes > 1 ? 35 : 25;
                        break;
                    case 1:
                        filledSheet.Range[fullRange].CellStyle = l2Style;
                        filledSheet.Range[cumulRange].CellStyle = l2StyleGrey;
                        break;
                    case 2:
                        filledSheet.Range[fullRange].CellStyle = l3Style;
                        filledSheet.Range[cumulRange].CellStyle = l3StyleGrey;
                        break;
                    case 3:
                        filledSheet.Range[fullRange].CellStyle = l4Style;
                        filledSheet.Range[cumulRange].CellStyle = l4StyleGrey;
                        break;
                    case 10:
                        // Style par défaut sur toute la ligne puis on écrase avec le style grey
                        filledSheet.Range[fullRange].CellStyle = l1Style;
                        filledSheet.Range[greyRange1].CellStyle = l1StyleGrey;
                        filledSheet.Range[greyRange2].CellStyle = l1StyleGrey;
                        rowHeight = nbAxes > 1 ? 35 : 25;
                        break;
                    case 11:
                        filledSheet.Range[fullRange].CellStyle = l2Style;
                        filledSheet.Range[greyRange1].CellStyle = l2StyleGrey;
                        filledSheet.Range[greyRange2].CellStyle = l2StyleGrey;
                        break;
                    case 12:
                        filledSheet.Range[fullRange].CellStyle = l3Style;
                        filledSheet.Range[greyRange1].CellStyle = l3StyleGrey;
                        filledSheet.Range[greyRange2].CellStyle = l3StyleGrey;
                        break;
                    case 13:
                        filledSheet.Range[fullRange].CellStyle = l4Style;
                        filledSheet.Range[greyRange1].CellStyle = l4StyleGrey;
                        filledSheet.Range[greyRange2].CellStyle = l4StyleGrey;
                        break;
                    default: break;
                }

                //Modifying the row height                
                filledSheet.SetRowHeight(rowNum, rowHeight);
            }
            catch (Exception e)
            {
                throw new FredTechnicalException(e.Message, e);
            }
        }

        /// <summary>
        /// Création style ligne 1
        /// </summary>
        /// <param name="workbook">Le doc excel</param>
        /// <param name="nbAxes">Le nombre d'axes</param>
        private static void CreateStyleL1(ref IWorkbook workbook, int nbAxes)
        {
            IStyle style = workbook.Styles.Add("StyleL1");

            SetDefaultDataCellStyleBorderProperties(ref style);
            SetL1FontStyle(ref style, nbAxes);

            l1Style = style;
        }

        private static void SetL1FontStyle(ref IStyle style, int nbAxes)
        {
            switch (nbAxes)
            {
                case 1:
                    style.Font.Bold = false; break;
                case 2:
                    style.Font.Bold = true; break;
                case 3:
                    style.Font.Underline = ExcelUnderline.Single;
                    style.Font.Bold = true;
                    break;
                case 4:
                    style.Font.Italic = true;
                    style.Font.Underline = ExcelUnderline.Single;
                    style.Font.Bold = true;
                    break;
                default: break;
            }
        }

        /// <summary>
        /// Création style ligne 1
        /// </summary>
        /// <param name="workbook">Le doc excel</param>
        /// <param name="nbAxes">Le nombre d'axes</param>
        private static void CreateStyleL1Grey(ref IWorkbook workbook, int nbAxes)
        {
            IStyle style = workbook.Styles.Add("StyleL1Grey");

            SetDefaultCellStyleBorderAndColorProperties(ref style, DefaultBackgroundColor);
            SetL1FontStyle(ref style, nbAxes);

            l1StyleGrey = style;
        }

        /// <summary>
        /// Création style ligne 2
        /// </summary>
        /// <param name="workbook">Le doc excel</param>
        /// <param name="nbAxes">Le nombre d'axes</param>
        private static void CreateStyleL2(ref IWorkbook workbook, int nbAxes)
        {
            IStyle style = workbook.Styles.Add("StyleL2");

            SetDefaultDataCellStyleBorderProperties(ref style);
            SetL2FontStyle(ref style, nbAxes);

            l2Style = style;
        }

        /// <summary>
        /// Création style ligne 1
        /// </summary>
        /// <param name="workbook">Le doc excel</param>
        /// <param name="nbAxes">Le nombre d'axes</param>
        private static void CreateStyleL2Grey(ref IWorkbook workbook, int nbAxes)
        {
            IStyle style = workbook.Styles.Add("StyleL2Grey");

            SetDefaultCellStyleBorderAndColorProperties(ref style, DefaultBackgroundColor);
            SetL2FontStyle(ref style, nbAxes);

            l2StyleGrey = style;
        }

        private static void SetL2FontStyle(ref IStyle style, int nbAxes)
        {
            switch (nbAxes)
            {
                case 2:
                    style.Font.Bold = false; break;
                case 3:
                    style.Font.Bold = true; break;
                case 4:
                    style.Font.Underline = ExcelUnderline.Single;
                    style.Font.Bold = true;
                    break;
                default: break;
            }
        }

        /// <summary>
        /// Création style ligne 3
        /// </summary>
        /// <param name="workbook">Le doc excel</param>
        /// <param name="nbAxes">Le nombre d'axes</param>
        private static void CreateStyleL3(ref IWorkbook workbook, int nbAxes)
        {
            IStyle style = workbook.Styles.Add("StyleL3");

            SetDefaultDataCellStyleBorderProperties(ref style);
            SetL3FontStyle(ref style, nbAxes);

            l3Style = style;
        }

        private static void CreateStyleL3Grey(ref IWorkbook workbook, int nbAxes)
        {
            IStyle style = workbook.Styles.Add("StyleL3Grey");

            SetDefaultCellStyleBorderAndColorProperties(ref style, DefaultBackgroundColor);
            SetL3FontStyle(ref style, nbAxes);

            l3StyleGrey = style;
        }

        private static void SetL3FontStyle(ref IStyle style, int nbAxes)
        {
            switch (nbAxes)
            {
                case 3:
                    style.Font.Bold = false; break;
                case 4:
                    style.Font.Bold = true; break;
                default: break;
            }
        }

        /// <summary>
        /// Création style ligne 4
        /// </summary>
        /// <param name="workbook">Le doc excel</param>
        /// <param name="nbAxes">Le nombre d'axes</param>
        private static void CreateStyleL4(ref IWorkbook workbook, int nbAxes)
        {
            IStyle style = workbook.Styles.Add("StyleL4");

            SetDefaultDataCellStyleBorderProperties(ref style);
            SetL4FontStyle(ref style, nbAxes);

            l4Style = style;
        }

        private static void CreateStyleL4Grey(ref IWorkbook workbook, int nbAxes)
        {
            IStyle style = workbook.Styles.Add("StyleL4Grey");

            SetDefaultCellStyleBorderAndColorProperties(ref style, DefaultBackgroundColor);
            SetL4FontStyle(ref style, nbAxes);

            l4StyleGrey = style;
        }

        private static void SetL4FontStyle(ref IStyle style, int nbAxes)
        {
            switch (nbAxes)
            {
                case 4:
                    style.Font.Bold = false; break;
                default: break;
            }
        }

        /// <summary>
        /// Création style ligne Total
        /// </summary>
        /// <param name="workbook">Le doc excel</param>
        public static IStyle CreateStyleTotal(ref IWorkbook workbook)
        {
            IStyle style = workbook.Styles.Add("StyleTotal");

            SetDefaultCellStyleBorderAndColorProperties(ref style, DefaultBackgroundColor);
            // Fond gris
            style.ColorIndex = DefaultBackgroundColor;
            style.Font.Bold = true;
            style.Font.Italic = true;
            style.Font.Underline = ExcelUnderline.Single;
            style.NumberFormat = NumberFormat;
            return style;
        }

        /// <summary>
        /// Cache les colonnes techniques
        /// </summary>
        /// <param name="filledSheet">La référence de la feuille excel</param>
        private static void HideTechnicalColumns(ref IWorksheet filledSheet)
        {
            filledSheet.ShowColumn(DataColLibelleNum, false);
            filledSheet.ShowColumn(DataColLevelNum, false);
        }

        /// <summary>
        /// Applique les propriétés par défaut des bordures
        /// des cellules de données
        /// Ligne fine de couleur blanche sur les 4 bords
        /// </summary>
        /// <param name="style">Le style</param>
        private static void SetDefaultDataCellStyleBorderProperties(ref IStyle style)
        {
            SetDefaultCellStyleBorderAndColorProperties(ref style, ExcelKnownColors.White);
        }

        /// <summary>
        /// Applique les propriétés par défaut des bordures
        /// des cellules
        /// Ligne fine de couleur borderColor sur les 4 bords
        /// </summary>
        /// <param name="style">Le style</param>
        /// <param name="borderColor">La couleur de la bordure</param>
        private static void SetDefaultCellStyleBorderAndColorProperties(ref IStyle style, ExcelKnownColors borderColor)
        {
            style.ColorIndex = borderColor;
            style.NumberFormat = NumberFormat;
        }
        #endregion
    }
}
