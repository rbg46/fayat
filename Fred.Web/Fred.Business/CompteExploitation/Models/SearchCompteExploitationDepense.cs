using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using Fred.Business.CompteExploitation;
using Fred.Business.ExplorateurDepense;
using Fred.Entities.Search;
using Fred.Framework.Extensions;
using static Fred.Entities.Constantes;

namespace Fred.CompteExploitation
{
    /// <summary>
    ///   Représente un modèle contenant les critères de filtrages des dépenses affichées dans l'explorateur des dépenses
    /// </summary>
    public class SearchCompteExploitationDepense : AbstractSearchEnt<ExplorateurDepenseGeneriqueModel>
    {
        /// <summary>
        /// Liste des axes de type Chapitres
        /// </summary>
        protected readonly List<string> AxesC = new List<string> { AnalysisAxis.Chapitre, AnalysisAxis.SousChapitre, AnalysisAxis.Ressource };

        /// <summary>
        /// Liste des axes de type Taches
        /// </summary>
        protected readonly List<string> AxesT = new List<string> { AnalysisAxis.T1, AnalysisAxis.T2, AnalysisAxis.T3 };

        /// <summary>
        /// Constructeur qui affecte les bonnes valeurs 
        /// aux divers filtres
        /// </summary>
        /// <param name="ciId">Identifiant du groupe du user</param>
        /// <param name="period">Période du compte d'exploitation</param>
        /// <param name="perimeter">Etat complet / filtré</param>
        /// <param name="valFiltre">La valeur du filtre de périmètre si type T1/T2/Chap/Sous Chap</param>
        /// <param name="analyticAxis">axes analytique (Tache>Ressource ou Ressource>Tache)</param>
        /// <param name="allAxis">Tous les axes regroupés (principal/secondaire) (T1,T2,T3) ou (Chapitre,SousChapitre,Ressource)</param>
        public SearchCompteExploitationDepense(int ciId, string period, string perimeter, int? valFiltre, string analyticAxis, string allAxis)
        {
            CiId = ciId;

            ManageAxisFilterParameter(analyticAxis, allAxis);

            switch (perimeter)
            {
                case AnalysisAxis.T1: ValeurFiltreT1 = valFiltre; break;
                case AnalysisAxis.T2: ValeurFiltreT2 = valFiltre; break;
                case AnalysisAxis.Chapitre: ValeurFiltreChap = valFiltre; break;
                case AnalysisAxis.SousChapitre: ValeurFiltreSousChap = valFiltre; break;
                case AnalysisAxis.Complet: ValeurFiltreComplet = 1; break;
                default: break;
            }
            PeriodeFin = DateTime.Parse(period);
        }

        /// <summary>
        ///   Obtient ou définit la période de fin (filtré sur date comptable des dépenses)
        /// </summary>
        public DateTime? PeriodeFin { get; set; }

        /// <summary>
        ///   Obtient ou définit l'identifiant du CI
        /// </summary>
        public int CiId { get; set; }

        /// <summary>
        ///  Obtient ou définit la date de fin de la dépense
        /// </summary>
        public DateTime? DateDepenseFin { get; set; }

        /// <summary>
        ///   Obtient ou définit la période de facturation
        /// </summary>
        public DateTime? PeriodeFacturation { get; set; }

        /// <summary>
        /// Valeur quand pas de filtre
        /// </summary>
        public int ValeurFiltreComplet { get; set; }

        /// <summary>
        /// Valeur du filtre de Tache niveau 1
        /// </summary>
        public int? ValeurFiltreT1 { get; set; }

        /// <summary>
        /// Valeur du filtre de Tache niveau 2
        /// </summary>
        public int? ValeurFiltreT2 { get; set; }

        /// <summary>
        /// Valeur du filtre de chapitre
        /// </summary>
        public int? ValeurFiltreChap { get; set; }

        /// <summary>
        /// Valeur du filtre de sous chapitre
        /// </summary>
        public int? ValeurFiltreSousChap { get; set; }

        #region Axes d'analyse

        /// <summary>
        ///   Obtient ou définit l'ordre des axes analytique (Tache>Ressource ou Ressource>Tache)
        /// </summary>
        public int AxeAnalytique { get; set; }

        /// <summary>
        ///   Obtient ou définit l'axe principal (T1,T2,T3) ou (Chapitre,SousChapitre,Ressource) : Utilisé pour la création de l'arborescence d'exploration
        /// </summary>
        public string[] AxePrincipal { get; set; }

        /// <summary>
        ///   Obtient ou définit l'axe secondaire (T1,T2,T3) ou (Chapitre,SousChapitre,Ressource) : Utilisé pour la création de l'arborescence d'exploration
        /// </summary>
        public string[] AxeSecondaire { get; set; }

        /// <summary>
        ///   Obtient ou définit l'axe 1 de recherche : Utilisé pour la récupération des dépenses lorsque l'on sélectionne l'axe
        /// </summary>
        public ExploitationExplorateurAxe Axe1 { get; set; }

        /// <summary>
        ///   Obtient ou définit l'axe 2 de recherche : Utilisé pour la récupération des dépenses lorsque l'on sélectionne l'axe
        /// </summary>
        public ExploitationExplorateurAxe Axe2 { get; set; }

        /// <summary>
        ///   Obtient ou définit l'axe 3 de recherche : Utilisé pour la récupération des dépenses lorsque l'on sélectionne l'axe
        /// </summary>
        public ExploitationExplorateurAxe Axe3 { get; set; }

        /// <summary>
        ///   Obtient ou définit l'axe 4 de recherche : Utilisé pour la récupération des dépenses lorsque l'on sélectionne l'axe
        /// </summary>
        public ExploitationExplorateurAxe Axe4 { get; set; }

        /// <inheritdoc/>
        public override Expression<Func<ExplorateurDepenseGeneriqueModel, bool>> GetPredicateWhere()
        {
            return x => (!PeriodeFin.HasValue || ((100 * PeriodeFin.Value.Year) + PeriodeFin.Value.Month >= (100 * x.DateDepense.Year) + x.DateDepense.Month))
                          && (!DateDepenseFin.HasValue || x.DateDepense.Date <= DateDepenseFin.Value.Date)
                          && (!PeriodeFacturation.HasValue || (x.DateFacture.HasValue && x.DateFacture.Value.Month == PeriodeFacturation.Value.Month && x.DateFacture.Value.Year <= PeriodeFacturation.Value.Year))
                          &&
                          (ValeurFiltreComplet == 1
                          || x.Ressource.SousChapitre.Chapitre.ChapitreId.Equals(ValeurFiltreChap) // Chapitre
                          || x.Ressource.SousChapitre.SousChapitreId.Equals(ValeurFiltreSousChap) // Sous Chapitre
                          || x.Tache.Parent.Parent.TacheId.Equals(ValeurFiltreT1) // T1
                          || x.Tache.Parent.TacheId.Equals(ValeurFiltreT2)); // T2                          
        }

        /// <summary>
        /// Affecte les valeurs de filtres
        /// </summary>
        /// <param name="analyticAxis">L'axe analytique (Tache>Ress) ou (Ress>Tache)</param>
        /// <param name="allAxis">Les axes passés en paramètres</param>
        private void ManageAxisFilterParameter(string analyticAxis, string allAxis)
        {
            List<string> selectedAxesC = new List<string>();
            List<string> selectedAxesT = new List<string>();
            int intAnalyticAxis = 0;

            string[] arrayAxis = allAxis.Split(',');

            foreach (var axis in arrayAxis)
            {
                if (AxesC.Contains(axis))
                {
                    selectedAxesC.Add(axis);
                }
                if (AxesT.Contains(axis))
                {
                    selectedAxesT.Add(axis);
                }
            }

            if (analyticAxis.Equals("RessourceTache"))
            {
                // Axes principaux Chap / SousChap / Ress
                intAnalyticAxis = ExplorateurDepenseHelper.AxeAnalytique.RessourceTache.ToIntValue();
                if (selectedAxesC.Count > 0)
                {
                    AxePrincipal = selectedAxesC.ToArray();
                    AxeSecondaire = selectedAxesT.ToArray();
                }
                else
                {
                    AxePrincipal = selectedAxesT.ToArray();
                    AxeSecondaire = new string[0];
                }
            }
            else
            {
                // Axes principaux T1 / T2 / T3
                intAnalyticAxis = ExplorateurDepenseHelper.AxeAnalytique.TacheRessource.ToIntValue();
                if (selectedAxesT.Count > 0)
                {
                    AxePrincipal = selectedAxesT.ToArray();
                    AxeSecondaire = selectedAxesC.ToArray();
                }
                else
                {
                    AxePrincipal = selectedAxesC.ToArray();
                    AxeSecondaire = new string[0];
                }
            }

            AxeAnalytique = intAnalyticAxis;
        }

        #endregion

        /// <inheritdoc/>
        protected override IOrderer<ExplorateurDepenseGeneriqueModel> GetDefaultOrderBy()
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        protected override IOrderer<ExplorateurDepenseGeneriqueModel> GetUserOrderBy()
        {
            throw new NotImplementedException();
        }
    }
}
