// <auto-generated />
using System;
using Fred.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fred.EntityFramework.Migrations
{
    [DbContext(typeof(FredDbContext))]
    [Migration("20191203132402_US8769_2")]
    partial class US8769_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fred.Entities.Adresse.AdresseEnt", b =>
                {
                    b.Property<int?>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("DateCreation");

                    b.Property<DateTime?>("DateModification");

                    b.Property<string>("Ligne")
                        .HasMaxLength(250);

                    b.Property<int?>("PaysId");

                    b.Property<string>("Ville")
                        .HasMaxLength(50);

                    b.HasKey("AdresseId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("PaysId");

                    b.ToTable("FRED_ADRESSE");
                });

            modelBuilder.Entity("Fred.Entities.Affectation.AffectationEnt", b =>
                {
                    b.Property<int>("AffectationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CiId");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelegue");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("PersonnelId");

                    b.HasKey("AffectationId");

                    b.HasIndex("CiId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("FRED_AFFECTATION");
                });

            modelBuilder.Entity("Fred.Entities.Affectation.AstreinteEnt", b =>
                {
                    b.Property<int>("AstreintId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffectationId");

                    b.Property<DateTime>("DateAstreinte")
                        .HasColumnType("datetime");

                    b.HasKey("AstreintId");

                    b.HasIndex("AffectationId");

                    b.ToTable("FRED_ASTREINTE");
                });

            modelBuilder.Entity("Fred.Entities.Affectation.EquipeEnt", b =>
                {
                    b.Property<int>("EquipeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProprietaireId");

                    b.HasKey("EquipeId");

                    b.HasIndex("ProprietaireId");

                    b.ToTable("FRED_EQUIPE");
                });

            modelBuilder.Entity("Fred.Entities.Affectation.EquipePersonnelEnt", b =>
                {
                    b.Property<int>("EquipePersonnelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EquipePersoId");

                    b.Property<int>("PersonnelId");

                    b.HasKey("EquipePersonnelId");

                    b.HasIndex("EquipePersoId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("FRED_EQUIPE_PERSONNEL");
                });

            modelBuilder.Entity("Fred.Entities.AssocieSepEnt", b =>
                {
                    b.Property<int>("AssocieSepId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssocieSepParentId");

                    b.Property<int>("FournisseurId");

                    b.Property<decimal>("QuotePart")
                        .HasColumnType("numeric(12, 2)");

                    b.Property<int>("SocieteAssocieeId");

                    b.Property<int>("SocieteId");

                    b.Property<int>("TypeParticipationSepId");

                    b.HasKey("AssocieSepId");

                    b.HasIndex("AssocieSepParentId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("SocieteAssocieeId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("TypeParticipationSepId");

                    b.ToTable("FRED_ASSOCIE_SEP");
                });

            modelBuilder.Entity("Fred.Entities.AuthentificationLogEnt", b =>
                {
                    b.Property<int>("AuthentificationLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdressIp");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<int>("ErrorOrigin");

                    b.Property<int>("ErrorType");

                    b.Property<string>("Login");

                    b.Property<string>("RequestedUrl");

                    b.Property<string>("TechnicalError");

                    b.HasKey("AuthentificationLogId");

                    b.ToTable("FRED_AUTHENTIFICATION_LOG");
                });

            modelBuilder.Entity("Fred.Entities.Avis.AvisCommandeAvenantEnt", b =>
                {
                    b.Property<int?>("AvisCommandeAvenantId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AvisId");

                    b.Property<int?>("CommandeAvenantId");

                    b.HasKey("AvisCommandeAvenantId");

                    b.HasIndex("AvisId");

                    b.HasIndex("CommandeAvenantId");

                    b.ToTable("FRED_AVIS_COMMANDE_AVENANT");
                });

            modelBuilder.Entity("Fred.Entities.Avis.AvisCommandeEnt", b =>
                {
                    b.Property<int?>("AvisCommandeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AvisId");

                    b.Property<int?>("CommandeId");

                    b.HasKey("AvisCommandeId");

                    b.HasIndex("AvisId");

                    b.HasIndex("CommandeId");

                    b.ToTable("FRED_AVIS_COMMANDE");
                });

            modelBuilder.Entity("Fred.Entities.Avis.AvisEnt", b =>
                {
                    b.Property<int?>("AvisId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("DateCreation");

                    b.Property<DateTime?>("DateModification");

                    b.Property<int?>("DestinataireId");

                    b.Property<int?>("ExpediteurId");

                    b.Property<int>("TypeAvis");

                    b.HasKey("AvisId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("DestinataireId");

                    b.HasIndex("ExpediteurId");

                    b.ToTable("FRED_AVIS");
                });

            modelBuilder.Entity("Fred.Entities.Bareme.BaremeExploitationCIEnt", b =>
                {
                    b.Property<int>("BaremeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int>("CIId");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<int>("DeviseId");

                    b.Property<DateTime>("PeriodeDebut")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PeriodeFin")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Prix")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("PrixChauffeur")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("PrixConduite")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int?>("ReferentielEtenduId")
                        .IsRequired();

                    b.Property<int>("Statut");

                    b.Property<int>("UniteId");

                    b.HasKey("BaremeId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("CIId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("ReferentielEtenduId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_BAREME_EXPLOITATION_CI");
                });

            modelBuilder.Entity("Fred.Entities.Bareme.BaremeExploitationOrganisationEnt", b =>
                {
                    b.Property<int>("BaremeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<int>("DeviseId");

                    b.Property<int>("OrganisationId");

                    b.Property<DateTime>("PeriodeDebut")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PeriodeFin")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Prix")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("PrixChauffeur")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("PrixConduite")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("RessourceId");

                    b.Property<int>("Statut");

                    b.Property<int>("UniteId");

                    b.HasKey("BaremeId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("RessourceId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_BAREME_EXPLOITATION_ORGANISATION");
                });

            modelBuilder.Entity("Fred.Entities.Bareme.SurchargeBaremeExploitationCIEnt", b =>
                {
                    b.Property<int>("SurchargeBaremeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int>("CIId");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<int>("DeviseId");

                    b.Property<int?>("MaterielId");

                    b.Property<DateTime>("PeriodeDebut")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PeriodeFin")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonnelId");

                    b.Property<decimal?>("Prix")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("PrixChauffeur")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("PrixConduite")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("ReferentielEtenduId");

                    b.Property<int>("Type");

                    b.Property<int>("UniteId");

                    b.HasKey("SurchargeBaremeId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("CIId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("MaterielId");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("ReferentielEtenduId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_BAREME_EXPLOITATION_CI_SURCHARGE");
                });

            modelBuilder.Entity("Fred.Entities.Budget.Avancement.AvancementEnt", b =>
                {
                    b.Property<int>("AvancementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvancementEtatId");

                    b.Property<int>("BudgetSousDetailId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("CiId");

                    b.Property<decimal>("DAD")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<int>("DeviseId");

                    b.Property<int>("Periode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<decimal?>("PourcentageSousDetailAvance");

                    b.Property<decimal?>("QuantiteSousDetailAvancee")
                        .HasColumnType("decimal(20, 8)");

                    b.HasKey("AvancementId");

                    b.HasIndex("AvancementEtatId");

                    b.HasIndex("BudgetSousDetailId");

                    b.HasIndex("CiId");

                    b.HasIndex("DeviseId");

                    b.ToTable("FRED_AVANCEMENT");
                });

            modelBuilder.Entity("Fred.Entities.Budget.Avancement.AvancementEtatEnt", b =>
                {
                    b.Property<int>("AvancementEtatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("Libelle");

                    b.HasKey("AvancementEtatId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.ToTable("FRED_AVANCEMENT_ETAT");
                });

            modelBuilder.Entity("Fred.Entities.Budget.Avancement.AvancementTacheEnt", b =>
                {
                    b.Property<int>("AvancementTacheId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BudgetId");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(150);

                    b.Property<int>("Periode");

                    b.Property<int>("TacheId");

                    b.HasKey("AvancementTacheId");

                    b.HasIndex("TacheId");

                    b.HasIndex("BudgetId", "Periode", "TacheId")
                        .IsUnique()
                        .HasName("IX_UniqueBudgetPeriodeTache");

                    b.ToTable("FRED_AVANCEMENT_TACHE");
                });

            modelBuilder.Entity("Fred.Entities.Budget.Avancement.AvancementWorkflowEnt", b =>
                {
                    b.Property<int>("AvancementWorkflowId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuteurId");

                    b.Property<int>("AvancementId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("EtatCibleId");

                    b.Property<int?>("EtatInitialId");

                    b.HasKey("AvancementWorkflowId");

                    b.HasIndex("AuteurId");

                    b.HasIndex("AvancementId");

                    b.HasIndex("EtatCibleId");

                    b.HasIndex("EtatInitialId");

                    b.ToTable("FRED_AVANCEMENT_WORKFLOW");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetBibliothequePrixEnt", b =>
                {
                    b.Property<int>("BudgetBibliothequePrixId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<int>("DeviseId");

                    b.Property<int>("OrganisationId");

                    b.HasKey("BudgetBibliothequePrixId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("FRED_BUDGET_BIBLIOTHEQUE_PRIX");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetBibliothequePrixItemEnt", b =>
                {
                    b.Property<int>("BudgetBibliothequePrixItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<int>("BudgetBibliothequePrixId");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Prix")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("RessourceId");

                    b.Property<int?>("UniteId");

                    b.HasKey("BudgetBibliothequePrixItemId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("BudgetBibliothequePrixId");

                    b.HasIndex("RessourceId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_BUDGET_BIBLIOTHEQUE_PRIX_ITEM");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetBibliothequePrixItemValuesHistoEnt", b =>
                {
                    b.Property<int>("BudgetBibliothequePrixItemValuesHistoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateInsertion")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId");

                    b.Property<decimal?>("Prix")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int?>("UniteId");

                    b.HasKey("BudgetBibliothequePrixItemValuesHistoId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_BUDGET_BIBLIOTHEQUE_PRIX_ITEM_VALUES_HISTO");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetCopyHistoEnt", b =>
                {
                    b.Property<int>("BudgetCopyHistoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BibliothequePrixSourceCIId");

                    b.Property<int?>("BudgetEntBudgetId");

                    b.Property<int>("BudgetId");

                    b.Property<int>("BudgetSourceCIId");

                    b.Property<string>("BudgetSourceVersion")
                        .IsRequired();

                    b.Property<DateTime?>("DateCopy")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("BudgetCopyHistoId");

                    b.HasIndex("BibliothequePrixSourceCIId");

                    b.HasIndex("BudgetEntBudgetId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("BudgetSourceCIId");

                    b.ToTable("FRED_BUDGET_COPY_HISTO");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetEnt", b =>
                {
                    b.Property<int>("BudgetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BudgetEtatId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("CiId");

                    b.Property<DateTime?>("DateDeleteNotificationNewTask")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppressionBudget")
                        .HasColumnType("datetime");

                    b.Property<int>("DeviseId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Libelle")
                        .HasMaxLength(50);

                    b.Property<bool>("Partage")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("PeriodeDebut");

                    b.Property<int?>("PeriodeFin");

                    b.Property<string>("Version")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.HasKey("BudgetId");

                    b.HasIndex("BudgetEtatId");

                    b.HasIndex("CiId");

                    b.HasIndex("DeviseId");

                    b.ToTable("FRED_BUDGET");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetEtatEnt", b =>
                {
                    b.Property<int>("BudgetEtatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("Libelle");

                    b.HasKey("BudgetEtatId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.ToTable("FRED_BUDGET_ETAT");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetRevisionEnt", b =>
                {
                    b.Property<int>("BudgetRevisionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurValidationId");

                    b.Property<int>("BudgetId");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateaValider")
                        .HasColumnType("datetime");

                    b.Property<int>("RevisionNumber");

                    b.Property<int>("Statut");

                    b.HasKey("BudgetRevisionId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurValidationId");

                    b.HasIndex("BudgetId");

                    b.ToTable("FRED_BUDGET_REVISION");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetSousDetailEnt", b =>
                {
                    b.Property<int>("BudgetSousDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BudgetT4SousDetailId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BudgetT4Id");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Montant")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<decimal?>("PU")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<decimal?>("Quantite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20, 3)")
                        .HasDefaultValue(0m);

                    b.Property<string>("QuantiteFormule")
                        .HasMaxLength(200);

                    b.Property<decimal?>("QuantiteSD")
                        .HasColumnType("decimal(20, 3)");

                    b.Property<string>("QuantiteSDFormule")
                        .HasMaxLength(200);

                    b.Property<int>("RessourceId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("UniteId");

                    b.HasKey("BudgetSousDetailId");

                    b.HasIndex("BudgetT4Id");

                    b.HasIndex("RessourceId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_BUDGET_T4_RESSOURCE");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetT4Ent", b =>
                {
                    b.Property<int>("BudgetT4Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BudgetId");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500);

                    b.Property<bool>("IsReadOnly")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<decimal?>("MontantT4")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<decimal?>("PU")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20, 8)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("QuantiteARealiser")
                        .HasColumnType("decimal(20, 3)");

                    b.Property<decimal?>("QuantiteDeBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20, 3)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("T3Id");

                    b.Property<int>("T4Id");

                    b.Property<int?>("TypeAvancement")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("UniteId");

                    b.Property<int>("VueSD")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("BudgetT4Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("T3Id");

                    b.HasIndex("T4Id");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_BUDGET_T4");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetTacheEnt", b =>
                {
                    b.Property<int>("BudgetTacheId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BudgetId");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(150);

                    b.Property<int>("TacheId");

                    b.HasKey("BudgetTacheId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("TacheId");

                    b.ToTable("FRED_BUDGET_TACHE");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetWorkflowEnt", b =>
                {
                    b.Property<int>("BudgetWorkflowId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuteurId");

                    b.Property<int>("BudgetId");

                    b.Property<string>("Commentaire");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("EtatCibleId");

                    b.Property<int?>("EtatInitialId");

                    b.HasKey("BudgetWorkflowId");

                    b.HasIndex("AuteurId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("EtatCibleId");

                    b.HasIndex("EtatInitialId");

                    b.ToTable("FRED_BUDGET_WORKFLOW");
                });

            modelBuilder.Entity("Fred.Entities.Budget.ControleBudgetaireEnt", b =>
                {
                    b.Property<int>("ControleBudgetaireId");

                    b.Property<int>("Periode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("ControleBudgetaireEtatId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("ControleBudgetaireId", "Periode");

                    b.HasIndex("ControleBudgetaireEtatId");

                    b.ToTable("FRED_CONTROLE_BUDGETAIRE");
                });

            modelBuilder.Entity("Fred.Entities.Budget.ControleBudgetaireValeursEnt", b =>
                {
                    b.Property<int>("ControleBudgetaireId");

                    b.Property<int>("Periode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("TacheId");

                    b.Property<int>("RessourceId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<decimal>("Ajustement")
                        .HasColumnType("decimal(20, 3)");

                    b.Property<string>("CommentaireAjustement");

                    b.Property<decimal>("Pfa");

                    b.HasKey("ControleBudgetaireId", "Periode", "TacheId", "RessourceId");

                    b.HasIndex("RessourceId");

                    b.HasIndex("TacheId");

                    b.ToTable("FRED_CONTROLE_BUDGETAIRE_VALEURS");
                });

            modelBuilder.Entity("Fred.Entities.Budget.Recette.AvancementRecetteEnt", b =>
                {
                    b.Property<int>("AvancementRecetteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AjustementFraisGeneraux")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<decimal>("AjustementFraisGenerauxPFA")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<decimal>("AutresRecettes");

                    b.Property<decimal>("AutresRecettesPFA");

                    b.Property<decimal>("AvancementAjustementFraisGeneraux")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<decimal>("AvancementTauxFraisGeneraux")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<int>("BudgetRecetteId");

                    b.Property<decimal>("Correctif")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<decimal>("MontantAvenants");

                    b.Property<decimal>("MontantAvenantsPFA");

                    b.Property<decimal>("MontantMarche");

                    b.Property<decimal>("MontantMarchePFA");

                    b.Property<decimal>("PenalitesEtRetenues");

                    b.Property<decimal>("PenalitesEtRetenuesPFA");

                    b.Property<int>("Periode");

                    b.Property<decimal>("Revision");

                    b.Property<decimal>("RevisionPFA");

                    b.Property<decimal>("SommeAValoir");

                    b.Property<decimal>("SommeAValoirPFA");

                    b.Property<decimal>("TauxFraisGeneraux")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TauxFraisGenerauxPFA")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TravauxSupplementaires");

                    b.Property<decimal>("TravauxSupplementairesPFA");

                    b.HasKey("AvancementRecetteId");

                    b.HasIndex("BudgetRecetteId");

                    b.ToTable("FRED_AVANCEMENT_RECETTE");
                });

            modelBuilder.Entity("Fred.Entities.Budget.Recette.BudgetRecetteEnt", b =>
                {
                    b.Property<int>("BudgetRecetteId")
                        .HasDefaultValue(0);

                    b.Property<decimal?>("AutresRecettes");

                    b.Property<decimal?>("MontantAvenants");

                    b.Property<decimal?>("MontantMarche");

                    b.Property<decimal?>("PenalitesEtRetenues");

                    b.Property<decimal?>("Revision");

                    b.Property<decimal?>("SommeAValoir");

                    b.Property<decimal?>("TravauxSupplementaires");

                    b.HasKey("BudgetRecetteId");

                    b.ToTable("FRED_BUDGET_RECETTE");
                });

            modelBuilder.Entity("Fred.Entities.Budget.Recette.TacheRecetteEnt", b =>
                {
                    b.Property<int>("TacheRecetteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviseId");

                    b.Property<double?>("Recette")
                        .HasColumnType("float");

                    b.Property<int>("TacheId");

                    b.HasKey("TacheRecetteId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("TacheId");

                    b.ToTable("FRED_TACHE_RECETTE");
                });

            modelBuilder.Entity("Fred.Entities.Budget.RessourceTacheDeviseEnt", b =>
                {
                    b.Property<int>("RessourceTacheDeviseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviseId");

                    b.Property<double?>("PrixUnitaire")
                        .HasColumnType("float");

                    b.Property<int>("RessourceTacheId");

                    b.HasKey("RessourceTacheDeviseId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("RessourceTacheId");

                    b.ToTable("FRED_RESSOURCE_TACHE_DEVISE");
                });

            modelBuilder.Entity("Fred.Entities.Budget.RessourceTacheEnt", b =>
                {
                    b.Property<int>("RessourceTacheId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Formule")
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("PrixUnitaire")
                        .HasColumnType("float");

                    b.Property<double?>("Quantite")
                        .HasColumnType("float");

                    b.Property<double?>("QuantiteBase")
                        .HasColumnType("float");

                    b.Property<int>("RessourceId");

                    b.Property<int>("TacheId");

                    b.HasKey("RessourceTacheId");

                    b.HasIndex("RessourceId");

                    b.HasIndex("TacheId");

                    b.ToTable("FRED_RESSOURCE_TACHE");
                });

            modelBuilder.Entity("Fred.Entities.CI.CICodeMajorationEnt", b =>
                {
                    b.Property<int>("CiCodeMajorationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CiId");

                    b.Property<int>("CodeMajorationId");

                    b.HasKey("CiCodeMajorationId");

                    b.HasIndex("CiId");

                    b.HasIndex("CodeMajorationId");

                    b.ToTable("FRED_CI_CODE_MAJORATION");
                });

            modelBuilder.Entity("Fred.Entities.CI.CIDeviseEnt", b =>
                {
                    b.Property<int>("CiDeviseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CiId");

                    b.Property<int>("DeviseId");

                    b.Property<bool>("Reference");

                    b.HasKey("CiDeviseId");

                    b.HasIndex("CiId");

                    b.HasIndex("DeviseId");

                    b.ToTable("FRED_CI_DEVISE");
                });

            modelBuilder.Entity("Fred.Entities.CI.CIEnt", b =>
                {
                    b.Property<int>("CiId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .HasMaxLength(500);

                    b.Property<string>("Adresse2");

                    b.Property<string>("Adresse3");

                    b.Property<string>("AdresseFacturation")
                        .HasMaxLength(500);

                    b.Property<string>("AdresseLivraison")
                        .HasMaxLength(500);

                    b.Property<int?>("CITypeId");

                    b.Property<bool>("CarburantActif")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("ChantierFRED")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CodeExterne");

                    b.Property<string>("CodeInterne")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CONCAT(Code, '-', EtablissementComptableId, '-', SocieteId)");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(20);

                    b.Property<string>("CodePostalFacturation")
                        .HasMaxLength(20);

                    b.Property<string>("CodePostalLivraison")
                        .HasMaxLength(20);

                    b.Property<int?>("CompteInterneSepId");

                    b.Property<DateTime?>("DateFermeture")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateImport")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOuverture")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description");

                    b.Property<int?>("DureeChantier");

                    b.Property<string>("EnteteLivraison")
                        .HasMaxLength(100);

                    b.Property<int?>("EtablissementComptableId");

                    b.Property<bool>("FacturationEtablissement");

                    b.Property<decimal?>("FraisGeneraux")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<DateTime?>("HoraireDebutM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("HoraireDebutS")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("HoraireFinM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("HoraireFinS")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAbsence");

                    b.Property<bool>("IsAstreinteActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDisableForPointage");

                    b.Property<double?>("LatitudeLocalisation");

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.Property<double?>("LongitudeLocalisation");

                    b.Property<int?>("MontantDeviseId");

                    b.Property<decimal?>("MontantHT")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ObjectifHeuresInsertion");

                    b.Property<int>("OrganisationId");

                    b.Property<int?>("PaysFacturationId");

                    b.Property<int?>("PaysId");

                    b.Property<int?>("PaysLivraisonId");

                    b.Property<int?>("ResponsableAdministratifId");

                    b.Property<string>("ResponsableChantier")
                        .HasMaxLength(100);

                    b.Property<int?>("ResponsableChantierId");

                    b.Property<bool>("Sep")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("SocieteId");

                    b.Property<decimal?>("TauxHoraire")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<string>("TypeCI")
                        .HasMaxLength(100);

                    b.Property<string>("Ville")
                        .HasMaxLength(500);

                    b.Property<string>("VilleFacturation")
                        .HasMaxLength(500);

                    b.Property<string>("VilleLivraison")
                        .HasMaxLength(500);

                    b.Property<bool>("ZoneModifiable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.HasKey("CiId");

                    b.HasIndex("CITypeId");

                    b.HasIndex("CodeInterne")
                        .IsUnique()
                        .HasName("IX_UniqueCodeInterne");

                    b.HasIndex("CompteInterneSepId");

                    b.HasIndex("EtablissementComptableId");

                    b.HasIndex("MontantDeviseId");

                    b.HasIndex("OrganisationId")
                        .IsUnique();

                    b.HasIndex("PaysFacturationId");

                    b.HasIndex("PaysId");

                    b.HasIndex("PaysLivraisonId");

                    b.HasIndex("ResponsableAdministratifId");

                    b.HasIndex("ResponsableChantierId");

                    b.HasIndex("SocieteId");

                    b.ToTable("FRED_CI");
                });

            modelBuilder.Entity("Fred.Entities.CI.CIPrimeEnt", b =>
                {
                    b.Property<int>("CiPrimeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<int>("CiId");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<int>("PrimeId");

                    b.HasKey("CiPrimeId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("CiId");

                    b.HasIndex("PrimeId");

                    b.ToTable("FRED_CI_PRIME");
                });

            modelBuilder.Entity("Fred.Entities.CI.CIRessourceEnt", b =>
                {
                    b.Property<int>("CiRessourceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CiId");

                    b.Property<decimal?>("Consommation")
                        .IsRequired()
                        .HasColumnType("decimal(7, 2)");

                    b.Property<int>("RessourceId");

                    b.HasKey("CiRessourceId");

                    b.HasIndex("CiId");

                    b.HasIndex("RessourceId");

                    b.ToTable("FRED_CI_RESSOURCE");
                });

            modelBuilder.Entity("Fred.Entities.CI.CITypeEnt", b =>
                {
                    b.Property<int>("CITypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(5);

                    b.Property<string>("Designation");

                    b.Property<string>("RessourceKey");

                    b.HasKey("CITypeId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.ToTable("FRED_CI_TYPE");
                });

            modelBuilder.Entity("Fred.Entities.Carburant.CarburantEnt", b =>
                {
                    b.Property<int>("CarburantId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("UniteId");

                    b.HasKey("CarburantId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_CARBURANT");
                });

            modelBuilder.Entity("Fred.Entities.Carburant.CarburantOrganisationDeviseEnt", b =>
                {
                    b.Property<int>("CarburantOrganisationDeviseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<int>("CarburantId");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<int>("DeviseId");

                    b.Property<int>("OrganisationId");

                    b.Property<DateTime>("Periode")
                        .HasColumnType("date");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(10, 5)");

                    b.HasKey("CarburantOrganisationDeviseId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("CarburantId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("FRED_CARBURANT_ORGANISATION_DEVISE");
                });

            modelBuilder.Entity("Fred.Entities.Commande.CommandeAvenantEnt", b =>
                {
                    b.Property<int>("CommandeAvenantId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurValidationId");

                    b.Property<int>("CommandeId");

                    b.Property<DateTime?>("DateCreation");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime");

                    b.Property<string>("HangfireJobId");

                    b.Property<int>("NumeroAvenant");

                    b.HasKey("CommandeAvenantId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurValidationId");

                    b.HasIndex("CommandeId");

                    b.ToTable("FRED_COMMANDE_AVENANT");
                });

            modelBuilder.Entity("Fred.Entities.Commande.CommandeContratInterimaireEnt", b =>
                {
                    b.Property<int>("CommandeId")
                        .HasColumnName("CommandeId");

                    b.Property<int>("ContratId");

                    b.Property<int>("CiId");

                    b.Property<int>("InterimaireId");

                    b.Property<int>("RapportLigneId");

                    b.HasKey("CommandeId", "ContratId", "CiId");

                    b.HasIndex("CiId");

                    b.HasIndex("CommandeId")
                        .IsUnique();

                    b.HasIndex("ContratId");

                    b.HasIndex("InterimaireId");

                    b.HasIndex("RapportLigneId");

                    b.ToTable("FRED_COMMANDE_CONTRAT_INTERIMAIRE");
                });

            modelBuilder.Entity("Fred.Entities.Commande.CommandeEnt", b =>
                {
                    b.Property<int>("CommandeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccordCadre");

                    b.Property<int?>("AgenceId")
                        .HasColumnName("AgenceId");

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurPremiereImpressionBrouillonId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<bool>("Carburant");

                    b.Property<int?>("CiId")
                        .IsRequired();

                    b.Property<bool>("CommandeManuelle");

                    b.Property<string>("CommentaireFournisseur")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("CommentaireInterne")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("ConditionPrestation");

                    b.Property<string>("ConditionSociete");

                    b.Property<int?>("ContactId");

                    b.Property<string>("ContactTel")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCloture");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateMiseADispo")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatePremiereImpressionBrouillon")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatePremiereReception")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateProchaineReception")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime");

                    b.Property<string>("DelaiLivraison")
                        .HasMaxLength(100);

                    b.Property<int?>("DeviseId");

                    b.Property<int?>("DureeAbonnement");

                    b.Property<bool>("EntretienJournalier");

                    b.Property<bool>("EntretienMecanique");

                    b.Property<string>("FacturationAdresse")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("FacturationCPostale")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("FacturationPaysId");

                    b.Property<string>("FacturationVille")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("FournisseurAdresse");

                    b.Property<string>("FournisseurCPostal");

                    b.Property<int?>("FournisseurId");

                    b.Property<int?>("FournisseurPaysId");

                    b.Property<string>("FournisseurProvisoire");

                    b.Property<string>("FournisseurVille");

                    b.Property<bool>("FraisAmortissement");

                    b.Property<bool>("FraisAssurance");

                    b.Property<int?>("FrequenceAbonnement");

                    b.Property<string>("HangfireJobId");

                    b.Property<bool>("IsAbonnement")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnergie")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMaterielAPointer")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Justificatif")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Libelle")
                        .HasMaxLength(250);

                    b.Property<string>("LivraisonAdresse")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("LivraisonCPostale")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("LivraisonEntete")
                        .HasMaxLength(250);

                    b.Property<int?>("LivraisonPaysId");

                    b.Property<string>("LivraisonVille")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<bool>("Lubrifiant");

                    b.Property<bool>("MOConduite");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("NumeroCommandeExterne");

                    b.Property<string>("NumeroContratExterne");

                    b.Property<int?>("OldFournisseurId");

                    b.Property<int?>("StatutCommandeId")
                        .IsRequired();

                    b.Property<int?>("SuiviId");

                    b.Property<int?>("SystemeExterneId");

                    b.Property<int?>("TypeEnergieId");

                    b.Property<int?>("TypeId");

                    b.Property<int?>("ValideurId");

                    b.HasKey("CommandeId");

                    b.HasIndex("AgenceId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurPremiereImpressionBrouillonId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("CiId");

                    b.HasIndex("ContactId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("FacturationPaysId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("FournisseurPaysId");

                    b.HasIndex("LivraisonPaysId");

                    b.HasIndex("Numero");

                    b.HasIndex("OldFournisseurId");

                    b.HasIndex("StatutCommandeId");

                    b.HasIndex("SuiviId");

                    b.HasIndex("SystemeExterneId");

                    b.HasIndex("TypeEnergieId");

                    b.HasIndex("TypeId");

                    b.HasIndex("ValideurId");

                    b.ToTable("FRED_COMMANDE");
                });

            modelBuilder.Entity("Fred.Entities.Commande.CommandeLigneAvenantEnt", b =>
                {
                    b.Property<int>("CommandeLigneAvenantId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvenantId");

                    b.Property<bool>("IsDiminution");

                    b.HasKey("CommandeLigneAvenantId");

                    b.HasIndex("AvenantId");

                    b.ToTable("FRED_COMMANDE_LIGNE_AVENANT");
                });

            modelBuilder.Entity("Fred.Entities.Commande.CommandeLigneEnt", b =>
                {
                    b.Property<int>("CommandeLigneId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AvenantLigneId");

                    b.Property<int>("CommandeId");

                    b.Property<string>("Commentaire");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.Property<int?>("MaterielId");

                    b.Property<string>("NumeroCommandeLigneExterne");

                    b.Property<int?>("NumeroLigne");

                    b.Property<decimal>("PUHT")
                        .HasColumnType("numeric(11, 2)");

                    b.Property<int?>("PersonnelId");

                    b.Property<decimal>("Quantite")
                        .HasColumnType("numeric(11, 3)");

                    b.Property<int?>("RessourceId");

                    b.Property<int?>("TacheId");

                    b.Property<int?>("UniteId");

                    b.HasKey("CommandeLigneId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AvenantLigneId");

                    b.HasIndex("CommandeId");

                    b.HasIndex("MaterielId");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("RessourceId");

                    b.HasIndex("TacheId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_COMMANDE_LIGNE");
                });

            modelBuilder.Entity("Fred.Entities.Commande.CommandeTypeEnt", b =>
                {
                    b.Property<int>("CommandeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("CommandeTypeId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.ToTable("FRED_COMMANDE_TYPE");
                });

            modelBuilder.Entity("Fred.Entities.Commande.StatutCommandeEnt", b =>
                {
                    b.Property<int>("StatutCommandeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.HasKey("StatutCommandeId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FRED_STATUT_COMMANDE");
                });

            modelBuilder.Entity("Fred.Entities.DatesCalendrierPaie.DatesCalendrierPaieEnt", b =>
                {
                    b.Property<int>("DatesCalendrierPaieId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateFinPointages")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTransfertPointages")
                        .HasColumnType("datetime");

                    b.Property<int>("SocieteId");

                    b.HasKey("DatesCalendrierPaieId");

                    b.HasIndex("SocieteId");

                    b.ToTable("FRED_DATES_CALENDRIER_PAIE");
                });

            modelBuilder.Entity("Fred.Entities.DatesClotureComptable.DatesClotureComptableEnt", b =>
                {
                    b.Property<int>("DatesClotureComptableId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Annee")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<string>("AuteurSap");

                    b.Property<int>("CiId");

                    b.Property<DateTime?>("DateArretSaisie")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCloture")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTransfertFAR")
                        .HasColumnType("datetime");

                    b.Property<bool>("Historique")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Mois")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("DatesClotureComptableId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("CiId");

                    b.ToTable("FRED_DATES_CLOTURE_COMPTABLE");
                });

            modelBuilder.Entity("Fred.Entities.Delegation.DelegationEnt", b =>
                {
                    b.Property<int>("DelegationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Commentaire");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateDeDebut")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateDeFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDesactivation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<int>("PersonnelAuteurId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("PersonnelDelegantId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("PersonnelDelegueId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("DelegationId");

                    b.HasIndex("PersonnelAuteurId");

                    b.HasIndex("PersonnelDelegantId");

                    b.HasIndex("PersonnelDelegueId");

                    b.ToTable("FRED_DELEGATION");
                });

            modelBuilder.Entity("Fred.Entities.Depense.DepenseAchatEnt", b =>
                {
                    b.Property<int>("DepenseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AfficherPuHt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("AfficherQuantite")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<int?>("AuteurVisaReceptionId");

                    b.Property<int?>("CiId");

                    b.Property<int?>("CommandeLigneId");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500);

                    b.Property<string>("CompteComptable");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateComptable")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateControleFar")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFacturation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOperation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateVisaReception")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepenseParentId");

                    b.Property<int?>("DepenseTypeId");

                    b.Property<int?>("DeviseId");

                    b.Property<bool?>("ErreurControleFar");

                    b.Property<int?>("FactureLigneEntLigneFactureId");

                    b.Property<bool>("FarAnnulee")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("FournisseurId");

                    b.Property<int?>("GroupeRemplacementTacheId");

                    b.Property<string>("HangfireJobId");

                    b.Property<bool>("IsReceptionInterimaire")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsReceptionMaterielExterne")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.Property<decimal?>("MontantHtInitial");

                    b.Property<string>("NumeroBL")
                        .HasMaxLength(50);

                    b.Property<decimal>("PUHT")
                        .HasColumnType("numeric(18, 8)");

                    b.Property<decimal>("Quantite")
                        .HasColumnType("numeric(12, 3)");

                    b.Property<decimal>("QuantiteDepense")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<int?>("RessourceId");

                    b.Property<int?>("StatutVisaId");

                    b.Property<int?>("TacheId");

                    b.Property<int?>("UniteId");

                    b.HasKey("DepenseId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("AuteurVisaReceptionId");

                    b.HasIndex("CiId");

                    b.HasIndex("CommandeLigneId");

                    b.HasIndex("DepenseParentId");

                    b.HasIndex("DepenseTypeId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("FactureLigneEntLigneFactureId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("GroupeRemplacementTacheId");

                    b.HasIndex("RessourceId");

                    b.HasIndex("TacheId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_DEPENSE_ACHAT");
                });

            modelBuilder.Entity("Fred.Entities.Depense.DepenseTemporaireEnt", b =>
                {
                    b.Property<int>("DepenseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("CiId");

                    b.Property<int?>("CommandeLigneId");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReception")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepenseOrigineId");

                    b.Property<int?>("DepenseParentId");

                    b.Property<int?>("DeviseId");

                    b.Property<int?>("FactureId")
                        .IsRequired();

                    b.Property<int?>("FactureLigneId");

                    b.Property<int?>("FournisseurId");

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.Property<string>("NumeroBL")
                        .HasMaxLength(50);

                    b.Property<decimal>("PUHT")
                        .HasColumnType("numeric(11, 2)");

                    b.Property<decimal>("Quantite")
                        .HasColumnType("numeric(11, 2)");

                    b.Property<int?>("RessourceId");

                    b.Property<int?>("TacheId");

                    b.Property<string>("TypeDepense")
                        .HasMaxLength(20);

                    b.Property<int?>("UniteId");

                    b.HasKey("DepenseId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("CiId");

                    b.HasIndex("CommandeLigneId");

                    b.HasIndex("DepenseOrigineId");

                    b.HasIndex("DepenseParentId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("FactureId");

                    b.HasIndex("FactureLigneId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("RessourceId");

                    b.HasIndex("TacheId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_DEPENSE_TEMPORAIRE");
                });

            modelBuilder.Entity("Fred.Entities.Depense.DepenseTypeEnt", b =>
                {
                    b.Property<int>("DepenseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Libelle");

                    b.HasKey("DepenseTypeId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.ToTable("FRED_DEPENSE_TYPE");
                });

            modelBuilder.Entity("Fred.Entities.Depense.GroupeRemplacementTacheEnt", b =>
                {
                    b.Property<int>("GroupeRemplacementTacheId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("GroupeRemplacementTacheId");

                    b.ToTable("FRED_GROUPE_REMPLACEMENT_TACHE");
                });

            modelBuilder.Entity("Fred.Entities.Depense.LotFarEnt", b =>
                {
                    b.Property<int>("LotFarId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuteurCreationId");

                    b.Property<DateTime>("DateComptable")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<int>("NumeroLot");

                    b.HasKey("LotFarId");

                    b.HasIndex("AuteurCreationId");

                    b.ToTable("FRED_LOT_FAR");
                });

            modelBuilder.Entity("Fred.Entities.Depense.RemplacementTacheEnt", b =>
                {
                    b.Property<int>("RemplacementTacheId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Annulable");

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<DateTime?>("DateComptableRemplacement")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateRemplacement")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<int>("GroupeRemplacementTacheId");

                    b.Property<int>("RangRemplacement");

                    b.Property<int>("TacheId");

                    b.HasKey("RemplacementTacheId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("GroupeRemplacementTacheId");

                    b.HasIndex("TacheId");

                    b.ToTable("FRED_REMPLACEMENT_TACHE");
                });

            modelBuilder.Entity("Fred.Entities.Directory.ExternalDirectoryEnt", b =>
                {
                    b.Property<int>("FayatAccessDirectoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateExpiration")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateExpirationGuid")
                        .HasColumnType("datetime");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsActived");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("FayatAccessDirectoryId");

                    b.ToTable("FRED_EXTERNALDIRECTORY");
                });

            modelBuilder.Entity("Fred.Entities.EcritureComptable.EcritureComptableCumulEnt", b =>
                {
                    b.Property<int>("EcritureComptableCumulId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CiId");

                    b.Property<DateTime?>("DateComptable")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<int>("EcritureComptableId");

                    b.Property<decimal>("Montant");

                    b.Property<string>("NumeroPiece")
                        .IsRequired();

                    b.HasKey("EcritureComptableCumulId");

                    b.HasIndex("EcritureComptableId");

                    b.ToTable("FRED_ECRITURE_COMPTABLE_CUMUL");
                });

            modelBuilder.Entity("Fred.Entities.EcritureComptable.EcritureComptableEnt", b =>
                {
                    b.Property<int>("EcritureComptableId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CiId");

                    b.Property<string>("CodeRef")
                        .HasColumnName("CodeRef");

                    b.Property<int?>("CommandeId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("DateComptable")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<int>("DeviseId");

                    b.Property<int>("FamilleOperationDiverseId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("JournalId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Libelle");

                    b.Property<decimal>("Montant");

                    b.Property<int?>("NatureId");

                    b.Property<string>("NumeroPiece");

                    b.Property<decimal>("Quantite")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("EcritureComptableId");

                    b.HasIndex("CiId");

                    b.HasIndex("CommandeId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("FamilleOperationDiverseId");

                    b.HasIndex("JournalId");

                    b.HasIndex("NatureId");

                    b.ToTable("FRED_ECRITURE_COMPTABLE");
                });

            modelBuilder.Entity("Fred.Entities.EcritureComptable.EcritureComptableRejetEnt", b =>
                {
                    b.Property<int>("EcritureComptableRejet")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EcritureComptableRejetId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CiID");

                    b.Property<DateTime>("DateRejet")
                        .HasColumnType("datetime");

                    b.Property<string>("NumeroPiece");

                    b.Property<string>("RejetMessage");

                    b.HasKey("EcritureComptableRejet");

                    b.ToTable("FRED_ECRITURE_COMPTABLE_REJET");
                });

            modelBuilder.Entity("Fred.Entities.Email.EmailSouscriptionEnt", b =>
                {
                    b.Property<int>("EmailSouscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateDernierEnvoie")
                        .HasColumnType("datetime");

                    b.Property<int>("PersonnelId");

                    b.Property<int>("SouscriptionKey")
                        .HasColumnName("EmailSouscriptionKey");

                    b.HasKey("EmailSouscriptionId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("FRED_EMAIL_SUBSCRIPTION");
                });

            modelBuilder.Entity("Fred.Entities.Facturation.FacturationEnt", b =>
                {
                    b.Property<int>("FacturationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuteurCreation");

                    b.Property<int?>("CiId");

                    b.Property<int?>("CommandeId");

                    b.Property<string>("Commentaire");

                    b.Property<string>("CompteComptable");

                    b.Property<DateTime>("DateComptable")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DatePieceSap")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateSaisie")
                        .HasColumnType("datetime");

                    b.Property<string>("DebitCredit");

                    b.Property<int?>("DepenseAchatAjustementId");

                    b.Property<int?>("DepenseAchatFactureEcartId");

                    b.Property<int?>("DepenseAchatFactureId");

                    b.Property<int?>("DepenseAchatFarId");

                    b.Property<int?>("DepenseAchatReceptionId");

                    b.Property<int?>("DeviseId");

                    b.Property<decimal?>("EcartPu")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("EcartQuantite")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<int>("FacturationTypeId");

                    b.Property<string>("FournisseurCode");

                    b.Property<bool>("IsFacturationFinale");

                    b.Property<string>("LitigeCode");

                    b.Property<decimal>("MontantHT");

                    b.Property<decimal>("MontantTotalHT")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("MouvementFarHt")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<string>("NatureCode");

                    b.Property<string>("NumeroFactureFMFI");

                    b.Property<string>("NumeroFactureFournisseur");

                    b.Property<string>("NumeroFactureSAP");

                    b.Property<decimal>("Quantite")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("QuantiteFar")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("QuantiteReconduite")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("TotalFarHt")
                        .HasColumnType("numeric(18, 3)");

                    b.HasKey("FacturationId");

                    b.HasIndex("CiId");

                    b.HasIndex("CommandeId");

                    b.HasIndex("DepenseAchatAjustementId");

                    b.HasIndex("DepenseAchatFactureEcartId");

                    b.HasIndex("DepenseAchatFactureId");

                    b.HasIndex("DepenseAchatFarId");

                    b.HasIndex("DepenseAchatReceptionId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("FacturationTypeId");

                    b.ToTable("FRED_FACTURATION");
                });

            modelBuilder.Entity("Fred.Entities.Facturation.FacturationTypeEnt", b =>
                {
                    b.Property<int>("FacturationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Libelle");

                    b.HasKey("FacturationTypeId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.ToTable("FRED_FACTURATION_TYPE");
                });

            modelBuilder.Entity("Fred.Entities.Facture.FactureEnt", b =>
                {
                    b.Property<int>("FactureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurClotureId");

                    b.Property<int?>("AuteurRapprochementId");

                    b.Property<bool>("Cachee");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500);

                    b.Property<string>("CompteFournisseur")
                        .HasMaxLength(50);

                    b.Property<string>("CompteGeneral")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateCloture")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateComptable")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateEcheance")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFacture")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateGestion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateImport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateRapprochement")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeviseId");

                    b.Property<int?>("EtablissementId");

                    b.Property<string>("Folio")
                        .HasMaxLength(10);

                    b.Property<int?>("FournisseurId");

                    b.Property<int?>("JournalId");

                    b.Property<string>("ModeReglement")
                        .HasMaxLength(100);

                    b.Property<decimal?>("MontantHT")
                        .HasColumnType("numeric(15, 3)");

                    b.Property<decimal>("MontantTTC")
                        .HasColumnType("numeric(15, 3)");

                    b.Property<decimal?>("MontantTVA")
                        .HasColumnType("numeric(15, 3)");

                    b.Property<string>("NoBonCommande")
                        .HasMaxLength(100);

                    b.Property<string>("NoBonlivraison")
                        .HasMaxLength(100);

                    b.Property<string>("NoFMFI")
                        .HasMaxLength(50);

                    b.Property<string>("NoFacture")
                        .HasMaxLength(50);

                    b.Property<string>("NoFactureFournisseur")
                        .HasMaxLength(100);

                    b.Property<int?>("SocieteId");

                    b.Property<string>("Typefournisseur")
                        .HasMaxLength(50);

                    b.Property<int?>("UtilisateurCreationId");

                    b.Property<int?>("UtilisateurModificationId");

                    b.Property<int?>("UtilisateurSupressionId");

                    b.HasKey("FactureId");

                    b.HasIndex("AuteurClotureId");

                    b.HasIndex("AuteurRapprochementId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("EtablissementId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("JournalId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("UtilisateurCreationId");

                    b.HasIndex("UtilisateurModificationId");

                    b.HasIndex("UtilisateurSupressionId");

                    b.ToTable("FRED_FACTURE");
                });

            modelBuilder.Entity("Fred.Entities.Facture.FactureLigneEnt", b =>
                {
                    b.Property<int>("LigneFactureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AffaireId");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<int?>("FactureId");

                    b.Property<decimal?>("MontantHT")
                        .HasColumnType("numeric(15, 3)");

                    b.Property<int?>("NatureId");

                    b.Property<string>("NoBonLivraison")
                        .HasMaxLength(100);

                    b.Property<decimal?>("PrixUnitaire")
                        .HasColumnType("numeric(15, 3)");

                    b.Property<decimal?>("Quantite")
                        .HasColumnType("numeric(15, 3)");

                    b.Property<int?>("UtilisateurCreationId");

                    b.Property<int?>("UtilisateurModificationId");

                    b.Property<int?>("UtilisateurSuppressionId");

                    b.HasKey("LigneFactureId");

                    b.HasIndex("AffaireId");

                    b.HasIndex("FactureId");

                    b.HasIndex("NatureId");

                    b.HasIndex("UtilisateurCreationId");

                    b.HasIndex("UtilisateurModificationId");

                    b.HasIndex("UtilisateurSuppressionId");

                    b.ToTable("FRED_FACTURE_LIGNE");
                });

            modelBuilder.Entity("Fred.Entities.Favori.FavoriEnt", b =>
                {
                    b.Property<int>("FavoriId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Couleur")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Libelle")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte[]>("Search")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TypeFavori")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UrlFavori")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("UtilisateurId");

                    b.HasKey("FavoriId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("FRED_FAVORI_UTILISATEUR");
                });

            modelBuilder.Entity("Fred.Entities.FeatureFlipping.FeatureFlippingEnt", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime>("DateActivation")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActived");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<string>("UserActivation");

                    b.HasKey("FeatureId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueFeatureCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_UniqueFeatureName");

                    b.ToTable("FRED_FEATURE_FLIPPING");
                });

            modelBuilder.Entity("Fred.Entities.Fonctionnalite.FonctionnaliteEnt", b =>
                {
                    b.Property<int>("FonctionnaliteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<string>("Description");

                    b.Property<bool>("HorsOrga");

                    b.Property<string>("Libelle")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("ModuleId");

                    b.HasKey("FonctionnaliteId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.HasIndex("ModuleId");

                    b.ToTable("FRED_FONCTIONNALITE");
                });

            modelBuilder.Entity("Fred.Entities.FonctionnaliteDesactive.FonctionnaliteDesactiveEnt", b =>
                {
                    b.Property<int>("FonctionnaliteDesactiveId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FonctionnaliteId");

                    b.Property<int>("SocieteId");

                    b.HasKey("FonctionnaliteDesactiveId");

                    b.HasIndex("FonctionnaliteId");

                    b.HasIndex("SocieteId");

                    b.ToTable("FRED_FONCTIONNALITE_DESACTIVE");
                });

            modelBuilder.Entity("Fred.Entities.Groupe.GroupeEnt", b =>
                {
                    b.Property<int>("GroupeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .IsFixedLength(true);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .IsFixedLength(true);

                    b.Property<int>("OrganisationId");

                    b.Property<int>("PoleId");

                    b.HasKey("GroupeId");

                    b.HasIndex("OrganisationId")
                        .IsUnique();

                    b.HasIndex("PoleId");

                    b.HasIndex("Code", "PoleId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndPole");

                    b.ToTable("FRED_GROUPE");
                });

            modelBuilder.Entity("Fred.Entities.Holding.HoldingEnt", b =>
                {
                    b.Property<int>("HoldingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .IsFixedLength(true);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .IsFixedLength(true);

                    b.Property<int>("OrganisationId");

                    b.HasKey("HoldingId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.HasIndex("OrganisationId")
                        .IsUnique();

                    b.ToTable("FRED_HOLDING");
                });

            modelBuilder.Entity("Fred.Entities.Image.ImageEnt", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Credit");

                    b.Property<bool?>("IsDefault");

                    b.Property<string>("Path");

                    b.Property<int>("Type");

                    b.HasKey("ImageId");

                    b.ToTable("FRED_IMAGE");
                });

            modelBuilder.Entity("Fred.Entities.Import.SystemeExterneEnt", b =>
                {
                    b.Property<int>("SystemeExterneId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("LibelleAffiche")
                        .IsRequired()
                        .HasColumnName("Libelle")
                        .HasMaxLength(100);

                    b.Property<int>("SocieteId");

                    b.Property<int>("SystemeExterneTypeId");

                    b.Property<int>("SystemeImportId");

                    b.HasKey("SystemeExterneId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("SystemeExterneTypeId");

                    b.HasIndex("SystemeImportId");

                    b.ToTable("FRED_SYSTEME_EXTERNE");
                });

            modelBuilder.Entity("Fred.Entities.Import.SystemeExterneTypeEnt", b =>
                {
                    b.Property<int>("SystemeExterneTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("SystemeExterneTypeId");

                    b.ToTable("FRED_SYSTEME_EXTERNE_TYPE");
                });

            modelBuilder.Entity("Fred.Entities.Import.SystemeImportEnt", b =>
                {
                    b.Property<int>("SystemeImportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("Libelle");

                    b.HasKey("SystemeImportId");

                    b.ToTable("FRED_SYSTEME_IMPORT");
                });

            modelBuilder.Entity("Fred.Entities.Import.TranscoImportEnt", b =>
                {
                    b.Property<int>("TranscoImportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeExterne")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CodeInterne")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SocieteId");

                    b.Property<int>("SystemeImportId");

                    b.HasKey("TranscoImportId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("SystemeImportId");

                    b.HasIndex("CodeExterne", "SocieteId", "SystemeImportId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeExterneAndSocieteAndSystemImport");

                    b.HasIndex("CodeInterne", "SocieteId", "SystemeImportId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeInterneAndSocieteAndSystemImport");

                    b.ToTable("FRED_TRANSCO_IMPORT");
                });

            modelBuilder.Entity("Fred.Entities.IndemniteDeplacement.IndemniteDeplacementCalculTypeEnt", b =>
                {
                    b.Property<int>("IndemniteDeplacementCalculTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Libelle")
                        .HasMaxLength(50);

                    b.HasKey("IndemniteDeplacementCalculTypeId");

                    b.ToTable("FRED_INDEMNITE_DEPLACEMENT_CALCUL_TYPE");
                });

            modelBuilder.Entity("Fred.Entities.IndemniteDeplacement.IndemniteDeplacementEnt", b =>
                {
                    b.Property<int>("IndemniteDeplacementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreation");

                    b.Property<int?>("AuteurModification");

                    b.Property<int?>("AuteurSuppression");

                    b.Property<int>("CiId");

                    b.Property<int?>("CodeDeplacementId");

                    b.Property<int?>("CodeZoneDeplacementId");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDernierCalcul")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<bool>("IVD");

                    b.Property<double?>("NombreKilometreVOChantierRattachement");

                    b.Property<double?>("NombreKilometreVODomicileChantier");

                    b.Property<double?>("NombreKilometreVODomicileRattachement");

                    b.Property<double>("NombreKilometres");

                    b.Property<int>("PersonnelId");

                    b.Property<bool>("SaisieManuelle");

                    b.HasKey("IndemniteDeplacementId");

                    b.HasIndex("AuteurCreation");

                    b.HasIndex("AuteurModification");

                    b.HasIndex("AuteurSuppression");

                    b.HasIndex("CiId");

                    b.HasIndex("CodeDeplacementId");

                    b.HasIndex("CodeZoneDeplacementId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("FRED_INDEMNITE_DEPLACEMENT");
                });

            modelBuilder.Entity("Fred.Entities.Journal.JournalEnt", b =>
                {
                    b.Property<int>("JournalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurClotureId");

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<DateTime?>("DateCloture")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<bool>("ImportFacture")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("ParentFamilyODWithOrder")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("ParentFamilyODWithoutOrder")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("SocieteId");

                    b.Property<string>("TypeJournal")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("JournalId");

                    b.HasIndex("AuteurClotureId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("Code", "SocieteId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndSociete");

                    b.ToTable("FRED_JOURNAL");
                });

            modelBuilder.Entity("Fred.Entities.Log.NLogEnt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Application")
                        .HasMaxLength(50);

                    b.Property<string>("Callsite");

                    b.Property<string>("Exception");

                    b.Property<bool>("Https");

                    b.Property<string>("Level")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Logged")
                        .HasColumnType("datetime");

                    b.Property<string>("Logger")
                        .HasMaxLength(250);

                    b.Property<string>("Message");

                    b.Property<string>("Port");

                    b.Property<string>("RemoteAddress")
                        .HasMaxLength(100);

                    b.Property<string>("ServerAddress")
                        .HasMaxLength(100);

                    b.Property<string>("ServerName");

                    b.Property<string>("Url");

                    b.Property<string>("UserName")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("NLogs","nlog");
                });

            modelBuilder.Entity("Fred.Entities.LogImport.LogImportEnt", b =>
                {
                    b.Property<int>("LogImportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data")
                        .IsRequired();

                    b.Property<DateTime>("DateImport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("MessageErreur")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("TypeImport")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("LogImportId");

                    b.ToTable("FRED_LOG_IMPORT");
                });

            modelBuilder.Entity("Fred.Entities.Module.ModuleEnt", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<string>("Description");

                    b.Property<string>("Libelle")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("ModuleId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.ToTable("FRED_MODULE");
                });

            modelBuilder.Entity("Fred.Entities.ModuleDesactive.ModuleDesactiveEnt", b =>
                {
                    b.Property<int>("ModuleDesactiveId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModuleId");

                    b.Property<int>("SocieteId");

                    b.HasKey("ModuleDesactiveId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SocieteId");

                    b.ToTable("FRED_MODULE_DESACTIVE");
                });

            modelBuilder.Entity("Fred.Entities.Moyen.AffectationMoyenEnt", b =>
                {
                    b.Property<int>("AffectationMoyenId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffectationMoyenTypeId");

                    b.Property<int?>("CiId");

                    b.Property<string>("Commentaire");

                    b.Property<int?>("ConducteurId");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive");

                    b.Property<int>("MaterielId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("MaterielLocationId");

                    b.Property<int?>("PersonnelId");

                    b.Property<int?>("SiteId");

                    b.HasKey("AffectationMoyenId");

                    b.HasIndex("AffectationMoyenTypeId");

                    b.HasIndex("CiId");

                    b.HasIndex("ConducteurId");

                    b.HasIndex("MaterielId");

                    b.HasIndex("MaterielLocationId");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("SiteId");

                    b.ToTable("FRED_AFFECTATION_MOYEN");
                });

            modelBuilder.Entity("Fred.Entities.Moyen.AffectationMoyenFamilleEnt", b =>
                {
                    b.Property<int>("AffectationMoyenFamilleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Libelle");

                    b.HasKey("AffectationMoyenFamilleId");

                    b.ToTable("FRED_AFFECTATION_MOYEN_FAMILLE");
                });

            modelBuilder.Entity("Fred.Entities.Moyen.AffectationMoyenTypeEnt", b =>
                {
                    b.Property<int>("AffectationMoyenTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffectationMoyenFamilleId");

                    b.Property<string>("CiCode");

                    b.Property<string>("Code");

                    b.Property<string>("Libelle");

                    b.HasKey("AffectationMoyenTypeId");

                    b.HasIndex("AffectationMoyenFamilleId");

                    b.ToTable("FRED_AFFECTATION_MOYEN_TYPE");
                });

            modelBuilder.Entity("Fred.Entities.Moyen.MaterielLocationEnt", b =>
                {
                    b.Property<int>("MaterielLocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<string>("Immatriculation");

                    b.Property<string>("Libelle");

                    b.Property<int>("MaterielId");

                    b.HasKey("MaterielLocationId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("MaterielId");

                    b.ToTable("FRED_MATERIEL_LOCATION");
                });

            modelBuilder.Entity("Fred.Entities.Moyen.SiteEnt", b =>
                {
                    b.Property<int>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<string>("Libelle");

                    b.HasKey("SiteId");

                    b.ToTable("FRED_SITE");
                });

            modelBuilder.Entity("Fred.Entities.Notification.NotificationEnt", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<bool>("EstConsulte");

                    b.Property<string>("Message")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<int>("TypeNotification")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("UtilisateurId");

                    b.HasKey("NotificationId");

                    b.ToTable("FRED_NOTIFICATION_UTILISATEUR");
                });

            modelBuilder.Entity("Fred.Entities.ObjectifFlash.ObjectifFlashEnt", b =>
                {
                    b.Property<int>("ObjectifFlashId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<int?>("CiId")
                        .IsRequired();

                    b.Property<DateTime?>("DateCloture")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActif")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Libelle");

                    b.Property<decimal?>("TotalMontantObjectif")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("ObjectifFlashId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("CiId");

                    b.ToTable("FRED_OBJECTIF_FLASH");
                });

            modelBuilder.Entity("Fred.Entities.ObjectifFlash.ObjectifFlashTacheEnt", b =>
                {
                    b.Property<int>("ObjectifFlashTacheId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ObjectifFlashId");

                    b.Property<decimal?>("QuantiteObjectif")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("TacheId");

                    b.Property<int?>("UniteId");

                    b.HasKey("ObjectifFlashTacheId");

                    b.HasIndex("ObjectifFlashId");

                    b.HasIndex("TacheId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_OBJECTIF_FLASH_TACHE");
                });

            modelBuilder.Entity("Fred.Entities.ObjectifFlash.ObjectifFlashTacheJournalisationEnt", b =>
                {
                    b.Property<int>("ObjectifFlashTacheJournalisationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateJournalisation")
                        .HasColumnType("datetime");

                    b.Property<int>("ObjectifFlashTacheId");

                    b.Property<decimal?>("QuantiteObjectif")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("ObjectifFlashTacheJournalisationId");

                    b.HasIndex("ObjectifFlashTacheId");

                    b.ToTable("FRED_OBJECTIF_FLASH_TACHE_JOURNALISATION");
                });

            modelBuilder.Entity("Fred.Entities.ObjectifFlash.ObjectifFlashTacheRapportRealiseEnt", b =>
                {
                    b.Property<int>("ObjectifFlashTacheRapportRealiseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateRealise")
                        .HasColumnType("datetime");

                    b.Property<int>("ObjectifFlashTacheId");

                    b.Property<decimal?>("QuantiteRealise")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("RapportId");

                    b.HasKey("ObjectifFlashTacheRapportRealiseId");

                    b.HasIndex("ObjectifFlashTacheId");

                    b.HasIndex("RapportId");

                    b.ToTable("FRED_OBJECTIF_FLASH_TACHE_RAPPORT_REALISE");
                });

            modelBuilder.Entity("Fred.Entities.ObjectifFlash.ObjectifFlashTacheRessourceEnt", b =>
                {
                    b.Property<int>("ObjectifFlashTacheRessourceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRepartitionKey");

                    b.Property<int>("ObjectifFlashTacheId");

                    b.Property<decimal?>("PuHT")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("QuantiteObjectif")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("RessourceId");

                    b.Property<int?>("UniteId");

                    b.HasKey("ObjectifFlashTacheRessourceId");

                    b.HasIndex("ObjectifFlashTacheId");

                    b.HasIndex("RessourceId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_OBJECTIF_FLASH_TACHE_RESSOURCE");
                });

            modelBuilder.Entity("Fred.Entities.ObjectifFlash.ObjectifFlashTacheRessourceJournalisationEnt", b =>
                {
                    b.Property<int>("ObjectifFlashTacheRessourceJournalisationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateJournalisation")
                        .HasColumnType("datetime");

                    b.Property<int>("ObjectifFlashTacheRessourceId");

                    b.Property<decimal?>("QuantiteObjectif")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("ObjectifFlashTacheRessourceJournalisationId");

                    b.HasIndex("ObjectifFlashTacheRessourceId");

                    b.ToTable("FRED_OBJECTIF_FLASH_TACHE_RESSOURCE_JOURNALISATION");
                });

            modelBuilder.Entity("Fred.Entities.OperationDiverse.FamilleOperationDiverseEnt", b =>
                {
                    b.Property<int>("FamilleOperationDiverseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("CategoryValorisationId");

                    b.Property<string>("Code")
                        .HasMaxLength(6);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAccrued")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsValued")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Libelle")
                        .HasMaxLength(250);

                    b.Property<bool>("MustHaveOrder")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("RessourceId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("SocieteId");

                    b.Property<int>("TacheId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("FamilleOperationDiverseId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("Code", "SocieteId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndSociete");

                    b.ToTable("FRED_FAMILLE_OPERATION_DIVERSE");
                });

            modelBuilder.Entity("Fred.Entities.OperationDiverse.OperationDiverseEnt", b =>
                {
                    b.Property<int>("OperationDiverseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuteurCreationId");

                    b.Property<int>("CiId");

                    b.Property<bool>("Cloturee");

                    b.Property<int?>("CommandeId");

                    b.Property<string>("Commentaire");

                    b.Property<DateTime?>("DateCloture")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateComptable")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<int>("DeviseId");

                    b.Property<int?>("EcritureComptableId");

                    b.Property<bool>("EstUnAbonnement");

                    b.Property<int>("FamilleOperationDiverseId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("GroupeRemplacementTacheId");

                    b.Property<string>("Libelle")
                        .HasMaxLength(250);

                    b.Property<decimal>("Montant");

                    b.Property<bool>("OdEcart")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OperationDiverseMereIdAbonnement");

                    b.Property<decimal>("PUHT");

                    b.Property<decimal>("Quantite");

                    b.Property<int?>("RapportLigneId");

                    b.Property<int>("RessourceId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("TacheId");

                    b.Property<int>("UniteId");

                    b.HasKey("OperationDiverseId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("CiId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("EcritureComptableId");

                    b.HasIndex("FamilleOperationDiverseId");

                    b.HasIndex("GroupeRemplacementTacheId");

                    b.HasIndex("OperationDiverseMereIdAbonnement");

                    b.HasIndex("RessourceId");

                    b.HasIndex("TacheId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_OPERATION_DIVERSE");
                });

            modelBuilder.Entity("Fred.Entities.Organisation.AffectationSeuilOrgaEnt", b =>
                {
                    b.Property<int>("SeuilRoleOrgaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviseId");

                    b.Property<int?>("OrganisationId");

                    b.Property<int?>("RoleId");

                    b.Property<decimal>("Seuil")
                        .HasColumnType("decimal(11, 2)");

                    b.HasKey("SeuilRoleOrgaId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("RoleId");

                    b.ToTable("FRED_ROLE_ORGANISATION_DEVISE");
                });

            modelBuilder.Entity("Fred.Entities.Organisation.OrganisationEnt", b =>
                {
                    b.Property<int>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PereId");

                    b.Property<int>("TypeOrganisationId");

                    b.HasKey("OrganisationId");

                    b.HasIndex("PereId");

                    b.HasIndex("TypeOrganisationId");

                    b.ToTable("FRED_ORGANISATION");
                });

            modelBuilder.Entity("Fred.Entities.Organisation.OrganisationLienEnt", b =>
                {
                    b.Property<int>("OrganisationLiensId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrgaLiensId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EtablissementComptableId");

                    b.Property<int>("OrganisationId");

                    b.Property<int?>("SocieteId");

                    b.HasKey("OrganisationLiensId");

                    b.HasIndex("EtablissementComptableId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("SocieteId");

                    b.ToTable("FRED_ORGA_LIENS");
                });

            modelBuilder.Entity("Fred.Entities.Organisation.TypeOrganisationEnt", b =>
                {
                    b.Property<int>("TypeOrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("TypeOrganisationId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueTypeOrganisationCode");

                    b.ToTable("FRED_TYPE_ORGANISATION");
                });

            modelBuilder.Entity("Fred.Entities.OrganisationGenerique.OrganisationGeneriqueEnt", b =>
                {
                    b.Property<int>("OrganisationGeneriqueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrganisationId");

                    b.HasKey("OrganisationGeneriqueId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.HasIndex("OrganisationId")
                        .IsUnique();

                    b.ToTable("FRED_ORGANISATION_GENERIQUE");
                });

            modelBuilder.Entity("Fred.Entities.ParametreEnt", b =>
                {
                    b.Property<int>("ParametreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("GroupeId");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Valeur")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("ParametreId");

                    b.HasIndex("GroupeId");

                    b.ToTable("FRED_PARAMETRE");
                });

            modelBuilder.Entity("Fred.Entities.Params.ParamKeyEnt", b =>
                {
                    b.Property<int>("ParamKeyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuteurCreationId");

                    b.Property<int>("AuteurModificationId");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.HasKey("ParamKeyId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.ToTable("FRED_PARAM_KEY");
                });

            modelBuilder.Entity("Fred.Entities.Params.ParamValueEnt", b =>
                {
                    b.Property<int>("ParamValueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<int>("OrganisationId");

                    b.Property<int>("ParamKeyId");

                    b.Property<string>("Valeur")
                        .HasColumnName("Value")
                        .HasMaxLength(500);

                    b.HasKey("ParamValueId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("ParamKeyId");

                    b.ToTable("FRED_PARAM_VALUE");
                });

            modelBuilder.Entity("Fred.Entities.Permission.PermissionEnt", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("Libelle");

                    b.Property<bool>("PermissionContextuelle");

                    b.Property<string>("PermissionKey");

                    b.Property<int>("PermissionType");

                    b.HasKey("PermissionId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.ToTable("FRED_PERMISSION");
                });

            modelBuilder.Entity("Fred.Entities.PermissionFonctionnalite.PermissionFonctionnaliteEnt", b =>
                {
                    b.Property<int>("PermissionFonctionnaliteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FonctionnaliteId");

                    b.Property<int>("PermissionId");

                    b.HasKey("PermissionFonctionnaliteId");

                    b.HasIndex("FonctionnaliteId");

                    b.HasIndex("PermissionId");

                    b.ToTable("FRED_PERMISSION_FONCTIONNALITE");
                });

            modelBuilder.Entity("Fred.Entities.Personnel.Interimaire.ContratInterimaireEnt", b =>
                {
                    b.Property<int>("ContratInterimaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PersonnelFournisseurSocieteId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CiId");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500);

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime");

                    b.Property<bool>("Energie");

                    b.Property<int>("FournisseurId");

                    b.Property<bool>("HeuresInsertion");

                    b.Property<int>("InterimaireId");

                    b.Property<int>("MotifRemplacementId");

                    b.Property<string>("NumContrat")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int?>("PersonnelRemplaceId");

                    b.Property<string>("Qualification")
                        .HasMaxLength(150);

                    b.Property<int>("RessourceId");

                    b.Property<int>("SocieteId");

                    b.Property<int>("Souplesse");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Statut");

                    b.Property<decimal>("TarifUnitaire");

                    b.Property<int>("UniteId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<decimal>("Valorisation")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.HasKey("ContratInterimaireId");

                    b.HasIndex("CiId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("InterimaireId");

                    b.HasIndex("MotifRemplacementId");

                    b.HasIndex("PersonnelRemplaceId");

                    b.HasIndex("RessourceId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_CONTRAT_INTERIMAIRE");
                });

            modelBuilder.Entity("Fred.Entities.Personnel.Interimaire.MatriculeExterneEnt", b =>
                {
                    b.Property<int>("MatriculeExterneId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("PersonnelId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("MatriculeExterneId");

                    b.HasIndex("Matricule", "Source")
                        .IsUnique()
                        .HasName("IX_UniqueMatriculeAndSource");

                    b.HasIndex("PersonnelId", "Source")
                        .IsUnique()
                        .HasName("IX_UniquePersonnelIdAndSource");

                    b.ToTable("FRED_MATRICULE_EXTERNE");
                });

            modelBuilder.Entity("Fred.Entities.Personnel.Interimaire.MotifRemplacementEnt", b =>
                {
                    b.Property<int>("MotifRemplacementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Libelle")
                        .HasMaxLength(50);

                    b.HasKey("MotifRemplacementId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.ToTable("FRED_MOTIF_REMPLACEMENT");
                });

            modelBuilder.Entity("Fred.Entities.Personnel.Interimaire.ZoneDeTravailEnt", b =>
                {
                    b.Property<int>("ContratInterimaireId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("EtablissementComptableId");

                    b.HasKey("ContratInterimaireId", "EtablissementComptableId");

                    b.HasIndex("EtablissementComptableId");

                    b.ToTable("FRED_ZONE_DE_TRAVAIL");
                });

            modelBuilder.Entity("Fred.Entities.Personnel.PersonnelEnt", b =>
                {
                    b.Property<int>("PersonnelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse1")
                        .HasMaxLength(250);

                    b.Property<string>("Adresse2")
                        .HasMaxLength(250);

                    b.Property<string>("Adresse3")
                        .HasMaxLength(250);

                    b.Property<string>("CategoriePerso")
                        .HasMaxLength(1);

                    b.Property<string>("CodeEmploi");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DateCreation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateDebutInsertion");

                    b.Property<DateTime?>("DateEntree")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFinInsertion");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSortie")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<int?>("EquipeFavoriteId");

                    b.Property<int?>("EtablissementPaieId")
                        .HasColumnName("EtablissementPayeId");

                    b.Property<int?>("EtablissementRattachementId");

                    b.Property<bool>("HeuresInsertion");

                    b.Property<bool>("IsInterimaire");

                    b.Property<bool>("IsInterne");

                    b.Property<bool>("IsPersonnelNonPointable");

                    b.Property<bool?>("IsSaisieManuelle");

                    b.Property<double?>("LatitudeDomicile");

                    b.Property<double?>("LongitudeDomicile");

                    b.Property<int?>("ManagerId");

                    b.Property<int?>("MaterielId");

                    b.Property<string>("Matricule")
                        .HasMaxLength(10);

                    b.Property<string>("Nom")
                        .HasMaxLength(150);

                    b.Property<int?>("PaysId");

                    b.Property<string>("PaysLabel")
                        .HasMaxLength(150);

                    b.Property<int?>("PersonnelImageId");

                    b.Property<string>("Prenom")
                        .HasMaxLength(150);

                    b.Property<int?>("RessourceId");

                    b.Property<int?>("SocieteId");

                    b.Property<string>("Statut")
                        .HasMaxLength(1);

                    b.Property<string>("Telephone1")
                        .HasColumnName("Tel1")
                        .HasMaxLength(50);

                    b.Property<string>("Telephone2")
                        .HasColumnName("Tel2")
                        .HasMaxLength(50);

                    b.Property<string>("TypeRattachement")
                        .HasColumnType("char")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("UtilisateurIdCreation");

                    b.Property<int?>("UtilisateurIdModification");

                    b.Property<int?>("UtilisateurIdSuppression");

                    b.Property<string>("Ville")
                        .HasMaxLength(250);

                    b.HasKey("PersonnelId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("IX_UniqueEmail")
                        .HasFilter("[Email] IS NOT NULL AND [IsInterne]=(0)");

                    b.HasIndex("EquipeFavoriteId");

                    b.HasIndex("EtablissementPaieId");

                    b.HasIndex("EtablissementRattachementId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("MaterielId");

                    b.HasIndex("PaysId");

                    b.HasIndex("PersonnelImageId");

                    b.HasIndex("RessourceId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("Matricule", "SocieteId")
                        .IsUnique()
                        .HasName("IX_UniqueMatriculeAndSociete");

                    b.ToTable("FRED_PERSONNEL");
                });

            modelBuilder.Entity("Fred.Entities.PersonnelImageEnt", b =>
                {
                    b.Property<int>("PersonnelImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonnelId");

                    b.Property<byte[]>("PhotoProfil")
                        .HasColumnType("image");

                    b.Property<byte[]>("Signature")
                        .HasColumnType("image");

                    b.HasKey("PersonnelImageId");

                    b.ToTable("FRED_PERSONNEL_IMAGE");
                });

            modelBuilder.Entity("Fred.Entities.PieceJointeCommandeEnt", b =>
                {
                    b.Property<int>("PieceJointeCommandeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int>("CommandeId");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<int>("PieceJointeId");

                    b.HasKey("PieceJointeCommandeId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("CommandeId");

                    b.HasIndex("PieceJointeId");

                    b.ToTable("FRED_PIECE_JOINTE_COMMANDE");
                });

            modelBuilder.Entity("Fred.Entities.PieceJointeEnt", b =>
                {
                    b.Property<int>("PieceJointeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<string>("Libelle")
                        .HasMaxLength(250);

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasColumnName("Url");

                    b.Property<int>("SizeInKo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("PieceJointeId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.ToTable("FRED_PIECE_JOINTE");
                });

            modelBuilder.Entity("Fred.Entities.PieceJointeReceptionEnt", b =>
                {
                    b.Property<int>("PieceJointeReceptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<int>("PieceJointeId");

                    b.Property<int>("ReceptionId");

                    b.HasKey("PieceJointeReceptionId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("PieceJointeId");

                    b.HasIndex("ReceptionId");

                    b.ToTable("FRED_PIECE_JOINTE_RECEPTION");
                });

            modelBuilder.Entity("Fred.Entities.Pole.PoleEnt", b =>
                {
                    b.Property<int>("PoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .IsFixedLength(true);

                    b.Property<int>("HoldingId");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .IsFixedLength(true);

                    b.Property<int>("OrganisationId");

                    b.HasKey("PoleId");

                    b.HasIndex("HoldingId");

                    b.HasIndex("OrganisationId")
                        .IsUnique();

                    b.HasIndex("Code", "HoldingId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndHolding");

                    b.ToTable("FRED_POLE");
                });

            modelBuilder.Entity("Fred.Entities.Rapport.PointageAnticipeEnt", b =>
                {
                    b.Property<int>("PointageAnticipeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<int>("CiId");

                    b.Property<int?>("CodeAbsenceId");

                    b.Property<int?>("CodeDeplacementId");

                    b.Property<int?>("CodeMajorationId");

                    b.Property<int?>("CodeZoneDeplacementId");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DatePointage")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<bool>("DeplacementIV");

                    b.Property<double>("HeureAbsence")
                        .HasColumnType("float");

                    b.Property<double>("HeureMajoration")
                        .HasColumnType("float");

                    b.Property<double>("HeureNormale")
                        .HasColumnType("float");

                    b.Property<bool>("IsGenerated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("NumSemaineIntemperieAbsence");

                    b.Property<int?>("PersonnelId");

                    b.Property<string>("PrenomNomTemporaire")
                        .HasMaxLength(100);

                    b.HasKey("PointageAnticipeId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("CiId");

                    b.HasIndex("CodeAbsenceId");

                    b.HasIndex("CodeDeplacementId");

                    b.HasIndex("CodeMajorationId");

                    b.HasIndex("CodeZoneDeplacementId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("FRED_POINTAGE_ANTICIPE");
                });

            modelBuilder.Entity("Fred.Entities.Rapport.PointageAnticipePrimeEnt", b =>
                {
                    b.Property<int>("PointageAnticipePrimeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("HeurePrime")
                        .HasColumnType("float");

                    b.Property<bool>("IsChecked");

                    b.Property<int>("PointageAnticipeId");

                    b.Property<int>("PrimeId");

                    b.HasKey("PointageAnticipePrimeId");

                    b.HasIndex("PointageAnticipeId");

                    b.HasIndex("PrimeId");

                    b.ToTable("FRED_POINTAGE_ANTICIPE_PRIME");
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportEnt", b =>
                {
                    b.Property<int>("RapportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<int?>("AuteurVerrouId");

                    b.Property<int>("CiId");

                    b.Property<DateTime>("DateChantier")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateValidationCDC")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateValidationCDT")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateValidationDRC")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateVerrou")
                        .HasColumnType("datetime");

                    b.Property<string>("Evenements")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("HoraireDebutM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("HoraireDebutS")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("HoraireFinM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("HoraireFinS")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsGenerated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Meteo")
                        .HasMaxLength(255);

                    b.Property<int>("RapportStatutId");

                    b.Property<int>("TypeRapport");

                    b.Property<int?>("ValideurCDCId");

                    b.Property<int?>("ValideurCDTId");

                    b.Property<int?>("ValideurDRCId");

                    b.HasKey("RapportId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("AuteurVerrouId");

                    b.HasIndex("CiId");

                    b.HasIndex("RapportStatutId");

                    b.HasIndex("ValideurCDCId");

                    b.HasIndex("ValideurCDTId");

                    b.HasIndex("ValideurDRCId");

                    b.ToTable("FRED_RAPPORT");
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportLigneAstreinteEnt", b =>
                {
                    b.Property<int>("RapportLigneAstreinteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AstreinteId");

                    b.Property<DateTime>("DateDebutAstreinte")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateFinAstreinte")
                        .HasColumnType("datetime");

                    b.Property<int>("RapportLigneId");

                    b.HasKey("RapportLigneAstreinteId");

                    b.HasIndex("AstreinteId");

                    b.HasIndex("RapportLigneId");

                    b.ToTable("FRED_RAPPORT_LIGNE_ASTREINTE");
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportLigneEnt", b =>
                {
                    b.Property<int>("RapportLigneId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AffectationAbsenceId");

                    b.Property<int?>("AffectationMoyenId");

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<bool>("AvecChauffeur")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("CiId");

                    b.Property<int?>("CodeAbsenceId");

                    b.Property<int?>("CodeDeplacementId");

                    b.Property<int?>("CodeMajorationId");

                    b.Property<int?>("CodeZoneDeplacementId");

                    b.Property<bool>("CodeZoneDeplacementSaisiManuellement")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Commentaire")
                        .HasMaxLength(250);

                    b.Property<int?>("ContratId")
                        .HasColumnName("ContratId");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DatePointage")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime");

                    b.Property<bool>("DeplacementIV");

                    b.Property<double>("HeureAbsence")
                        .HasColumnType("float");

                    b.Property<double>("HeureMajoration")
                        .HasColumnType("float");

                    b.Property<double>("HeureNormale")
                        .HasColumnType("float");

                    b.Property<double>("HeuresMachine")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0.0);

                    b.Property<double>("HeuresTotalAstreintes")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0.0);

                    b.Property<bool>("IsGenerated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("LotPointageId");

                    b.Property<double>("MaterielArret")
                        .HasColumnType("float");

                    b.Property<int?>("MaterielId");

                    b.Property<double>("MaterielIntemperie")
                        .HasColumnType("float");

                    b.Property<double>("MaterielMarche")
                        .HasColumnType("float");

                    b.Property<string>("MaterielNomTemporaire")
                        .HasMaxLength(100);

                    b.Property<double>("MaterielPanne")
                        .HasColumnType("float");

                    b.Property<int?>("NumSemaineIntemperieAbsence");

                    b.Property<int?>("PersonnelId");

                    b.Property<string>("PrenomNomTemporaire")
                        .HasMaxLength(100);

                    b.Property<int>("RapportId");

                    b.Property<int?>("RapportLigneStatutId");

                    b.Property<bool>("ReceptionInterimaire")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("ReceptionMaterielExterne")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("TypeAbsence");

                    b.Property<int?>("ValideurId");

                    b.HasKey("RapportLigneId");

                    b.HasIndex("AffectationAbsenceId");

                    b.HasIndex("AffectationMoyenId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("CiId");

                    b.HasIndex("CodeAbsenceId");

                    b.HasIndex("CodeDeplacementId");

                    b.HasIndex("CodeMajorationId");

                    b.HasIndex("CodeZoneDeplacementId");

                    b.HasIndex("ContratId");

                    b.HasIndex("LotPointageId");

                    b.HasIndex("MaterielId");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("RapportId");

                    b.HasIndex("RapportLigneStatutId");

                    b.HasIndex("ValideurId");

                    b.ToTable("FRED_RAPPORT_LIGNE");
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportLigneMajorationEnt", b =>
                {
                    b.Property<int>("RapportLigneMajorationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodeMajorationId");

                    b.Property<double>("HeureMajoration");

                    b.Property<int>("RapportLigneId");

                    b.HasKey("RapportLigneMajorationId");

                    b.HasIndex("CodeMajorationId");

                    b.HasIndex("RapportLigneId");

                    b.ToTable("FRED_RAPPORT_LIGNE_MAJORATION");
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportLignePrimeEnt", b =>
                {
                    b.Property<int>("RapportLignePrimeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("HeurePrime")
                        .HasColumnType("float");

                    b.Property<bool>("IsChecked");

                    b.Property<int>("PrimeId");

                    b.Property<int>("RapportLigneId");

                    b.HasKey("RapportLignePrimeId");

                    b.HasIndex("PrimeId");

                    b.HasIndex("RapportLigneId");

                    b.ToTable("FRED_RAPPORT_LIGNE_PRIME");
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportLigneTacheEnt", b =>
                {
                    b.Property<int>("RapportLigneTacheId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("HeureTache")
                        .HasColumnType("float");

                    b.Property<int>("RapportLigneId");

                    b.Property<int>("TacheId");

                    b.HasKey("RapportLigneTacheId");

                    b.HasIndex("RapportLigneId");

                    b.HasIndex("TacheId");

                    b.ToTable("FRED_RAPPORT_LIGNE_TACHE");
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportStatutEnt", b =>
                {
                    b.Property<int>("RapportStatutId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("RapportStatutId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FRED_RAPPORT_STATUT");
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportTacheEnt", b =>
                {
                    b.Property<int>("RapportTacheId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Commentaire")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("RapportId");

                    b.Property<int>("TacheId");

                    b.HasKey("RapportTacheId");

                    b.HasIndex("RapportId");

                    b.HasIndex("TacheId");

                    b.ToTable("FRED_RAPPORT_TACHE");
                });

            modelBuilder.Entity("Fred.Entities.RapportPrime.RapportPrimeEnt", b =>
                {
                    b.Property<int>("RapportPrimeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateRapportPrime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<int>("SocieteId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("RapportPrimeId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("SocieteId");

                    b.ToTable("FRED_RAPPORTPRIME");
                });

            modelBuilder.Entity("Fred.Entities.RapportPrime.RapportPrimeLigneAstreinteEnt", b =>
                {
                    b.Property<int>("RapportPrimeLigneAstreinteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AstreinteId");

                    b.Property<int>("RapportPrimeLigneId");

                    b.HasKey("RapportPrimeLigneAstreinteId");

                    b.HasIndex("AstreinteId");

                    b.HasIndex("RapportPrimeLigneId");

                    b.ToTable("FRED_RAPPORTPRIME_LIGNE_ASTREINTE");
                });

            modelBuilder.Entity("Fred.Entities.RapportPrime.RapportPrimeLigneEnt", b =>
                {
                    b.Property<int>("RapportPrimeLigneId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<int?>("AuteurValidationId");

                    b.Property<int?>("AuteurVerrouId");

                    b.Property<int?>("CiId");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateVerrou")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsValidated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("PersonnelId");

                    b.Property<int>("RapportPrimeId");

                    b.HasKey("RapportPrimeLigneId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("AuteurValidationId");

                    b.HasIndex("AuteurVerrouId");

                    b.HasIndex("CiId");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("RapportPrimeId");

                    b.ToTable("FRED_RAPPORTPRIME_LIGNE");
                });

            modelBuilder.Entity("Fred.Entities.RapportPrime.RapportPrimeLignePrimeEnt", b =>
                {
                    b.Property<int>("RapportPrimeLignePrimeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSendToAnael")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<double?>("Montant");

                    b.Property<int>("PrimeId");

                    b.Property<int>("RapportPrimeLigneId");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUtilisateurId");

                    b.HasKey("RapportPrimeLignePrimeId");

                    b.HasIndex("PrimeId");

                    b.HasIndex("RapportPrimeLigneId");

                    b.ToTable("FRED_RAPPORTPRIME_LIGNE_PRIME");
                });

            modelBuilder.Entity("Fred.Entities.Referential.AffectationAbsenceEnt", b =>
                {
                    b.Property<int>("AffectationAbsenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<int?>("AuteurValidationId");

                    b.Property<int>("CodeAbsenceId");

                    b.Property<string>("Commentaire");

                    b.Property<DateTime>("DateCreation");

                    b.Property<DateTime>("DateDebut");

                    b.Property<DateTime?>("DateFin");

                    b.Property<DateTime?>("DateModification");

                    b.Property<DateTime?>("DateSuppression");

                    b.Property<DateTime?>("DateValidation");

                    b.Property<bool>("EstProlonge");

                    b.Property<int>("PersonnelId");

                    b.Property<int>("StatutAbsenceId");

                    b.Property<int?>("TypeDebutId");

                    b.Property<int?>("TypeFinId");

                    b.HasKey("AffectationAbsenceId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("AuteurValidationId");

                    b.HasIndex("CodeAbsenceId");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("StatutAbsenceId");

                    b.HasIndex("TypeDebutId");

                    b.HasIndex("TypeFinId");

                    b.ToTable("FRED_AFFECTATION_ABSENCE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.AgenceEnt", b =>
                {
                    b.Property<int?>("AgenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdresseId");

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateCloture");

                    b.Property<DateTime?>("DateCreation");

                    b.Property<DateTime?>("DateModification");

                    b.Property<string>("Email")
                        .HasMaxLength(250);

                    b.Property<string>("Fax")
                        .HasMaxLength(15);

                    b.Property<int>("FournisseurId");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("SIRET")
                        .HasMaxLength(19);

                    b.Property<string>("Telephone")
                        .HasMaxLength(15);

                    b.HasKey("AgenceId");

                    b.HasIndex("AdresseId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("FournisseurId");

                    b.ToTable("FRED_AGENCE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.CodeAbsenceEnt", b =>
                {
                    b.Property<int>("CodeAbsenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Actif");

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<int?>("CodeAbsenceParentId");

                    b.Property<int?>("GroupeId");

                    b.Property<int?>("HoldingId");

                    b.Property<bool>("Intemperie");

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.Property<double>("NBHeuresDefautCO");

                    b.Property<double>("NBHeuresDefautETAM");

                    b.Property<double>("NBHeuresMaxCO");

                    b.Property<double>("NBHeuresMaxETAM");

                    b.Property<double>("NBHeuresMinCO");

                    b.Property<double>("NBHeuresMinETAM");

                    b.Property<int?>("Niveau");

                    b.Property<int?>("SocieteId");

                    b.Property<double>("TauxDecote");

                    b.HasKey("CodeAbsenceId");

                    b.HasIndex("CodeAbsenceParentId");

                    b.HasIndex("GroupeId");

                    b.HasIndex("HoldingId");

                    b.HasIndex("SocieteId");

                    b.ToTable("FRED_CODE_ABSENCE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.CodeAstreinteEnt", b =>
                {
                    b.Property<int>("CodeAstreinteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Description");

                    b.Property<bool>("EstSorti");

                    b.Property<int>("GroupeId");

                    b.HasKey("CodeAstreinteId");

                    b.HasIndex("Code", "GroupeId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndGroupe");

                    b.ToTable("FRED_CODE_ASTREINTE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.CodeDeplacementEnt", b =>
                {
                    b.Property<int>("CodeDeplacementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Actif");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IGD");

                    b.Property<bool>("IndemniteForfaitaire");

                    b.Property<int>("KmMaxi");

                    b.Property<int>("KmMini");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("SocieteId");

                    b.HasKey("CodeDeplacementId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("Code", "SocieteId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndSociete");

                    b.ToTable("FRED_CODE_DEPLACEMENT");
                });

            modelBuilder.Entity("Fred.Entities.Referential.CodeMajorationEnt", b =>
                {
                    b.Property<int>("CodeMajorationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DateCreation");

                    b.Property<DateTime?>("DateModification");

                    b.Property<DateTime?>("DateSuppression");

                    b.Property<bool>("EtatPublic");

                    b.Property<int>("GroupeId");

                    b.Property<bool>("IsActif");

                    b.Property<bool>("IsHeureNuit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.HasKey("CodeMajorationId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("GroupeId");

                    b.HasIndex("Code", "GroupeId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndGroupe")
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("FRED_CODE_MAJORATION");
                });

            modelBuilder.Entity("Fred.Entities.Referential.CodeZoneDeplacementEnt", b =>
                {
                    b.Property<int>("CodeZoneDeplacementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuteurCreation");

                    b.Property<int?>("AuteurModification");

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DateCreation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActif");

                    b.Property<int>("KmMaxi")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("KmMini")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Libelle")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("SocieteId");

                    b.HasKey("CodeZoneDeplacementId");

                    b.HasIndex("AuteurCreation");

                    b.HasIndex("AuteurModification");

                    b.HasIndex("SocieteId");

                    b.HasIndex("Code", "SocieteId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndSociete")
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("FRED_CODE_ZONE_DEPLACEMENT");
                });

            modelBuilder.Entity("Fred.Entities.Referential.DeviseEnt", b =>
                {
                    b.Property<int>("DeviseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("AuteurCreation");

                    b.Property<int?>("AuteurModification");

                    b.Property<int?>("AuteurSuppression");

                    b.Property<string>("CodeHtml")
                        .HasMaxLength(10);

                    b.Property<string>("CodePaysIso")
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("IsoCode")
                        .HasMaxLength(3);

                    b.Property<string>("IsoNombre")
                        .HasMaxLength(5);

                    b.Property<string>("Libelle")
                        .HasMaxLength(150);

                    b.Property<string>("Symbole")
                        .HasMaxLength(10);

                    b.HasKey("DeviseId");

                    b.HasIndex("IsoCode")
                        .IsUnique()
                        .HasName("IX_UniqueIsoCode");

                    b.ToTable("FRED_DEVISE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.EtablissementComptableEnt", b =>
                {
                    b.Property<int>("EtablissementComptableId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .HasMaxLength(500);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CodePostal")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.Property<bool>("ModuleCommandeEnabled");

                    b.Property<bool>("ModuleProductionEnabled");

                    b.Property<int>("OrganisationId");

                    b.Property<int?>("PaysId");

                    b.Property<bool>("RessourcesRecommandeesEnabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("SocieteId")
                        .IsRequired();

                    b.Property<string>("Ville")
                        .HasMaxLength(500);

                    b.HasKey("EtablissementComptableId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PaysId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("Code", "SocieteId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndSociete");

                    b.ToTable("FRED_ETABLISSEMENT_COMPTABLE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.EtablissementPaieEnt", b =>
                {
                    b.Property<int>("EtablissementPaieId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Actif");

                    b.Property<string>("Adresse")
                        .HasMaxLength(500);

                    b.Property<string>("Adresse2");

                    b.Property<string>("Adresse3");

                    b.Property<int?>("AgenceRattachementId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CodePostal");

                    b.Property<int?>("EtablissementComptableId");

                    b.Property<bool>("GestionIndemnites");

                    b.Property<bool>("HorsRegion");

                    b.Property<bool>("IsAgenceRattachement");

                    b.Property<bool>("IsPersonnelsNonPointables");

                    b.Property<double?>("Latitude");

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.Property<double?>("Longitude");

                    b.Property<int?>("PaysId");

                    b.Property<int?>("SocieteId")
                        .IsRequired();

                    b.Property<string>("Ville");

                    b.HasKey("EtablissementPaieId");

                    b.HasIndex("AgenceRattachementId");

                    b.HasIndex("EtablissementComptableId");

                    b.HasIndex("PaysId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("Code", "SocieteId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndSociete");

                    b.ToTable("FRED_ETABLISSEMENT_PAIE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.FournisseurEnt", b =>
                {
                    b.Property<int>("FournisseurId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .HasMaxLength(250);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CodePostal")
                        .HasMaxLength(10);

                    b.Property<string>("CodeTVA")
                        .HasMaxLength(19);

                    b.Property<DateTime?>("DateCloture")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOuverture")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(250);

                    b.Property<string>("Fax")
                        .HasMaxLength(15);

                    b.Property<int>("GroupeId");

                    b.Property<bool>("IsProfessionLiberale")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.Property<string>("ModeReglement")
                        .HasMaxLength(255);

                    b.Property<int?>("PaysId");

                    b.Property<string>("RegleGestion");

                    b.Property<string>("SIREN")
                        .HasMaxLength(19);

                    b.Property<string>("SIRET")
                        .HasMaxLength(19);

                    b.Property<string>("Telephone")
                        .HasMaxLength(15);

                    b.Property<string>("TypeSequence")
                        .HasMaxLength(255);

                    b.Property<string>("TypeTiers")
                        .IsFixedLength(true)
                        .HasMaxLength(1);

                    b.Property<string>("Ville")
                        .HasMaxLength(50);

                    b.HasKey("FournisseurId");

                    b.HasIndex("GroupeId");

                    b.HasIndex("PaysId");

                    b.ToTable("FRED_FOURNISSEUR");
                });

            modelBuilder.Entity("Fred.Entities.Referential.MaterielEnt", b =>
                {
                    b.Property<int>("MaterielId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Actif");

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<string>("ClasseFamilleCode");

                    b.Property<string>("ClasseFamilleLibelle");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<string>("Commentaire");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDebutLocation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFinLocation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateMiseEnService")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Dimensiionl")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<decimal>("DimensionH")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<decimal>("DimensionL")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<int?>("EtablissementComptableId");

                    b.Property<string>("Fabriquant");

                    b.Property<int?>("FournisseurId");

                    b.Property<string>("Immatriculation");

                    b.Property<bool>("IsImported")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLocation")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsStorm")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("MaterielLocation")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<decimal>("Puissance")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<int>("RessourceId");

                    b.Property<int?>("SiteAppartenanceId");

                    b.Property<string>("SiteRestitution");

                    b.Property<int>("SocieteId");

                    b.Property<string>("UniteDimension");

                    b.Property<string>("UnitePuissance");

                    b.Property<string>("VIN");

                    b.HasKey("MaterielId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("EtablissementComptableId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("RessourceId");

                    b.HasIndex("SiteAppartenanceId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("Code", "SocieteId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndSociete");

                    b.ToTable("FRED_MATERIEL");
                });

            modelBuilder.Entity("Fred.Entities.Referential.NatureEnt", b =>
                {
                    b.Property<int>("NatureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateCreation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActif");

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.Property<int>("ParentFamilyODWithOrder");

                    b.Property<int>("ParentFamilyODWithoutOrder");

                    b.Property<int?>("RessourceId");

                    b.Property<int>("SocieteId");

                    b.HasKey("NatureId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("RessourceId")
                        .HasName("IX_UniqueCodeAndResource");

                    b.HasIndex("SocieteId");

                    b.HasIndex("Code", "SocieteId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndSociete");

                    b.ToTable("FRED_NATURE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.PaysEnt", b =>
                {
                    b.Property<int>("PaysId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(50)")
                        .IsFixedLength(true);

                    b.HasKey("PaysId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.ToTable("FRED_PAYS");
                });

            modelBuilder.Entity("Fred.Entities.Referential.PrimeEnt", b =>
                {
                    b.Property<int>("PrimeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Actif");

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<int?>("GroupeId");

                    b.Property<bool?>("IsPrimeAstreinte");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool?>("MultiPerDay");

                    b.Property<double>("NombreHeuresMax")
                        .HasColumnType("float");

                    b.Property<bool>("PrimePartenaire");

                    b.Property<int>("PrimeType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<bool>("Publique");

                    b.Property<double?>("SeuilMensuel");

                    b.Property<int?>("SocieteId");

                    b.Property<int?>("TargetPersonnel")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("PrimeId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("GroupeId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("Code", "SocieteId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndSociete")
                        .HasFilter("[Code] IS NOT NULL AND [SocieteId] IS NOT NULL");

                    b.ToTable("FRED_PRIME");
                });

            modelBuilder.Entity("Fred.Entities.Referential.RapportLigneCodeAstreinteEnt", b =>
                {
                    b.Property<int>("RapportLigneCodeAstreinteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodeAstreinteId");

                    b.Property<bool?>("IsPrimeNuit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("RapportLigneAstreinteId");

                    b.Property<int>("RapportLigneId");

                    b.HasKey("RapportLigneCodeAstreinteId");

                    b.HasIndex("CodeAstreinteId");

                    b.HasIndex("RapportLigneAstreinteId");

                    b.HasIndex("RapportLigneId");

                    b.ToTable("FRED_RAPPORT_LIGNE_CODE_ASTREINTE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.SeuilValidationEnt", b =>
                {
                    b.Property<int>("SeuilValidationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviseId");

                    b.Property<int>("Montant");

                    b.Property<int?>("RoleId");

                    b.HasKey("SeuilValidationId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("RoleId");

                    b.ToTable("FRED_ROLE_DEVISE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.StatutAbsenceEnt", b =>
                {
                    b.Property<int>("StatutAbsenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<bool>("IsActif");

                    b.Property<string>("Libelle");

                    b.Property<int>("Niveau");

                    b.HasKey("StatutAbsenceId");

                    b.ToTable("FRED_STATUT_ABSENCE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.TacheEnt", b =>
                {
                    b.Property<int>("TacheId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<int?>("BudgetId");

                    b.Property<int?>("BudgetRevisionEntBudgetRevisionId");

                    b.Property<int>("CiId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<double?>("HeureMOUnite");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("NbrRessourcesToParam");

                    b.Property<int?>("Niveau")
                        .IsRequired();

                    b.Property<int?>("ParentId");

                    b.Property<double?>("PrixTotalQB");

                    b.Property<double?>("PrixUnitaireQB");

                    b.Property<double?>("QuantiteARealise")
                        .HasColumnType("float");

                    b.Property<double?>("QuantiteBase");

                    b.Property<bool>("TacheParDefaut");

                    b.Property<int>("TacheType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(999999);

                    b.Property<double?>("TotalHeureMO");

                    b.Property<int?>("UniteEntUniteId");

                    b.HasKey("TacheId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("BudgetRevisionEntBudgetRevisionId");

                    b.HasIndex("CiId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UniteEntUniteId");

                    b.ToTable("FRED_TACHE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.TypeDepenseEnt", b =>
                {
                    b.Property<int>("TypeDepenseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("TypeDepenseId");

                    b.ToTable("FRED_TYPE_DEPENSE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.TypeEnergieEnt", b =>
                {
                    b.Property<int>("TypeEnergieId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("Libelle");

                    b.HasKey("TypeEnergieId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.ToTable("FRED_TYPE_ENERGIE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.TypeJourneeEnt", b =>
                {
                    b.Property<int>("TypeJourneeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<bool>("IsActif");

                    b.Property<string>("Libelle");

                    b.HasKey("TypeJourneeId");

                    b.ToTable("FRED_TYPE_JOURNEE");
                });

            modelBuilder.Entity("Fred.Entities.Referential.UniteEnt", b =>
                {
                    b.Property<int>("UniteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("UniteId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.ToTable("FRED_UNITE");
                });

            modelBuilder.Entity("Fred.Entities.ReferentielEtendu.ParametrageReferentielEtenduEnt", b =>
                {
                    b.Property<int>("ParametrageReferentielEtenduId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<int>("DeviseId");

                    b.Property<decimal?>("Montant")
                        .HasColumnType("decimal(11, 2)");

                    b.Property<int>("OrganisationId");

                    b.Property<int>("ReferentielEtenduId");

                    b.Property<int>("UniteId");

                    b.HasKey("ParametrageReferentielEtenduId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("ReferentielEtenduId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_ORGANISATION_DEVISE_REFERENTIEL_ETENDU");
                });

            modelBuilder.Entity("Fred.Entities.ReferentielEtendu.ReferentielEtenduEnt", b =>
                {
                    b.Property<int>("ReferentielEtenduId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Achats")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("NatureId");

                    b.Property<int>("RessourceId");

                    b.Property<int>("SocieteId");

                    b.HasKey("ReferentielEtenduId");

                    b.HasIndex("NatureId");

                    b.HasIndex("RessourceId");

                    b.HasIndex("SocieteId");

                    b.ToTable("FRED_SOCIETE_RESSOURCE_NATURE");
                });

            modelBuilder.Entity("Fred.Entities.ReferentielEtendu.UniteReferentielEtenduEnt", b =>
                {
                    b.Property<int>("UniteReferentielEtenduId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReferentielEtenduId");

                    b.Property<int>("UniteId");

                    b.HasKey("UniteReferentielEtenduId");

                    b.HasIndex("ReferentielEtenduId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_UNITE_REFERENTIEL_ETENDU");
                });

            modelBuilder.Entity("Fred.Entities.ReferentielFixe.ChapitreEnt", b =>
                {
                    b.Property<int>("ChapitreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<int>("GroupeId");

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.HasKey("ChapitreId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("GroupeId");

                    b.HasIndex("Code", "GroupeId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndGroupe");

                    b.ToTable("FRED_CHAPITRE");
                });

            modelBuilder.Entity("Fred.Entities.ReferentielFixe.RessourceEnt", b =>
                {
                    b.Property<int>("RessourceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<int?>("CarburantId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<decimal?>("Consommation")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsRessourceSpecifiqueCi")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Keywords")
                        .HasColumnName("Keywords");

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("RessourceRattachementId");

                    b.Property<int>("SousChapitreId");

                    b.Property<int?>("SpecifiqueCiId");

                    b.Property<int?>("TypeRessourceId");

                    b.HasKey("RessourceId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("CarburantId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RessourceRattachementId");

                    b.HasIndex("SousChapitreId");

                    b.HasIndex("SpecifiqueCiId");

                    b.HasIndex("TypeRessourceId");

                    b.HasIndex("Code", "SousChapitreId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndSousChapitreId");

                    b.ToTable("FRED_RESSOURCE");
                });

            modelBuilder.Entity("Fred.Entities.ReferentielFixe.SousChapitreEnt", b =>
                {
                    b.Property<int>("SousChapitreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurSuppressionId");

                    b.Property<int>("ChapitreId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSuppression")
                        .HasColumnType("datetime");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("SousChapitreId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurSuppressionId");

                    b.HasIndex("ChapitreId");

                    b.HasIndex("Code", "ChapitreId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndChapitreId");

                    b.ToTable("FRED_SOUS_CHAPITRE");
                });

            modelBuilder.Entity("Fred.Entities.ReferentielFixe.TypeRessourceEnt", b =>
                {
                    b.Property<int>("TypeRessourceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("TypeRessourceId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCode");

                    b.ToTable("FRED_TYPE_RESSOURCE");
                });

            modelBuilder.Entity("Fred.Entities.RepartitionEcart.RepartitionEcartEnt", b =>
                {
                    b.Property<int>("RepartitionEcartId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CiId");

                    b.Property<DateTime?>("DateCloture")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateComptable")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Ecart");

                    b.Property<string>("Libelle");

                    b.Property<decimal>("MontantCapitalise");

                    b.Property<int>("RowIndex");

                    b.Property<decimal>("ValorisationInitiale");

                    b.Property<decimal>("ValorisationRectifiee");

                    b.HasKey("RepartitionEcartId");

                    b.HasIndex("CiId");

                    b.ToTable("FRED_REPARTITION_ECART");
                });

            modelBuilder.Entity("Fred.Entities.RessourcesRecommandees.RessourceRecommandeeEnt", b =>
                {
                    b.Property<int>("RessourceRecommandeeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganisationId");

                    b.Property<int>("ReferentielEtenduId");

                    b.HasKey("RessourceRecommandeeId");

                    b.HasIndex("ReferentielEtenduId");

                    b.HasIndex("OrganisationId", "ReferentielEtenduId")
                        .IsUnique()
                        .HasName("IX_UniqueOrganisationIdAndReferentielEtenduId");

                    b.ToTable("FRED_RESSOURCE_RECOMMANDEE_ORGANISATION");
                });

            modelBuilder.Entity("Fred.Entities.Role.RoleEnt", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Actif");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(255)")
                        .IsUnicode(false);

                    b.Property<string>("CodeNomFamilier")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CommandeSeuilDefaut")
                        .HasColumnType("varchar(255)")
                        .IsUnicode(false);

                    b.Property<string>("Description");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(255)")
                        .IsUnicode(false);

                    b.Property<bool>("ModeLecture");

                    b.Property<int>("NiveauCompta");

                    b.Property<int>("NiveauPaie");

                    b.Property<int?>("RoleSpecification")
                        .HasColumnName("Specification");

                    b.Property<int>("SocieteId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("RoleId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("CodeNomFamilier", "SocieteId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndGroupe");

                    b.ToTable("FRED_ROLE");
                });

            modelBuilder.Entity("Fred.Entities.RoleFonctionnalite.RoleFonctionnaliteEnt", b =>
                {
                    b.Property<int>("RoleFonctionnaliteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FonctionnaliteId");

                    b.Property<int>("Mode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("RoleId");

                    b.HasKey("RoleFonctionnaliteId");

                    b.HasIndex("FonctionnaliteId");

                    b.HasIndex("RoleId");

                    b.ToTable("FRED_ROLE_FONCTIONNALITE");
                });

            modelBuilder.Entity("Fred.Entities.Societe.Classification.SocieteClassificationEnt", b =>
                {
                    b.Property<int>("SocieteClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<int>("GroupeId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<bool>("Statut");

                    b.HasKey("SocieteClassificationId");

                    b.ToTable("FRED_SOCIETE_CLASSIFICATION");
                });

            modelBuilder.Entity("Fred.Entities.Societe.SocieteDeviseEnt", b =>
                {
                    b.Property<int>("SocieteDeviseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeviseDeReference")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("DeviseId");

                    b.Property<int>("SocieteId");

                    b.HasKey("SocieteDeviseId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("SocieteId");

                    b.ToTable("FRED_SOCIETE_DEVISE");
                });

            modelBuilder.Entity("Fred.Entities.Societe.SocieteEnt", b =>
                {
                    b.Property<int>("SocieteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Adresse")
                        .HasMaxLength(250);

                    b.Property<int?>("CGAFournitureId");

                    b.Property<int?>("CGALocationId");

                    b.Property<int?>("CGAPrestationId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CodePostal")
                        .HasMaxLength(10);

                    b.Property<string>("CodeSocieteComptable")
                        .HasMaxLength(20);

                    b.Property<string>("CodeSocietePaye")
                        .HasMaxLength(20);

                    b.Property<string>("CodeSocieteStorm");

                    b.Property<bool>("EtablissementParDefaut")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("Externe");

                    b.Property<int?>("FournisseurId");

                    b.Property<int>("GroupeId");

                    b.Property<int?>("ImageLoginId");

                    b.Property<string>("ImageLogoHeader");

                    b.Property<int?>("ImageLogoId");

                    b.Property<string>("ImageScreenLogin");

                    b.Property<bool>("ImportFacture")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("IndemniteDeplacementCalculTypeId");

                    b.Property<bool>("IsGenerationSamediCPActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInterimaire")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Libelle")
                        .HasMaxLength(500);

                    b.Property<int?>("MoisDebutExercice");

                    b.Property<int?>("MoisFinExercice");

                    b.Property<int>("OrganisationId");

                    b.Property<string>("PiedDePage")
                        .HasMaxLength(400);

                    b.Property<string>("SIREN")
                        .HasMaxLength(19);

                    b.Property<string>("SIRET");

                    b.Property<int?>("SocieteClassificationId");

                    b.Property<bool>("TransfertAS400")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("TypeSocieteId");

                    b.Property<string>("Ville")
                        .HasMaxLength(50);

                    b.HasKey("SocieteId");

                    b.HasIndex("CGAFournitureId");

                    b.HasIndex("CGALocationId");

                    b.HasIndex("CGAPrestationId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("GroupeId");

                    b.HasIndex("ImageLoginId");

                    b.HasIndex("ImageLogoId");

                    b.HasIndex("IndemniteDeplacementCalculTypeId");

                    b.HasIndex("OrganisationId")
                        .IsUnique();

                    b.HasIndex("SocieteClassificationId");

                    b.HasIndex("TypeSocieteId");

                    b.HasIndex("Code", "GroupeId")
                        .IsUnique()
                        .HasName("IX_UniqueCodeAndGroupe");

                    b.ToTable("FRED_SOCIETE");
                });

            modelBuilder.Entity("Fred.Entities.Societe.UniteSocieteEnt", b =>
                {
                    b.Property<int>("UniteSocieteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SocieteId");

                    b.Property<int>("Type");

                    b.Property<int>("UniteId");

                    b.HasKey("UniteSocieteId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_UNITE_SOCIETE");
                });

            modelBuilder.Entity("Fred.Entities.TypeParticipationSepEnt", b =>
                {
                    b.Property<int>("TypeParticipationSepId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Libelle")
                        .IsRequired();

                    b.HasKey("TypeParticipationSepId");

                    b.ToTable("FRED_TYPE_PARTICIPATION_SEP");
                });

            modelBuilder.Entity("Fred.Entities.TypeSocieteEnt", b =>
                {
                    b.Property<int>("TypeSocieteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Libelle")
                        .IsRequired();

                    b.HasKey("TypeSocieteId");

                    b.ToTable("FRED_TYPE_SOCIETE");
                });

            modelBuilder.Entity("Fred.Entities.Utilisateur.AffectationSeuilUtilisateurEnt", b =>
                {
                    b.Property<int>("AffectationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UtilisateurRoleOrganisationDeviseId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("CommandeSeuil")
                        .HasColumnType("decimal(11, 2)");

                    b.Property<int?>("DelegationId");

                    b.Property<int?>("DeviseId");

                    b.Property<int>("OrganisationId");

                    b.Property<int>("RoleId");

                    b.Property<int>("UtilisateurId");

                    b.HasKey("AffectationRoleId");

                    b.HasIndex("DelegationId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("FRED_UTILISATEUR_ROLE_ORGANISATION_DEVISE");
                });

            modelBuilder.Entity("Fred.Entities.Utilisateur.UtilisateurEnt", b =>
                {
                    b.Property<int>("UtilisateurId")
                        .HasDefaultValue(0);

                    b.Property<bool>("CommandeManuelleAllowed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDerniereConnexion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSupression")
                        .HasColumnType("datetime");

                    b.Property<int?>("FayatAccessDirectoryId");

                    b.Property<string>("Folio")
                        .HasMaxLength(10);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Login")
                        .HasMaxLength(50);

                    b.Property<bool>("SuperAdmin")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("UtilisateurIdCreation");

                    b.Property<int?>("UtilisateurIdModification");

                    b.Property<int?>("UtilisateurIdSupression");

                    b.HasKey("UtilisateurId");

                    b.HasIndex("FayatAccessDirectoryId")
                        .IsUnique()
                        .HasName("IX_FayatAccessDirectoryId")
                        .HasFilter("[FayatAccessDirectoryId] IS NOT NULL");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasName("IX_UniqueLogin")
                        .HasFilter("[Login] IS NOT NULL");

                    b.HasIndex("UtilisateurIdCreation");

                    b.HasIndex("UtilisateurIdModification");

                    b.HasIndex("UtilisateurIdSupression");

                    b.ToTable("FRED_UTILISATEUR");
                });

            modelBuilder.Entity("Fred.Entities.ValidationPointage.ControlePointageEnt", b =>
                {
                    b.Property<int>("ControlePointageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuteurCreationId");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime");

                    b.Property<int>("LotPointageId");

                    b.Property<int>("Statut");

                    b.Property<int>("TypeControle");

                    b.HasKey("ControlePointageId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("LotPointageId");

                    b.ToTable("FRED_CONTROLE_POINTAGE");
                });

            modelBuilder.Entity("Fred.Entities.ValidationPointage.ControlePointageErreurEnt", b =>
                {
                    b.Property<int>("ControlePointageErreurId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeCi");

                    b.Property<int>("ControlePointageId");

                    b.Property<DateTime?>("DateRapport")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<int>("PersonnelId");

                    b.HasKey("ControlePointageErreurId");

                    b.HasIndex("ControlePointageId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("FRED_CONTROLE_POINTAGE_ERREUR");
                });

            modelBuilder.Entity("Fred.Entities.ValidationPointage.LotPointageEnt", b =>
                {
                    b.Property<int>("LotPointageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuteurCreationId");

                    b.Property<int?>("AuteurModificationId");

                    b.Property<int?>("AuteurVisaId");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateVisa")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Periode")
                        .HasColumnType("datetime");

                    b.HasKey("LotPointageId");

                    b.HasIndex("AuteurCreationId");

                    b.HasIndex("AuteurModificationId");

                    b.HasIndex("AuteurVisaId");

                    b.ToTable("FRED_LOT_POINTAGE");
                });

            modelBuilder.Entity("Fred.Entities.ValidationPointage.RemonteeVracEnt", b =>
                {
                    b.Property<int>("RemonteeVracId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuteurCreationId");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Periode")
                        .HasColumnType("datetime");

                    b.Property<int>("Statut");

                    b.HasKey("RemonteeVracId");

                    b.HasIndex("AuteurCreationId");

                    b.ToTable("FRED_REMONTEE_VRAC");
                });

            modelBuilder.Entity("Fred.Entities.ValidationPointage.RemonteeVracErreurEnt", b =>
                {
                    b.Property<int>("RemonteeVracErreurId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeAbsenceAnael");

                    b.Property<string>("CodeAbsenceFred");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime");

                    b.Property<int>("EtablissementPaieId");

                    b.Property<int>("PersonnelId");

                    b.Property<int>("RemonteeVracId");

                    b.Property<int>("SocieteId");

                    b.HasKey("RemonteeVracErreurId");

                    b.HasIndex("EtablissementPaieId");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("RemonteeVracId");

                    b.HasIndex("SocieteId");

                    b.ToTable("FRED_REMONTEE_VRAC_ERREUR");
                });

            modelBuilder.Entity("Fred.Entities.Valorisation.ValorisationEnt", b =>
                {
                    b.Property<int>("ValorisationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaremeId");

                    b.Property<int?>("BaremeStormId");

                    b.Property<int>("ChapitreId");

                    b.Property<int>("CiId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<int>("DeviseId");

                    b.Property<int?>("GroupeRemplacementTacheId");

                    b.Property<int?>("MaterielId");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("PUHT")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int?>("PersonnelId");

                    b.Property<decimal>("Quantite")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("RapportId");

                    b.Property<int>("RapportLigneId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("ReferentielEtenduId");

                    b.Property<string>("Source");

                    b.Property<int>("SousChapitreId");

                    b.Property<int>("TacheId");

                    b.Property<decimal?>("TauxHoraireConverti");

                    b.Property<int>("UniteId");

                    b.Property<bool>("VerrouPeriode");

                    b.HasKey("ValorisationId");

                    b.HasIndex("BaremeId");

                    b.HasIndex("BaremeStormId");

                    b.HasIndex("ChapitreId");

                    b.HasIndex("CiId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("GroupeRemplacementTacheId");

                    b.HasIndex("MaterielId");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("RapportId");

                    b.HasIndex("RapportLigneId");

                    b.HasIndex("ReferentielEtenduId");

                    b.HasIndex("SousChapitreId");

                    b.HasIndex("TacheId");

                    b.HasIndex("UniteId");

                    b.ToTable("FRED_VALORISATION");
                });

            modelBuilder.Entity("Fred.Entities.Adresse.AdresseEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Referential.PaysEnt", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId");
                });

            modelBuilder.Entity("Fred.Entities.Affectation.AffectationEnt", b =>
                {
                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("Affectations")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany("Affectations")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Affectation.AstreinteEnt", b =>
                {
                    b.HasOne("Fred.Entities.Affectation.AffectationEnt", "Affectation")
                        .WithMany("Astreintes")
                        .HasForeignKey("AffectationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Affectation.EquipeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Proprietaire")
                        .WithMany()
                        .HasForeignKey("ProprietaireId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Affectation.EquipePersonnelEnt", b =>
                {
                    b.HasOne("Fred.Entities.Affectation.EquipeEnt", "Equipe")
                        .WithMany("EquipePersonnels")
                        .HasForeignKey("EquipePersoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany("EquipePersonnels")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.AssocieSepEnt", b =>
                {
                    b.HasOne("Fred.Entities.AssocieSepEnt", "AssocieSepParent")
                        .WithMany("AssocieSepChildren")
                        .HasForeignKey("AssocieSepParentId");

                    b.HasOne("Fred.Entities.Referential.FournisseurEnt", "Fournisseur")
                        .WithMany()
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "SocieteAssociee")
                        .WithMany()
                        .HasForeignKey("SocieteAssocieeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("AssocieSeps")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.TypeParticipationSepEnt", "TypeParticipationSep")
                        .WithMany()
                        .HasForeignKey("TypeParticipationSepId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Avis.AvisCommandeAvenantEnt", b =>
                {
                    b.HasOne("Fred.Entities.Avis.AvisEnt", "Avis")
                        .WithMany()
                        .HasForeignKey("AvisId");

                    b.HasOne("Fred.Entities.Commande.CommandeAvenantEnt", "CommandeAvenant")
                        .WithMany("AvisCommandeAvenant")
                        .HasForeignKey("CommandeAvenantId");
                });

            modelBuilder.Entity("Fred.Entities.Avis.AvisCommandeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Avis.AvisEnt", "Avis")
                        .WithMany()
                        .HasForeignKey("AvisId");

                    b.HasOne("Fred.Entities.Commande.CommandeEnt", "Commande")
                        .WithMany("AvisCommande")
                        .HasForeignKey("CommandeId");
                });

            modelBuilder.Entity("Fred.Entities.Avis.AvisEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "Destinataire")
                        .WithMany()
                        .HasForeignKey("DestinataireId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "Expediteur")
                        .WithMany()
                        .HasForeignKey("ExpediteurId");
                });

            modelBuilder.Entity("Fred.Entities.Bareme.BaremeExploitationCIEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("BaremeExploitationCIs")
                        .HasForeignKey("CIId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.ReferentielEtendu.ReferentielEtenduEnt", "ReferentielEtendu")
                        .WithMany()
                        .HasForeignKey("ReferentielEtenduId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Bareme.BaremeExploitationOrganisationEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany()
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Bareme.SurchargeBaremeExploitationCIEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("SurchargeBaremeExploitationCIs")
                        .HasForeignKey("CIId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.MaterielEnt", "Materiel")
                        .WithMany()
                        .HasForeignKey("MaterielId");

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId");

                    b.HasOne("Fred.Entities.ReferentielEtendu.ReferentielEtenduEnt", "ReferentielEtendu")
                        .WithMany()
                        .HasForeignKey("ReferentielEtenduId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Budget.Avancement.AvancementEnt", b =>
                {
                    b.HasOne("Fred.Entities.Budget.Avancement.AvancementEtatEnt", "AvancementEtat")
                        .WithMany()
                        .HasForeignKey("AvancementEtatId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Budget.BudgetSousDetailEnt", "BudgetSousDetail")
                        .WithMany()
                        .HasForeignKey("BudgetSousDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.CI.CIEnt", "Ci")
                        .WithMany()
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Budget.Avancement.AvancementTacheEnt", b =>
                {
                    b.HasOne("Fred.Entities.Budget.BudgetEnt", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany()
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Budget.Avancement.AvancementWorkflowEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "Auteur")
                        .WithMany()
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Budget.Avancement.AvancementEnt", "Avancement")
                        .WithMany("Workflows")
                        .HasForeignKey("AvancementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Budget.Avancement.AvancementEtatEnt", "EtatCible")
                        .WithMany()
                        .HasForeignKey("EtatCibleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Budget.Avancement.AvancementEtatEnt", "EtatInitial")
                        .WithMany()
                        .HasForeignKey("EtatInitialId");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetBibliothequePrixEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetBibliothequePrixItemEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Budget.BudgetBibliothequePrixEnt", "BudgetBibliothequePrix")
                        .WithMany("Items")
                        .HasForeignKey("BudgetBibliothequePrixId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany()
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetBibliothequePrixItemValuesHistoEnt", b =>
                {
                    b.HasOne("Fred.Entities.Budget.BudgetBibliothequePrixItemEnt", "Item")
                        .WithMany("ItemValuesHisto")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetCopyHistoEnt", b =>
                {
                    b.HasOne("Fred.Entities.CI.CIEnt", "BibliothequePrixSourceCI")
                        .WithMany()
                        .HasForeignKey("BibliothequePrixSourceCIId");

                    b.HasOne("Fred.Entities.Budget.BudgetEnt")
                        .WithMany("CopyHistos")
                        .HasForeignKey("BudgetEntBudgetId");

                    b.HasOne("Fred.Entities.Budget.BudgetEnt", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.CI.CIEnt", "BudgetSourceCI")
                        .WithMany()
                        .HasForeignKey("BudgetSourceCIId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetEnt", b =>
                {
                    b.HasOne("Fred.Entities.Budget.BudgetEtatEnt", "BudgetEtat")
                        .WithMany()
                        .HasForeignKey("BudgetEtatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.CI.CIEnt", "Ci")
                        .WithMany("Budgets")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetRevisionEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurValidation")
                        .WithMany()
                        .HasForeignKey("AuteurValidationId");

                    b.HasOne("Fred.Entities.Budget.BudgetEnt", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetSousDetailEnt", b =>
                {
                    b.HasOne("Fred.Entities.Budget.BudgetT4Ent", "BudgetT4")
                        .WithMany("BudgetSousDetails")
                        .HasForeignKey("BudgetT4Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany()
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetT4Ent", b =>
                {
                    b.HasOne("Fred.Entities.Budget.BudgetEnt", "Budget")
                        .WithMany("BudgetT4s")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "T3")
                        .WithMany()
                        .HasForeignKey("T3Id");

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "T4")
                        .WithMany()
                        .HasForeignKey("T4Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId");
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetTacheEnt", b =>
                {
                    b.HasOne("Fred.Entities.Budget.BudgetEnt", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany()
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Budget.BudgetWorkflowEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "Auteur")
                        .WithMany()
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Budget.BudgetEnt", "Budget")
                        .WithMany("Workflows")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Budget.BudgetEtatEnt", "EtatCible")
                        .WithMany()
                        .HasForeignKey("EtatCibleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Budget.BudgetEtatEnt", "EtatInitial")
                        .WithMany()
                        .HasForeignKey("EtatInitialId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Budget.ControleBudgetaireEnt", b =>
                {
                    b.HasOne("Fred.Entities.Budget.BudgetEtatEnt", "ControleBudgetaireEtat")
                        .WithMany()
                        .HasForeignKey("ControleBudgetaireEtatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Budget.BudgetEnt", "Budget")
                        .WithMany()
                        .HasForeignKey("ControleBudgetaireId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Budget.ControleBudgetaireValeursEnt", b =>
                {
                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany()
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany()
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Budget.ControleBudgetaireEnt", "ControleBudgetaire")
                        .WithMany("Valeurs")
                        .HasForeignKey("ControleBudgetaireId", "Periode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Budget.Recette.AvancementRecetteEnt", b =>
                {
                    b.HasOne("Fred.Entities.Budget.Recette.BudgetRecetteEnt", "BudgetRecette")
                        .WithMany()
                        .HasForeignKey("BudgetRecetteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Budget.Recette.BudgetRecetteEnt", b =>
                {
                    b.HasOne("Fred.Entities.Budget.BudgetEnt", "Budget")
                        .WithOne("Recette")
                        .HasForeignKey("Fred.Entities.Budget.Recette.BudgetRecetteEnt", "BudgetRecetteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Budget.Recette.TacheRecetteEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("TacheRecettes")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany("TacheRecettes")
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Budget.RessourceTacheDeviseEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("RessourceTacheDevises")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Budget.RessourceTacheEnt", "RessourceTache")
                        .WithMany("RessourceTacheDevises")
                        .HasForeignKey("RessourceTacheId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Budget.RessourceTacheEnt", b =>
                {
                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany("RessourceTaches")
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany("RessourceTaches")
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.CI.CICodeMajorationEnt", b =>
                {
                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("CICodeMajorations")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.CodeMajorationEnt", "CodeMajoration")
                        .WithMany("CICodesMajoration")
                        .HasForeignKey("CodeMajorationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.CI.CIDeviseEnt", b =>
                {
                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("CIDevises")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("CIDevises")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.CI.CIEnt", b =>
                {
                    b.HasOne("Fred.Entities.CI.CITypeEnt", "CIType")
                        .WithMany()
                        .HasForeignKey("CITypeId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "CompteInterneSep")
                        .WithMany()
                        .HasForeignKey("CompteInterneSepId");

                    b.HasOne("Fred.Entities.Referential.EtablissementComptableEnt", "EtablissementComptable")
                        .WithMany()
                        .HasForeignKey("EtablissementComptableId");

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "MontantDevise")
                        .WithMany()
                        .HasForeignKey("MontantDeviseId");

                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithOne("CI")
                        .HasForeignKey("Fred.Entities.CI.CIEnt", "OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.PaysEnt", "PaysFacturation")
                        .WithMany()
                        .HasForeignKey("PaysFacturationId");

                    b.HasOne("Fred.Entities.Referential.PaysEnt", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId");

                    b.HasOne("Fred.Entities.Referential.PaysEnt", "PaysLivraison")
                        .WithMany()
                        .HasForeignKey("PaysLivraisonId");

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "ResponsableAdministratif")
                        .WithMany()
                        .HasForeignKey("ResponsableAdministratifId");

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "PersonnelResponsableChantier")
                        .WithMany()
                        .HasForeignKey("ResponsableChantierId");

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany()
                        .HasForeignKey("SocieteId");
                });

            modelBuilder.Entity("Fred.Entities.CI.CIPrimeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("CIPrimes")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.PrimeEnt", "Prime")
                        .WithMany("CIPrimes")
                        .HasForeignKey("PrimeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.CI.CIRessourceEnt", b =>
                {
                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("CIRessources")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany("CIRessources")
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Carburant.CarburantEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany("Carburants")
                        .HasForeignKey("UniteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Carburant.CarburantOrganisationDeviseEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Carburant.CarburantEnt", "Carburant")
                        .WithMany("ParametrageCarburants")
                        .HasForeignKey("CarburantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("CarburantOrganisationDevises")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithMany("CarburantOrganisationDevises")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Commande.CommandeAvenantEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurValidation")
                        .WithMany()
                        .HasForeignKey("AuteurValidationId");

                    b.HasOne("Fred.Entities.Commande.CommandeEnt", "Commande")
                        .WithMany()
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Commande.CommandeContratInterimaireEnt", b =>
                {
                    b.HasOne("Fred.Entities.CI.CIEnt", "Ci")
                        .WithMany()
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Commande.CommandeEnt", "Commande")
                        .WithOne("CommandeContratInterimaire")
                        .HasForeignKey("Fred.Entities.Commande.CommandeContratInterimaireEnt", "CommandeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Personnel.Interimaire.ContratInterimaireEnt", "Contrat")
                        .WithMany("CommandeContratInterimaires")
                        .HasForeignKey("ContratId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Interimaire")
                        .WithMany()
                        .HasForeignKey("InterimaireId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Rapport.RapportLigneEnt", "RapportLigne")
                        .WithMany()
                        .HasForeignKey("RapportLigneId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Commande.CommandeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.AgenceEnt", "Agence")
                        .WithMany()
                        .HasForeignKey("AgenceId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurPremiereImpressionBrouillon")
                        .WithMany()
                        .HasForeignKey("AuteurPremiereImpressionBrouillonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("Commandes")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("Commandes")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.PaysEnt", "FacturationPays")
                        .WithMany()
                        .HasForeignKey("FacturationPaysId");

                    b.HasOne("Fred.Entities.Referential.FournisseurEnt", "Fournisseur")
                        .WithMany("Commandes")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.PaysEnt", "FournisseurPays")
                        .WithMany()
                        .HasForeignKey("FournisseurPaysId");

                    b.HasOne("Fred.Entities.Referential.PaysEnt", "LivraisonPays")
                        .WithMany()
                        .HasForeignKey("LivraisonPaysId");

                    b.HasOne("Fred.Entities.Referential.FournisseurEnt", "OldFournisseur")
                        .WithMany()
                        .HasForeignKey("OldFournisseurId");

                    b.HasOne("Fred.Entities.Commande.StatutCommandeEnt", "StatutCommande")
                        .WithMany("Commandes")
                        .HasForeignKey("StatutCommandeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Suivi")
                        .WithMany()
                        .HasForeignKey("SuiviId");

                    b.HasOne("Fred.Entities.Import.SystemeExterneEnt", "SystemeExterne")
                        .WithMany()
                        .HasForeignKey("SystemeExterneId");

                    b.HasOne("Fred.Entities.Referential.TypeEnergieEnt", "TypeEnergie")
                        .WithMany()
                        .HasForeignKey("TypeEnergieId");

                    b.HasOne("Fred.Entities.Commande.CommandeTypeEnt", "Type")
                        .WithMany("Commandes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "Valideur")
                        .WithMany()
                        .HasForeignKey("ValideurId");
                });

            modelBuilder.Entity("Fred.Entities.Commande.CommandeLigneAvenantEnt", b =>
                {
                    b.HasOne("Fred.Entities.Commande.CommandeAvenantEnt", "Avenant")
                        .WithMany()
                        .HasForeignKey("AvenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Commande.CommandeLigneEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Commande.CommandeLigneAvenantEnt", "AvenantLigne")
                        .WithMany()
                        .HasForeignKey("AvenantLigneId");

                    b.HasOne("Fred.Entities.Commande.CommandeEnt", "Commande")
                        .WithMany("Lignes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.MaterielEnt", "Materiel")
                        .WithMany("CommandeLignes")
                        .HasForeignKey("MaterielId");

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId");

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany("CommandeLignes")
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany("CommandeLignes")
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId");
                });

            modelBuilder.Entity("Fred.Entities.DatesCalendrierPaie.DatesCalendrierPaieEnt", b =>
                {
                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("DatesCalendrierPaies")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.DatesClotureComptable.DatesClotureComptableEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("DatesClotureComptables")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Delegation.DelegationEnt", b =>
                {
                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "PersonnelAuteur")
                        .WithMany()
                        .HasForeignKey("PersonnelAuteurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "PersonnelDelegant")
                        .WithMany()
                        .HasForeignKey("PersonnelDelegantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "PersonnelDelegue")
                        .WithMany()
                        .HasForeignKey("PersonnelDelegueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Depense.DepenseAchatEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurVisaReception")
                        .WithMany()
                        .HasForeignKey("AuteurVisaReceptionId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("Depenses")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Commande.CommandeLigneEnt", "CommandeLigne")
                        .WithMany("AllDepenses")
                        .HasForeignKey("CommandeLigneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Depense.DepenseAchatEnt", "DepenseParent")
                        .WithMany("Depenses")
                        .HasForeignKey("DepenseParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Depense.DepenseTypeEnt", "DepenseType")
                        .WithMany("Depenses")
                        .HasForeignKey("DepenseTypeId");

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("Depenses")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Facture.FactureLigneEnt")
                        .WithMany("Depenses")
                        .HasForeignKey("FactureLigneEntLigneFactureId");

                    b.HasOne("Fred.Entities.Referential.FournisseurEnt", "Fournisseur")
                        .WithMany("Depenses")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Depense.GroupeRemplacementTacheEnt", "GroupeRemplacementTache")
                        .WithMany()
                        .HasForeignKey("GroupeRemplacementTacheId");

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany("Depenses")
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany("Depenses")
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId");
                });

            modelBuilder.Entity("Fred.Entities.Depense.DepenseTemporaireEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("DepenseTemporaires")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Commande.CommandeLigneEnt", "CommandeLigne")
                        .WithMany("DepenseTemporaires")
                        .HasForeignKey("CommandeLigneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Depense.DepenseAchatEnt", "DepenseOrigine")
                        .WithMany("DepenseOrigine")
                        .HasForeignKey("DepenseOrigineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Depense.DepenseAchatEnt", "DepenseParent")
                        .WithMany("DepenseTemporaireEnts")
                        .HasForeignKey("DepenseParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("DepenseTemporaires")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Facture.FactureEnt", "Facture")
                        .WithMany("DepenseTemporaires")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Facture.FactureLigneEnt", "FactureLigne")
                        .WithMany("DepenseTemporaires")
                        .HasForeignKey("FactureLigneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.FournisseurEnt", "Fournisseur")
                        .WithMany("DepenseTemporaires")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany("DepenseTemporaires")
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany("DepenseTemporaires")
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId");
                });

            modelBuilder.Entity("Fred.Entities.Depense.LotFarEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Depense.RemplacementTacheEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Depense.GroupeRemplacementTacheEnt", "GroupeRemplacementTache")
                        .WithMany()
                        .HasForeignKey("GroupeRemplacementTacheId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany()
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.EcritureComptable.EcritureComptableCumulEnt", b =>
                {
                    b.HasOne("Fred.Entities.EcritureComptable.EcritureComptableEnt")
                        .WithMany("EcritureComptableCumul")
                        .HasForeignKey("EcritureComptableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.EcritureComptable.EcritureComptableEnt", b =>
                {
                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany()
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Commande.CommandeEnt", "Commande")
                        .WithMany()
                        .HasForeignKey("CommandeId");

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.OperationDiverse.FamilleOperationDiverseEnt", "FamilleOperationDiverse")
                        .WithMany()
                        .HasForeignKey("FamilleOperationDiverseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Journal.JournalEnt", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId");

                    b.HasOne("Fred.Entities.Referential.NatureEnt", "Nature")
                        .WithMany()
                        .HasForeignKey("NatureId");
                });

            modelBuilder.Entity("Fred.Entities.Email.EmailSouscriptionEnt", b =>
                {
                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Facturation.FacturationEnt", b =>
                {
                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany()
                        .HasForeignKey("CiId");

                    b.HasOne("Fred.Entities.Commande.CommandeEnt", "Commande")
                        .WithMany("Facturations")
                        .HasForeignKey("CommandeId");

                    b.HasOne("Fred.Entities.Depense.DepenseAchatEnt", "DepenseAchatAjustement")
                        .WithMany()
                        .HasForeignKey("DepenseAchatAjustementId");

                    b.HasOne("Fred.Entities.Depense.DepenseAchatEnt", "DepenseAchatFactureEcart")
                        .WithMany("FacturationsFactureEcart")
                        .HasForeignKey("DepenseAchatFactureEcartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Depense.DepenseAchatEnt", "DepenseAchatFacture")
                        .WithMany("FacturationsFacture")
                        .HasForeignKey("DepenseAchatFactureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Depense.DepenseAchatEnt", "DepenseAchatFar")
                        .WithMany("FacturationsFar")
                        .HasForeignKey("DepenseAchatFarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Depense.DepenseAchatEnt", "DepenseAchatReception")
                        .WithMany("FacturationsReception")
                        .HasForeignKey("DepenseAchatReceptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("Facturations")
                        .HasForeignKey("DeviseId");

                    b.HasOne("Fred.Entities.Facturation.FacturationTypeEnt", "FacturationType")
                        .WithMany("Facturations")
                        .HasForeignKey("FacturationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Facture.FactureEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCloture")
                        .WithMany()
                        .HasForeignKey("AuteurClotureId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurRapprochement")
                        .WithMany()
                        .HasForeignKey("AuteurRapprochementId");

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("Factures")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.EtablissementComptableEnt", "Etablissement")
                        .WithMany("Factures")
                        .HasForeignKey("EtablissementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.FournisseurEnt", "Fournisseur")
                        .WithMany("Factures")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Journal.JournalEnt", "Journal")
                        .WithMany("Factures")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("Factures")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "UtilisateurCreation")
                        .WithMany()
                        .HasForeignKey("UtilisateurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "UtilisateurModification")
                        .WithMany()
                        .HasForeignKey("UtilisateurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "UtilisateurSupression")
                        .WithMany()
                        .HasForeignKey("UtilisateurSupressionId");
                });

            modelBuilder.Entity("Fred.Entities.Facture.FactureLigneEnt", b =>
                {
                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("FactureLignes")
                        .HasForeignKey("AffaireId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Facture.FactureEnt", "Facture")
                        .WithMany("ListLigneFacture")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.NatureEnt", "Nature")
                        .WithMany("FactureLignes")
                        .HasForeignKey("NatureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "UtilisateurCreation")
                        .WithMany()
                        .HasForeignKey("UtilisateurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "UtilisateurModification")
                        .WithMany()
                        .HasForeignKey("UtilisateurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "UtilisateurSuppression")
                        .WithMany()
                        .HasForeignKey("UtilisateurSuppressionId");
                });

            modelBuilder.Entity("Fred.Entities.Favori.FavoriEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Fonctionnalite.FonctionnaliteEnt", b =>
                {
                    b.HasOne("Fred.Entities.Module.ModuleEnt", "Module")
                        .WithMany("Fonctionnalites")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.FonctionnaliteDesactive.FonctionnaliteDesactiveEnt", b =>
                {
                    b.HasOne("Fred.Entities.Fonctionnalite.FonctionnaliteEnt", "Fonctionnalite")
                        .WithMany()
                        .HasForeignKey("FonctionnaliteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Groupe.GroupeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithOne("Groupe")
                        .HasForeignKey("Fred.Entities.Groupe.GroupeEnt", "OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Pole.PoleEnt", "Pole")
                        .WithMany("Groupes")
                        .HasForeignKey("PoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Holding.HoldingEnt", b =>
                {
                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithOne("Holding")
                        .HasForeignKey("Fred.Entities.Holding.HoldingEnt", "OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Import.SystemeExterneEnt", b =>
                {
                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Import.SystemeExterneTypeEnt", "SystemeExterneType")
                        .WithMany()
                        .HasForeignKey("SystemeExterneTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Import.SystemeImportEnt", "SystemeImport")
                        .WithMany()
                        .HasForeignKey("SystemeImportId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Import.TranscoImportEnt", b =>
                {
                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Import.SystemeImportEnt", "SystemeImport")
                        .WithMany()
                        .HasForeignKey("SystemeImportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.IndemniteDeplacement.IndemniteDeplacementEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "UtilisateurAuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreation");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "UtilisateurAuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModification");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "UtilisateurAuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppression");

                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany()
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.CodeDeplacementEnt", "CodeDeplacement")
                        .WithMany("IndemniteDeplacements")
                        .HasForeignKey("CodeDeplacementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.CodeZoneDeplacementEnt", "CodeZoneDeplacement")
                        .WithMany("IndemniteDeplacements")
                        .HasForeignKey("CodeZoneDeplacementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany("IndemniteDeplacements")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Journal.JournalEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCloture")
                        .WithMany()
                        .HasForeignKey("AuteurClotureId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("Journals")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.ModuleDesactive.ModuleDesactiveEnt", b =>
                {
                    b.HasOne("Fred.Entities.Module.ModuleEnt", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Moyen.AffectationMoyenEnt", b =>
                {
                    b.HasOne("Fred.Entities.Moyen.AffectationMoyenTypeEnt", "TypeAffectation")
                        .WithMany()
                        .HasForeignKey("AffectationMoyenTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.CI.CIEnt", "Ci")
                        .WithMany()
                        .HasForeignKey("CiId");

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Conducteur")
                        .WithMany()
                        .HasForeignKey("ConducteurId");

                    b.HasOne("Fred.Entities.Referential.MaterielEnt", "Materiel")
                        .WithMany()
                        .HasForeignKey("MaterielId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Moyen.MaterielLocationEnt", "MaterielLocation")
                        .WithMany()
                        .HasForeignKey("MaterielLocationId");

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId");

                    b.HasOne("Fred.Entities.Moyen.SiteEnt", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId");
                });

            modelBuilder.Entity("Fred.Entities.Moyen.AffectationMoyenTypeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Moyen.AffectationMoyenFamilleEnt", "AffectationMoyenFamille")
                        .WithMany()
                        .HasForeignKey("AffectationMoyenFamilleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Moyen.MaterielLocationEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Referential.MaterielEnt", "Materiel")
                        .WithMany("MaterielLocations")
                        .HasForeignKey("MaterielId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.ObjectifFlash.ObjectifFlashEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "Ci")
                        .WithMany()
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.ObjectifFlash.ObjectifFlashTacheEnt", b =>
                {
                    b.HasOne("Fred.Entities.ObjectifFlash.ObjectifFlashEnt", "ObjectifFlash")
                        .WithMany("Taches")
                        .HasForeignKey("ObjectifFlashId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany()
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId");
                });

            modelBuilder.Entity("Fred.Entities.ObjectifFlash.ObjectifFlashTacheJournalisationEnt", b =>
                {
                    b.HasOne("Fred.Entities.ObjectifFlash.ObjectifFlashTacheEnt", "ObjectifFlashTache")
                        .WithMany("TacheJournalisations")
                        .HasForeignKey("ObjectifFlashTacheId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.ObjectifFlash.ObjectifFlashTacheRapportRealiseEnt", b =>
                {
                    b.HasOne("Fred.Entities.ObjectifFlash.ObjectifFlashTacheEnt", "ObjectifFlashTache")
                        .WithMany("TacheRealisations")
                        .HasForeignKey("ObjectifFlashTacheId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Rapport.RapportEnt", "Rapport")
                        .WithMany()
                        .HasForeignKey("RapportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.ObjectifFlash.ObjectifFlashTacheRessourceEnt", b =>
                {
                    b.HasOne("Fred.Entities.ObjectifFlash.ObjectifFlashTacheEnt", "ObjectifFlashTache")
                        .WithMany("Ressources")
                        .HasForeignKey("ObjectifFlashTacheId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany()
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId");
                });

            modelBuilder.Entity("Fred.Entities.ObjectifFlash.ObjectifFlashTacheRessourceJournalisationEnt", b =>
                {
                    b.HasOne("Fred.Entities.ObjectifFlash.ObjectifFlashTacheRessourceEnt", "ObjectifFlashTacheRessource")
                        .WithMany("TacheRessourceJournalisations")
                        .HasForeignKey("ObjectifFlashTacheRessourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.OperationDiverse.FamilleOperationDiverseEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.OperationDiverse.OperationDiverseEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany()
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.EcritureComptable.EcritureComptableEnt", "EcritureComptable")
                        .WithMany()
                        .HasForeignKey("EcritureComptableId");

                    b.HasOne("Fred.Entities.OperationDiverse.FamilleOperationDiverseEnt", "FamilleOperationDiverse")
                        .WithMany()
                        .HasForeignKey("FamilleOperationDiverseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Depense.GroupeRemplacementTacheEnt", "GroupeRemplacementTache")
                        .WithMany()
                        .HasForeignKey("GroupeRemplacementTacheId");

                    b.HasOne("Fred.Entities.OperationDiverse.OperationDiverseEnt", "OperationDiverseMereAbonnement")
                        .WithMany()
                        .HasForeignKey("OperationDiverseMereIdAbonnement");

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany()
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany()
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Organisation.AffectationSeuilOrgaEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("AffectationSeuilOrgas")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithMany("AffectationsSeuilRoleOrga")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Role.RoleEnt", "Role")
                        .WithMany("AffectationSeuilOrgas")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Organisation.OrganisationEnt", b =>
                {
                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Pere")
                        .WithMany("OrganisationsEnfants")
                        .HasForeignKey("PereId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Organisation.TypeOrganisationEnt", "TypeOrganisation")
                        .WithMany("Organisations")
                        .HasForeignKey("TypeOrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Organisation.OrganisationLienEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.EtablissementComptableEnt", "EtablissementComptable")
                        .WithMany("OrganisationLiens")
                        .HasForeignKey("EtablissementComptableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithMany("OrganisationLiens")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("OrganisationLiens")
                        .HasForeignKey("SocieteId");
                });

            modelBuilder.Entity("Fred.Entities.OrganisationGenerique.OrganisationGeneriqueEnt", b =>
                {
                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithOne("OrganisationGenerique")
                        .HasForeignKey("Fred.Entities.OrganisationGenerique.OrganisationGeneriqueEnt", "OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.ParametreEnt", b =>
                {
                    b.HasOne("Fred.Entities.Groupe.GroupeEnt", "Groupe")
                        .WithMany("Parametres")
                        .HasForeignKey("GroupeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Params.ParamKeyEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Params.ParamValueEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithMany("ParamValues")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Params.ParamKeyEnt", "ParamKey")
                        .WithMany("ParamValues")
                        .HasForeignKey("ParamKeyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.PermissionFonctionnalite.PermissionFonctionnaliteEnt", b =>
                {
                    b.HasOne("Fred.Entities.Fonctionnalite.FonctionnaliteEnt", "Fonctionnalite")
                        .WithMany()
                        .HasForeignKey("FonctionnaliteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Permission.PermissionEnt", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Personnel.Interimaire.ContratInterimaireEnt", b =>
                {
                    b.HasOne("Fred.Entities.CI.CIEnt", "Ci")
                        .WithMany()
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.FournisseurEnt", "Fournisseur")
                        .WithMany("ContratInterimaires")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Interimaire")
                        .WithMany("ContratInterimaires")
                        .HasForeignKey("InterimaireId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Personnel.Interimaire.MotifRemplacementEnt", "MotifRemplacement")
                        .WithMany()
                        .HasForeignKey("MotifRemplacementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "PersonnelRemplace")
                        .WithMany()
                        .HasForeignKey("PersonnelRemplaceId");

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany()
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("ContratInterimaires")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Personnel.Interimaire.MatriculeExterneEnt", b =>
                {
                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany("MatriculeExterne")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Personnel.Interimaire.ZoneDeTravailEnt", b =>
                {
                    b.HasOne("Fred.Entities.Personnel.Interimaire.ContratInterimaireEnt", "Contrat")
                        .WithMany("ZonesDeTravail")
                        .HasForeignKey("ContratInterimaireId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.EtablissementComptableEnt", "EtablissementComptable")
                        .WithMany()
                        .HasForeignKey("EtablissementComptableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Personnel.PersonnelEnt", b =>
                {
                    b.HasOne("Fred.Entities.Affectation.EquipeEnt", "Equipe")
                        .WithMany()
                        .HasForeignKey("EquipeFavoriteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.EtablissementPaieEnt", "EtablissementPaie")
                        .WithMany()
                        .HasForeignKey("EtablissementPaieId");

                    b.HasOne("Fred.Entities.Referential.EtablissementPaieEnt", "EtablissementRattachement")
                        .WithMany()
                        .HasForeignKey("EtablissementRattachementId");

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Manager")
                        .WithMany("ManagerPersonnels")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.MaterielEnt", "Materiel")
                        .WithMany()
                        .HasForeignKey("MaterielId");

                    b.HasOne("Fred.Entities.Referential.PaysEnt", "Pays")
                        .WithMany("Personnels")
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.PersonnelImageEnt", "PersonnelImage")
                        .WithMany()
                        .HasForeignKey("PersonnelImageId");

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany("Personnels")
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("Personnels")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.PieceJointeCommandeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Commande.CommandeEnt", "Commande")
                        .WithMany("PiecesJointesCommande")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.PieceJointeEnt", "PieceJointe")
                        .WithMany()
                        .HasForeignKey("PieceJointeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.PieceJointeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");
                });

            modelBuilder.Entity("Fred.Entities.PieceJointeReceptionEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.PieceJointeEnt", "PieceJointe")
                        .WithMany()
                        .HasForeignKey("PieceJointeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Depense.DepenseAchatEnt", "Reception")
                        .WithMany("PiecesJointesReception")
                        .HasForeignKey("ReceptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Pole.PoleEnt", b =>
                {
                    b.HasOne("Fred.Entities.Holding.HoldingEnt", "Holding")
                        .WithMany("Poles")
                        .HasForeignKey("HoldingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithOne("Pole")
                        .HasForeignKey("Fred.Entities.Pole.PoleEnt", "OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Rapport.PointageAnticipeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "Ci")
                        .WithMany("PointageAnticipes")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.CodeAbsenceEnt", "CodeAbsence")
                        .WithMany("PointageAnticipes")
                        .HasForeignKey("CodeAbsenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.CodeDeplacementEnt", "CodeDeplacement")
                        .WithMany("PointageAnticipes")
                        .HasForeignKey("CodeDeplacementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.CodeMajorationEnt", "CodeMajoration")
                        .WithMany("PointageAnticipes")
                        .HasForeignKey("CodeMajorationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.CodeZoneDeplacementEnt", "CodeZoneDeplacement")
                        .WithMany("PointageAnticipes")
                        .HasForeignKey("CodeZoneDeplacementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany("PointageAnticipes")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Rapport.PointageAnticipePrimeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Rapport.PointageAnticipeEnt", "PointageAnticipe")
                        .WithMany("ListPrimes")
                        .HasForeignKey("PointageAnticipeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.PrimeEnt", "Prime")
                        .WithMany("PointageAnticipePrimes")
                        .HasForeignKey("PrimeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurVerrou")
                        .WithMany()
                        .HasForeignKey("AuteurVerrouId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("Rapports")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Rapport.RapportStatutEnt", "RapportStatut")
                        .WithMany("Rapports")
                        .HasForeignKey("RapportStatutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "ValideurCDC")
                        .WithMany()
                        .HasForeignKey("ValideurCDCId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "ValideurCDT")
                        .WithMany()
                        .HasForeignKey("ValideurCDTId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "ValideurDRC")
                        .WithMany()
                        .HasForeignKey("ValideurDRCId");
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportLigneAstreinteEnt", b =>
                {
                    b.HasOne("Fred.Entities.Affectation.AstreinteEnt", "Astreinte")
                        .WithMany()
                        .HasForeignKey("AstreinteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Rapport.RapportLigneEnt", "RapportLigne")
                        .WithMany("ListRapportLigneAstreintes")
                        .HasForeignKey("RapportLigneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportLigneEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.AffectationAbsenceEnt", "AffectationAbsence")
                        .WithMany()
                        .HasForeignKey("AffectationAbsenceId");

                    b.HasOne("Fred.Entities.Moyen.AffectationMoyenEnt", "AffectationMoyen")
                        .WithMany()
                        .HasForeignKey("AffectationMoyenId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "Ci")
                        .WithMany("RapportLignes")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.CodeAbsenceEnt", "CodeAbsence")
                        .WithMany("RapportLignes")
                        .HasForeignKey("CodeAbsenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.CodeDeplacementEnt", "CodeDeplacement")
                        .WithMany("RapportLignes")
                        .HasForeignKey("CodeDeplacementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.CodeMajorationEnt", "CodeMajoration")
                        .WithMany("RapportLignes")
                        .HasForeignKey("CodeMajorationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.CodeZoneDeplacementEnt", "CodeZoneDeplacement")
                        .WithMany()
                        .HasForeignKey("CodeZoneDeplacementId");

                    b.HasOne("Fred.Entities.Personnel.Interimaire.ContratInterimaireEnt", "Contrat")
                        .WithMany()
                        .HasForeignKey("ContratId");

                    b.HasOne("Fred.Entities.ValidationPointage.LotPointageEnt", "LotPointage")
                        .WithMany("RapportLignes")
                        .HasForeignKey("LotPointageId");

                    b.HasOne("Fred.Entities.Referential.MaterielEnt", "Materiel")
                        .WithMany("RapportLignes")
                        .HasForeignKey("MaterielId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany("RapportLignes")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Rapport.RapportEnt", "Rapport")
                        .WithMany("ListLignes")
                        .HasForeignKey("RapportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Rapport.RapportStatutEnt", "RapportLigneStatut")
                        .WithMany("RapportLignes")
                        .HasForeignKey("RapportLigneStatutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "Valideur")
                        .WithMany()
                        .HasForeignKey("ValideurId");
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportLigneMajorationEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.CodeMajorationEnt", "CodeMajoration")
                        .WithMany("ListRapportLignesMajoration")
                        .HasForeignKey("CodeMajorationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Rapport.RapportLigneEnt", "RapportLigne")
                        .WithMany("ListRapportLigneMajorations")
                        .HasForeignKey("RapportLigneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportLignePrimeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.PrimeEnt", "Prime")
                        .WithMany("RapportLignePrimes")
                        .HasForeignKey("PrimeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Rapport.RapportLigneEnt", "RapportLigne")
                        .WithMany("ListRapportLignePrimes")
                        .HasForeignKey("RapportLigneId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportLigneTacheEnt", b =>
                {
                    b.HasOne("Fred.Entities.Rapport.RapportLigneEnt", "RapportLigne")
                        .WithMany("ListRapportLigneTaches")
                        .HasForeignKey("RapportLigneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany("RapportLigneTaches")
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Rapport.RapportTacheEnt", b =>
                {
                    b.HasOne("Fred.Entities.Rapport.RapportEnt", "Rapport")
                        .WithMany("ListCommentaires")
                        .HasForeignKey("RapportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany()
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.RapportPrime.RapportPrimeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.RapportPrime.RapportPrimeLigneAstreinteEnt", b =>
                {
                    b.HasOne("Fred.Entities.Affectation.AstreinteEnt", "Astreinte")
                        .WithMany()
                        .HasForeignKey("AstreinteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.RapportPrime.RapportPrimeLigneEnt", "RapportPrimeLigne")
                        .WithMany("ListAstreintes")
                        .HasForeignKey("RapportPrimeLigneId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.RapportPrime.RapportPrimeLigneEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurValidation")
                        .WithMany()
                        .HasForeignKey("AuteurValidationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurVerrou")
                        .WithMany()
                        .HasForeignKey("AuteurVerrouId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "Ci")
                        .WithMany()
                        .HasForeignKey("CiId");

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.RapportPrime.RapportPrimeEnt", "RapportPrime")
                        .WithMany("ListLignes")
                        .HasForeignKey("RapportPrimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.RapportPrime.RapportPrimeLignePrimeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.PrimeEnt", "Prime")
                        .WithMany()
                        .HasForeignKey("PrimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.RapportPrime.RapportPrimeLigneEnt", "RapportPrimeLigne")
                        .WithMany("ListPrimes")
                        .HasForeignKey("RapportPrimeLigneId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Referential.AffectationAbsenceEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurValidation")
                        .WithMany()
                        .HasForeignKey("AuteurValidationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.CodeAbsenceEnt", "CodeAbsence")
                        .WithMany()
                        .HasForeignKey("CodeAbsenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.StatutAbsenceEnt", "StatutAbsence")
                        .WithMany()
                        .HasForeignKey("StatutAbsenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.TypeJourneeEnt", "TypeDebut")
                        .WithMany()
                        .HasForeignKey("TypeDebutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.TypeJourneeEnt", "TypeFin")
                        .WithMany()
                        .HasForeignKey("TypeFinId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Referential.AgenceEnt", b =>
                {
                    b.HasOne("Fred.Entities.Adresse.AdresseEnt", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Referential.FournisseurEnt", "Fournisseur")
                        .WithMany("Agences")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Referential.CodeAbsenceEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.CodeAbsenceEnt", "CodeAbsneceParent")
                        .WithMany()
                        .HasForeignKey("CodeAbsenceParentId");

                    b.HasOne("Fred.Entities.Groupe.GroupeEnt", "Groupe")
                        .WithMany()
                        .HasForeignKey("GroupeId");

                    b.HasOne("Fred.Entities.Holding.HoldingEnt", "Holding")
                        .WithMany("CodeAbsences")
                        .HasForeignKey("HoldingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("CodeAbsences")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Referential.CodeDeplacementEnt", b =>
                {
                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("CodeDeplacements")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Referential.CodeMajorationEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Groupe.GroupeEnt", "Groupe")
                        .WithMany("CodeMajorations")
                        .HasForeignKey("GroupeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Referential.CodeZoneDeplacementEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "UtilisateurAuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreation")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "UtilisateurAuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModification");

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("CodeZoneDeplacements")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Referential.EtablissementComptableEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithOne("Etablissement")
                        .HasForeignKey("Fred.Entities.Referential.EtablissementComptableEnt", "OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.PaysEnt", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId");

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("EtablissementComptables")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Referential.EtablissementPaieEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.EtablissementPaieEnt", "AgenceRattachement")
                        .WithMany("EtablissementPaies")
                        .HasForeignKey("AgenceRattachementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.EtablissementComptableEnt", "EtablissementComptable")
                        .WithMany("EtablissementsPaie")
                        .HasForeignKey("EtablissementComptableId");

                    b.HasOne("Fred.Entities.Referential.PaysEnt", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId");

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("EtablissementPaies")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Referential.FournisseurEnt", b =>
                {
                    b.HasOne("Fred.Entities.Groupe.GroupeEnt", "Groupe")
                        .WithMany("Fournisseurs")
                        .HasForeignKey("GroupeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.PaysEnt", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId");
                });

            modelBuilder.Entity("Fred.Entities.Referential.MaterielEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Referential.EtablissementComptableEnt", "EtablissementComptable")
                        .WithMany()
                        .HasForeignKey("EtablissementComptableId");

                    b.HasOne("Fred.Entities.Referential.FournisseurEnt", "Fournisseur")
                        .WithMany()
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany("Materiels")
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Moyen.SiteEnt", "SiteAppartenance")
                        .WithMany()
                        .HasForeignKey("SiteAppartenanceId");

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("Materiels")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Referential.NatureEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("Natures")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Referential.PrimeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Groupe.GroupeEnt", "Groupe")
                        .WithMany()
                        .HasForeignKey("GroupeId");

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("Primes")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Referential.RapportLigneCodeAstreinteEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.CodeAstreinteEnt", "CodeAstreinte")
                        .WithMany()
                        .HasForeignKey("CodeAstreinteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Rapport.RapportLigneAstreinteEnt", "RapportLigneAstreinte")
                        .WithMany("ListCodePrimeSortiesAstreintes")
                        .HasForeignKey("RapportLigneAstreinteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Rapport.RapportLigneEnt", "RapportLigne")
                        .WithMany("ListCodePrimeAstreintes")
                        .HasForeignKey("RapportLigneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Referential.SeuilValidationEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("SeuilValidations")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Role.RoleEnt", "Role")
                        .WithMany("SeuilsValidation")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Referential.TacheEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Budget.BudgetEnt", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId");

                    b.HasOne("Fred.Entities.Budget.BudgetRevisionEnt")
                        .WithMany("Taches")
                        .HasForeignKey("BudgetRevisionEntBudgetRevisionId");

                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany("Taches")
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Parent")
                        .WithMany("TachesEnfants")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.UniteEnt")
                        .WithMany("Taches")
                        .HasForeignKey("UniteEntUniteId");
                });

            modelBuilder.Entity("Fred.Entities.ReferentielEtendu.ParametrageReferentielEtenduEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("ParametrageReferentielEtendus")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithMany("ParametrageReferentielEtendus")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.ReferentielEtendu.ReferentielEtenduEnt", "ReferentielEtendu")
                        .WithMany("ParametrageReferentielEtendus")
                        .HasForeignKey("ReferentielEtenduId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany("ParametrageReferentielEtendus")
                        .HasForeignKey("UniteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.ReferentielEtendu.ReferentielEtenduEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.NatureEnt", "Nature")
                        .WithMany("ReferentielEtendus")
                        .HasForeignKey("NatureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Ressource")
                        .WithMany("ReferentielEtendus")
                        .HasForeignKey("RessourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("ReferentielEtendus")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.ReferentielEtendu.UniteReferentielEtenduEnt", b =>
                {
                    b.HasOne("Fred.Entities.ReferentielEtendu.ReferentielEtenduEnt", "ReferentielEtendu")
                        .WithMany("UniteReferentielEtendus")
                        .HasForeignKey("ReferentielEtenduId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.ReferentielFixe.ChapitreEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Groupe.GroupeEnt", "Groupe")
                        .WithMany("Chapitres")
                        .HasForeignKey("GroupeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.ReferentielFixe.RessourceEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.Carburant.CarburantEnt", "Carburant")
                        .WithMany("Ressources")
                        .HasForeignKey("CarburantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "Parent")
                        .WithMany("RessourcesEnfants")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.ReferentielFixe.RessourceEnt", "RessourceRattachement")
                        .WithMany("RessourcesRattachementsEnfants")
                        .HasForeignKey("RessourceRattachementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.ReferentielFixe.SousChapitreEnt", "SousChapitre")
                        .WithMany("Ressources")
                        .HasForeignKey("SousChapitreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.CI.CIEnt", "SpecifiqueCi")
                        .WithMany()
                        .HasForeignKey("SpecifiqueCiId");

                    b.HasOne("Fred.Entities.ReferentielFixe.TypeRessourceEnt", "TypeRessource")
                        .WithMany("Ressources")
                        .HasForeignKey("TypeRessourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.ReferentielFixe.SousChapitreEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("AuteurSuppressionId");

                    b.HasOne("Fred.Entities.ReferentielFixe.ChapitreEnt", "Chapitre")
                        .WithMany("SousChapitres")
                        .HasForeignKey("ChapitreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.RepartitionEcart.RepartitionEcartEnt", b =>
                {
                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany()
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.RessourcesRecommandees.RessourceRecommandeeEnt", b =>
                {
                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithMany("RessourcesRecommandees")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.ReferentielEtendu.ReferentielEtenduEnt", "ReferentielEtendu")
                        .WithMany("RessourcesRecommandees")
                        .HasForeignKey("ReferentielEtenduId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Role.RoleEnt", b =>
                {
                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("Roles")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.RoleFonctionnalite.RoleFonctionnaliteEnt", b =>
                {
                    b.HasOne("Fred.Entities.Fonctionnalite.FonctionnaliteEnt", "Fonctionnalite")
                        .WithMany()
                        .HasForeignKey("FonctionnaliteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Role.RoleEnt", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Societe.SocieteDeviseEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("SocieteDevises")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany("SocieteDevises")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Societe.SocieteEnt", b =>
                {
                    b.HasOne("Fred.Entities.Image.ImageEnt", "CGAFourniture")
                        .WithMany()
                        .HasForeignKey("CGAFournitureId");

                    b.HasOne("Fred.Entities.Image.ImageEnt", "CGALocation")
                        .WithMany()
                        .HasForeignKey("CGALocationId");

                    b.HasOne("Fred.Entities.Image.ImageEnt", "CGAPrestation")
                        .WithMany()
                        .HasForeignKey("CGAPrestationId");

                    b.HasOne("Fred.Entities.Referential.FournisseurEnt", "Fournisseur")
                        .WithMany()
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Groupe.GroupeEnt", "Groupe")
                        .WithMany("Societes")
                        .HasForeignKey("GroupeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Image.ImageEnt", "ImageLogin")
                        .WithMany("LoginSocietes")
                        .HasForeignKey("ImageLoginId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Image.ImageEnt", "ImageLogo")
                        .WithMany("LogoSocietes")
                        .HasForeignKey("ImageLogoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.IndemniteDeplacement.IndemniteDeplacementCalculTypeEnt", "IndemniteDeplacementCalculType")
                        .WithMany()
                        .HasForeignKey("IndemniteDeplacementCalculTypeId");

                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithOne("Societe")
                        .HasForeignKey("Fred.Entities.Societe.SocieteEnt", "OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Societe.Classification.SocieteClassificationEnt", "Classification")
                        .WithMany("Societes")
                        .HasForeignKey("SocieteClassificationId");

                    b.HasOne("Fred.Entities.TypeSocieteEnt", "TypeSociete")
                        .WithMany()
                        .HasForeignKey("TypeSocieteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Societe.UniteSocieteEnt", b =>
                {
                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Utilisateur.AffectationSeuilUtilisateurEnt", b =>
                {
                    b.HasOne("Fred.Entities.Delegation.DelegationEnt", "Delegation")
                        .WithMany()
                        .HasForeignKey("DelegationId");

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany("AffectationSeuilUtilisateurs")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Organisation.OrganisationEnt", "Organisation")
                        .WithMany("AffectationSeuilUtilisateurs")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Role.RoleEnt", "Role")
                        .WithMany("AffectationSeuilUtilisateurs")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "Utilisateur")
                        .WithMany("AffectationsRole")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fred.Entities.Utilisateur.UtilisateurEnt", b =>
                {
                    b.HasOne("Fred.Entities.Directory.ExternalDirectoryEnt", "ExternalDirectory")
                        .WithMany("Utilisateurs")
                        .HasForeignKey("FayatAccessDirectoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithOne("Utilisateur")
                        .HasForeignKey("Fred.Entities.Utilisateur.UtilisateurEnt", "UtilisateurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("UtilisateurIdCreation");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("UtilisateurIdModification");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurSuppression")
                        .WithMany()
                        .HasForeignKey("UtilisateurIdSupression");
                });

            modelBuilder.Entity("Fred.Entities.ValidationPointage.ControlePointageEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.ValidationPointage.LotPointageEnt", "LotPointage")
                        .WithMany("ControlePointages")
                        .HasForeignKey("LotPointageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.ValidationPointage.ControlePointageErreurEnt", b =>
                {
                    b.HasOne("Fred.Entities.ValidationPointage.ControlePointageEnt", "ControlePointage")
                        .WithMany("Erreurs")
                        .HasForeignKey("ControlePointageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.ValidationPointage.LotPointageEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurModification")
                        .WithMany()
                        .HasForeignKey("AuteurModificationId");

                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurVisa")
                        .WithMany()
                        .HasForeignKey("AuteurVisaId");
                });

            modelBuilder.Entity("Fred.Entities.ValidationPointage.RemonteeVracEnt", b =>
                {
                    b.HasOne("Fred.Entities.Utilisateur.UtilisateurEnt", "AuteurCreation")
                        .WithMany()
                        .HasForeignKey("AuteurCreationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.ValidationPointage.RemonteeVracErreurEnt", b =>
                {
                    b.HasOne("Fred.Entities.Referential.EtablissementPaieEnt", "EtablissementPaie")
                        .WithMany()
                        .HasForeignKey("EtablissementPaieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.ValidationPointage.RemonteeVracEnt", "RemonteeVrac")
                        .WithMany("Erreurs")
                        .HasForeignKey("RemonteeVracId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fred.Entities.Societe.SocieteEnt", "Societe")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fred.Entities.Valorisation.ValorisationEnt", b =>
                {
                    b.HasOne("Fred.Entities.Bareme.BaremeExploitationCIEnt", "Bareme")
                        .WithMany()
                        .HasForeignKey("BaremeId");

                    b.HasOne("Fred.Entities.Bareme.BaremeExploitationOrganisationEnt", "BaremeStorm")
                        .WithMany()
                        .HasForeignKey("BaremeStormId");

                    b.HasOne("Fred.Entities.ReferentielFixe.ChapitreEnt", "Chapitre")
                        .WithMany()
                        .HasForeignKey("ChapitreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.CI.CIEnt", "CI")
                        .WithMany()
                        .HasForeignKey("CiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.DeviseEnt", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Depense.GroupeRemplacementTacheEnt", "GroupeRemplacementTache")
                        .WithMany()
                        .HasForeignKey("GroupeRemplacementTacheId");

                    b.HasOne("Fred.Entities.Referential.MaterielEnt", "Materiel")
                        .WithMany("Valorisations")
                        .HasForeignKey("MaterielId");

                    b.HasOne("Fred.Entities.Personnel.PersonnelEnt", "Personnel")
                        .WithMany("Valorisations")
                        .HasForeignKey("PersonnelId");

                    b.HasOne("Fred.Entities.Rapport.RapportEnt", "Rapport")
                        .WithMany()
                        .HasForeignKey("RapportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Rapport.RapportLigneEnt", "RapportLigne")
                        .WithMany()
                        .HasForeignKey("RapportLigneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.ReferentielEtendu.ReferentielEtenduEnt", "ReferentielEtendu")
                        .WithMany()
                        .HasForeignKey("ReferentielEtenduId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.ReferentielFixe.SousChapitreEnt", "SousChapitre")
                        .WithMany()
                        .HasForeignKey("SousChapitreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.TacheEnt", "Tache")
                        .WithMany()
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fred.Entities.Referential.UniteEnt", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
