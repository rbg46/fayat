using Fred.Entities.Bareme;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Fred.EntityFramework
{
    public class SurchargeBaremeExploitationCIEntConfiguration : IEntityTypeConfiguration<SurchargeBaremeExploitationCIEnt>
    {
        public void Configure(EntityTypeBuilder<SurchargeBaremeExploitationCIEnt> builder)
        {
            builder.ToTable("FRED_BAREME_EXPLOITATION_CI_SURCHARGE");
            builder.HasKey(sbec => sbec.SurchargeBaremeId);
            builder.Property(sbec => sbec.SurchargeBaremeId)
                .ValueGeneratedOnAdd();

            builder.Property(sbec => sbec.Prix)
                .HasColumnType("decimal(18, 3)");
            builder.Property(sbec => sbec.PrixChauffeur)
                .HasColumnType("decimal(18, 3)");
            builder.Property(sbec => sbec.PrixConduite)
                .HasColumnType("decimal(18, 3)");
            builder.Property(sbec => sbec.PeriodeDebut)
                .HasColumnType("datetime");
            builder.Property(sbec => sbec .PeriodeFin)
                .HasColumnType("datetime");
            builder.Property(sbec => sbec .DateCreation)
                .HasColumnType("datetime");
            builder.Property(sbec => sbec .DateModification)
                .HasColumnType("datetime");

            builder.HasOne(sbec => sbec.CI)
                .WithMany(c => c.SurchargeBaremeExploitationCIs)
                .HasForeignKey(sbec => sbec.CIId)
                .OnDelete(DeleteBehavior.Restrict);
            builder.HasOne(sbec => sbec.ReferentielEtendu)
                .WithMany()
                .HasForeignKey(sbec => sbec.ReferentielEtenduId)
                .OnDelete(DeleteBehavior.Restrict);
            builder.HasOne(sbec => sbec.Personnel)
                .WithMany()
                .HasForeignKey(sbec => sbec.PersonnelId);
            builder.HasOne(sbec => sbec.Materiel)
                .WithMany()
                .HasForeignKey(sbec => sbec.MaterielId);
            builder.HasOne(sbec => sbec.Unite)
                .WithMany()
                .HasForeignKey(sbec => sbec.UniteId)
                .OnDelete(DeleteBehavior.Restrict);
            builder.HasOne(sbec => sbec.Devise)
                .WithMany()
                .HasForeignKey(sbec => sbec.DeviseId)
                .OnDelete(DeleteBehavior.Restrict);
            builder.HasOne(sbec => sbec.AuteurCreation)
                .WithMany()
                .HasForeignKey(sbec => sbec.AuteurCreationId);
            builder.HasOne(sbec => sbec.AuteurModification)
                .WithMany()
                .HasForeignKey(sbec => sbec.AuteurModificationId);
        }
    }
}
