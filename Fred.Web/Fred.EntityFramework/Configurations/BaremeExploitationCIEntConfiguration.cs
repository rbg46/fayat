using Fred.Entities.Bareme;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Fred.EntityFramework
{
    public class BaremeExploitationCIEntConfiguration : IEntityTypeConfiguration<BaremeExploitationCIEnt>
    {
        public void Configure(EntityTypeBuilder<BaremeExploitationCIEnt> builder)
        {
            builder.ToTable("FRED_BAREME_EXPLOITATION_CI");
            builder.HasKey(bec => bec.BaremeId);
            builder.Property(bec => bec.BaremeId)
                .ValueGeneratedOnAdd();

            builder.Property(bec => bec.Prix)
                .HasColumnType("decimal(18, 3)");
            builder.Property(bec => bec.PrixChauffeur)
                .HasColumnType("decimal(18, 3)");
            builder.Property(bec => bec.PrixConduite)
                .HasColumnType("decimal(18, 3)");
            builder.Property(bec => bec.ReferentielEtenduId)
                .IsRequired();
            builder.Property(bec => bec.PeriodeDebut)
                .HasColumnType("datetime");
            builder.Property(bec => bec.PeriodeFin)
                .HasColumnType("datetime");
            builder.Property(bec => bec.DateCreation)
                .HasColumnType("datetime");
            builder.Property(bec => bec.DateModification)
                .HasColumnType("datetime");

            builder.HasOne(bec => bec.CI)
                .WithMany(c => c.BaremeExploitationCIs)
                .HasForeignKey(bec => bec.CIId)
                .OnDelete(DeleteBehavior.Restrict);
            builder.HasOne(bec => bec.ReferentielEtendu)
                .WithMany()
                .HasForeignKey(bec => bec.ReferentielEtenduId)
                .OnDelete(DeleteBehavior.Restrict);
            builder.HasOne(bec => bec.Unite)
                .WithMany()
                .HasForeignKey(bec => bec.UniteId)
                .OnDelete(DeleteBehavior.Restrict);
            builder.HasOne(bec => bec.Devise)
                .WithMany()
                .HasForeignKey(bec => bec.DeviseId)
                .OnDelete(DeleteBehavior.Restrict);
            builder.HasOne(bec => bec.AuteurCreation)
                .WithMany()
                .HasForeignKey(bec => bec.AuteurCreationId);
            builder.HasOne(bec => bec.AuteurModification)
                .WithMany()
                .HasForeignKey(bec => bec.AuteurModificationId);
        }
    }
}
