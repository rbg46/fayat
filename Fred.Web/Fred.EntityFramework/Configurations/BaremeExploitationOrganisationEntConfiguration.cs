using Fred.Entities.Bareme;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Fred.EntityFramework
{
    public class BaremeExploitationOrganisationEntConfiguration : IEntityTypeConfiguration<BaremeExploitationOrganisationEnt>
    {
        public void Configure(EntityTypeBuilder<BaremeExploitationOrganisationEnt> builder)
        {
            builder.ToTable("FRED_BAREME_EXPLOITATION_ORGANISATION");
            builder.HasKey(beo => beo.BaremeId);
            builder.Property(beo => beo.BaremeId)
                .ValueGeneratedOnAdd();

            builder.Property(beo => beo.Prix)
                .HasColumnType("decimal(18, 3)");
            builder.Property(beo => beo.PrixChauffeur)
                .HasColumnType("decimal(18, 3)");
            builder.Property(beo => beo.PrixConduite)
                .HasColumnType("decimal(18, 3)");
            builder.Property(beo => beo.PeriodeDebut)
                .HasColumnType("datetime");
            builder.Property(beo => beo.PeriodeFin)
                .HasColumnType("datetime");
            builder.Property(beo => beo.DateCreation)
                .HasColumnType("datetime");
            builder.Property(beo => beo.DateModification)
                .HasColumnType("datetime");

            builder.HasOne(beo => beo.Organisation)
                .WithMany()
                .HasForeignKey(beo => beo.OrganisationId)
                .OnDelete(DeleteBehavior.Restrict);
            builder.HasOne(beo => beo.Ressource)
                .WithMany()
                .HasForeignKey(beo => beo.RessourceId)
                .OnDelete(DeleteBehavior.Restrict);
            builder.HasOne(beo => beo.Unite)
                .WithMany()
                .HasForeignKey(beo => beo.UniteId)
                .OnDelete(DeleteBehavior.Restrict);
            builder.HasOne(beo => beo.Devise)
                .WithMany()
                .HasForeignKey(beo => beo.DeviseId)
                .OnDelete(DeleteBehavior.Restrict);
            builder.HasOne(beo => beo.AuteurCreation)
                .WithMany()
                .HasForeignKey(beo => beo.AuteurCreationId);
            builder.HasOne(beo => beo.AuteurModification)
                .WithMany()
                .HasForeignKey(beo => beo.AuteurModificationId);
        }
    }
}
