using FluentAssertions;
using Fred.Business.CompteExploitation.Helpers;
using Fred.Business.ExplorateurDepense;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using static Fred.Entities.Constantes;

namespace Fred.Business.Tests.CompteExploitation.Excel13C4C.Helpers
{
    [TestClass]
    public class ExplorateurAxeMergeHelperTests
    {
        [TestMethod]

        public async Task MergingTree_Empty()
        {
            ExplorateurAxe explorateurAxeMain = new ExplorateurAxe()
            {
                Key = $"{AnalysisAxis.T3} {0}",
                Code = "T3-0",
                Parent = null,
            };
            ExplorateurAxe explorateurAxeT3 = CreateTreeT3();

            var result = new ExplorateurAxeMergeHelper().MergeAllTree(explorateurAxeMain.ToAxesList().ConcatAxes(explorateurAxeT3.ToAxesList()));

            var flatten = result.FlattenExplorateurAxes();
            flatten.ElementAt(0).Code.Should().Be("T3-0");
            flatten.ElementAt(1).Code.Should().Be("T3-1");
            flatten.ElementAt(2).Code.Should().Be("Chapitre1-1");
            flatten.ElementAt(3).Code.Should().Be("SousChapitre-1");
        }

        [TestMethod]

        public async Task MergingTree()
        {
            ExplorateurAxe explorateurAxeT3 = CreateTreeT3();

            ExplorateurAxe explorateurAxeT3Bis = CreateTreeT3Bis();

            var result = new ExplorateurAxeMergeHelper().MergeAllTree(explorateurAxeT3.ToAxesList().ConcatAxes(explorateurAxeT3Bis.ToAxesList()));
            var flatten = result.FlattenExplorateurAxes();
            flatten.ElementAt(0).Code.Should().Be("T3-1");
            flatten.ElementAt(1).Code.Should().Be("Chapitre1-1");
            flatten.ElementAt(2).Code.Should().Be("SousChapitre-1");
            flatten.ElementAt(3).Code.Should().Be("SousChapitre-2");
        }

        [TestMethod]

        public async Task MergingSameTree()
        {
            ExplorateurAxe explorateurAxeT3 = CreateTreeT3();

            ExplorateurAxe explorateurAxeT3Bis = CreateTreeT3();

            var result = new ExplorateurAxeMergeHelper().MergeAllTree(explorateurAxeT3.ToAxesList().ConcatAxes(explorateurAxeT3Bis.ToAxesList()));

            var flatten = result.FlattenExplorateurAxes();
            flatten.ElementAt(0).Code.Should().Be("T3-1");
            flatten.ElementAt(1).Code.Should().Be("Chapitre1-1");
            flatten.ElementAt(2).Code.Should().Be("SousChapitre-1");
        }

        private static ExplorateurAxe CreateTreeT3Bis()
        {
            ExplorateurAxe explorateurAxeT3Bis = new ExplorateurAxe()
            {
                Key = $"{AnalysisAxis.T3} {1}",
                Code = "T3-1",
                Parent = null,
            };

            ExplorateurAxe explorateurAxeChapitre1_bis = new ExplorateurAxe()
            {
                Key = $"{AnalysisAxis.Chapitre} {1}",
                Code = "Chapitre1-1",
                Parent = explorateurAxeT3Bis
            };

            ExplorateurAxe explorateurAxeSousChapitre2 = new ExplorateurAxe()
            {
                Key = $"{AnalysisAxis.SousChapitre} {2}",
                Code = "SousChapitre-2",
                Parent = explorateurAxeChapitre1_bis
            };


            explorateurAxeT3Bis.SousExplorateurAxe = new List<ExplorateurAxe>() {
                explorateurAxeChapitre1_bis,
            };

            explorateurAxeChapitre1_bis.SousExplorateurAxe = new List<ExplorateurAxe>() {
                explorateurAxeSousChapitre2,
            };
            return explorateurAxeT3Bis;
        }

        private static ExplorateurAxe CreateTreeT3()
        {
            ExplorateurAxe explorateurAxeT3 = new ExplorateurAxe()
            {
                Key = $"{AnalysisAxis.T3} {1}",
                Code = "T3-1",
                Parent = null,
            };

            ExplorateurAxe explorateurAxeChapitre1 = new ExplorateurAxe()
            {
                Key = $"{AnalysisAxis.Chapitre} {1}",
                Code = "Chapitre1-1",
                Parent = explorateurAxeT3
            };

            ExplorateurAxe explorateurAxeSousChapitre1 = new ExplorateurAxe()
            {
                Key = $"{AnalysisAxis.SousChapitre} {1}",
                Code = "SousChapitre-1",
                Parent = explorateurAxeChapitre1
            };

            explorateurAxeT3.SousExplorateurAxe = new List<ExplorateurAxe>() {
                explorateurAxeChapitre1,
            };

            explorateurAxeChapitre1.SousExplorateurAxe = new List<ExplorateurAxe>() {
                explorateurAxeSousChapitre1,
            };
            return explorateurAxeT3;
        }

        private static ExplorateurAxe CreateTreeT3BisBis()
        {
            ExplorateurAxe explorateurAxeT3 = new ExplorateurAxe()
            {
                Key = $"{AnalysisAxis.T3} {1}",
                Code = "T3-1",
                Parent = null,
            };

            ExplorateurAxe explorateurAxeChapitre1 = new ExplorateurAxe()
            {
                Key = $"{AnalysisAxis.Chapitre} {1}",
                Code = "Chapitre1-1",
                Parent = explorateurAxeT3
            };

            ExplorateurAxe explorateurAxeSousChapitre3 = new ExplorateurAxe()
            {
                Key = $"{AnalysisAxis.SousChapitre} {3}",
                Code = "SousChapitre-3",
                Parent = explorateurAxeChapitre1
            };

            explorateurAxeT3.SousExplorateurAxe = new List<ExplorateurAxe>() {
                explorateurAxeChapitre1,
            };

            explorateurAxeChapitre1.SousExplorateurAxe = new List<ExplorateurAxe>() {
                explorateurAxeSousChapitre3,
            };
            return explorateurAxeT3;
        }

        private static ExplorateurAxe CreateTreeT3_2()
        {
            ExplorateurAxe explorateurAxeT3 = new ExplorateurAxe()
            {
                Key = $"{AnalysisAxis.T3} {2}",
                Code = "T3-2",
                Parent = null,
            };

            ExplorateurAxe explorateurAxeChapitre1 = new ExplorateurAxe()
            {
                Key = $"{AnalysisAxis.Chapitre} {1}",
                Code = "Chapitre1-1",
                Parent = explorateurAxeT3
            };

            ExplorateurAxe explorateurAxeSousChapitre3 = new ExplorateurAxe()
            {
                Key = $"{AnalysisAxis.SousChapitre} {3}",
                Code = "SousChapitre-3",
                Parent = explorateurAxeChapitre1
            };

            explorateurAxeT3.SousExplorateurAxe = new List<ExplorateurAxe>() {
                explorateurAxeChapitre1,
            };

            explorateurAxeChapitre1.SousExplorateurAxe = new List<ExplorateurAxe>() {
                explorateurAxeSousChapitre3,
            };
            return explorateurAxeT3;
        }

        [TestMethod]

        public async Task MergeAllTree()
        {
            ExplorateurAxe explorateurAxeT3 = CreateTreeT3();

            ExplorateurAxe explorateurAxeT3Bis = CreateTreeT3Bis();

            ExplorateurAxe explorateurAxeT3BisBis = CreateTreeT3BisBis();

            ExplorateurAxe explorateurAxeT32 = CreateTreeT3_2();

            var axes = explorateurAxeT3.ToAxesList();

            var axesBis = explorateurAxeT3Bis.ToAxesList();

            var axesBisBis = explorateurAxeT3BisBis.ToAxesList();

            var axes2 = explorateurAxeT32.ToAxesList();

            var allAxes = axes.ConcatAxes(axesBis).ConcatAxes(axesBisBis).ConcatAxes(axes2);


            var result = new ExplorateurAxeMergeHelper().MergeAllTree(allAxes);

            var flatten = result.FlattenExplorateurAxes();
            flatten.ElementAt(0).Code.Should().Be("T3-1");
            flatten.ElementAt(1).Code.Should().Be("Chapitre1-1");
            flatten.ElementAt(2).Code.Should().Be("SousChapitre-1");
            flatten.ElementAt(3).Code.Should().Be("SousChapitre-2");
            flatten.ElementAt(4).Code.Should().Be("SousChapitre-3");
            flatten.ElementAt(5).Code.Should().Be("T3-2");
            flatten.ElementAt(6).Code.Should().Be("Chapitre1-1");
            flatten.ElementAt(7).Code.Should().Be("SousChapitre-3");
        }
    }
}

