using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Fred.Business.BaremeExploitation;
using Fred.Business.CI;
using Fred.Business.Organisation;
using Fred.Business.Referential;
using Fred.Business.ReferentielEtendu;
using Fred.Business.ReferentielFixe;
using Fred.Business.Unite;
using Fred.Entities;
using Fred.Entities.Bareme;
using Fred.Entities.CI;
using Fred.Framework.Exceptions;
using Fred.ImportExport.Business.Common;
using Fred.ImportExport.Business.Flux;
using Fred.ImportExport.Business.Hangfire;
using Fred.ImportExport.Business.Hangfire.Parameters;
using Fred.ImportExport.DataAccess.Interfaces;
using Fred.ImportExport.Models.BaremeExpploitation;
using Hangfire;

namespace Fred.ImportExport.Business.BaremeExploitation
{
    public class BaremeExploitationFluxManager : AbstractFluxManager
    {
        private readonly string inputPathBareme = ConfigurationManager.AppSettings["inputPathBareme"];
        private readonly string importJobId = ConfigurationManager.AppSettings["flux:baremeExploitation"];

        private readonly ICIManager ciManager;
        private readonly IBaremeExploitationCIManager baremeCiManager;
        private readonly IUniteManager uniteManager;
        private readonly IDeviseManager deviseManager;
        private readonly IOrganisationManager organisationManager;
        private readonly IReferentielFixeManager ressourceManager;
        private readonly IReferentielEtenduManager referentielEtenduManager;
        private readonly IFluxRepository fluxRepository;
        private readonly List<BaremeExploitationCIEnt> listBaremesToImport = new List<BaremeExploitationCIEnt>();

        public BaremeExploitationFluxManager(
            IFluxManager fluxManager,
            ICIManager ciManager,
            IBaremeExploitationCIManager baremeCiManager,
            IUniteManager uniteManager,
            IDeviseManager deviseManager,
            IOrganisationManager organisationManager,
            IReferentielFixeManager ressourceManager,
            IReferentielEtenduManager referentielEtenduManager,
            IFluxRepository fluxRepository)
            : base(fluxManager)
        {
            this.ciManager = ciManager;
            this.baremeCiManager = baremeCiManager;
            this.uniteManager = uniteManager;
            this.deviseManager = deviseManager;
            this.organisationManager = organisationManager;
            this.ressourceManager = ressourceManager;
            this.referentielEtenduManager = referentielEtenduManager;
            this.fluxRepository = fluxRepository;

            Flux = FluxManager.GetByCode(importJobId);
        }

        /// <summary>
        ///   Exécution du l'import des Fournisseurs d'Anael vers FRED
        /// </summary>
        public void ExecuteImport()
        {
            try
            {
                BackgroundJob.Enqueue(() => ImportationProcess(inputPathBareme));
            }
            catch (Exception e)
            {
                var exception = new FredBusinessException(e.Message, e);
                NLog.LogManager.GetCurrentClassLogger().Error(exception);
                throw exception;
            }
        }

        /// <summary>
        ///   Job d'import des baremes Storm en fichier plat vers FRED
        /// </summary>
        /// <param name="inputPath">Chemin du fichier</param>
        [AutomaticRetry(Attempts = 0, LogEvents = true)]
        [DisplayName("[IMPORT] BaremeExploitation (fichiers plats => FRED)")]
        public async Task ImportationProcess(string inputPath)
        {
            var parameter = new ImportationByInputPathParameter { InputPath = inputPath };
            string groupCode = await fluxRepository.GetGroupCodeByFluxCodeAsync(importJobId);

            await JobRunnerApiRestHelper.PostAsync("ImportBaremes", groupCode, parameter);
        }

        public void ImportationProcessJob(ImportationByInputPathParameter parameter)
        {
            try
            {
                /******** 1 - Récupération des données ********/
                IEnumerable<BaremeExploitationStormModel> baremesOrgaStorm = GetBaremeFromStorm(parameter.InputPath);

                /******** 2 - Transformation des données ********/
                DataTransform(baremesOrgaStorm);

                /******** 3 - Envoi des données ********/
                baremeCiManager.ManageImportedBareme(listBaremesToImport);
            }
            catch (Exception ex)
            {
                string msg = string.Format(IEBusiness.FluxErreurImport, "Import barème STORM");
                var exception = new FredBusinessException(msg, ex);
                NLog.LogManager.GetCurrentClassLogger().Error(exception, exception.Message);
                throw exception;
            }
        }

        /// <summary>
        ///   Récupération des barèmes issue de Storm
        /// </summary>
        /// <param name="inputPath">Chemin du fichier d'import</param>
        /// <returns>Liste de barèmes organistion</returns>
        public IEnumerable<BaremeExploitationStormModel> GetBaremeFromStorm(string inputPath)
        {
            var baremesOrgaStorm = new List<BaremeExploitationStormModel>();
            string path = string.Concat(inputPath, "importBareme.csv");
            try
            {
                // Récupération des fournisseurs
                using (var reader = new StreamReader(@path))
                {
                    var cultureFR = CultureInfo.CreateSpecificCulture("fr-FR").Clone() as CultureInfo;
                    cultureFR.NumberFormat.NumberDecimalSeparator = ",";

                    while (!reader.EndOfStream)
                    {
                        string line = reader.ReadLine();
                        string[] values = line.Split(';');
                        var baremeStorm = new BaremeExploitationStormModel()
                        {
                            CodeUo = values[0],
                            CodeRessource = values[2],
                            CodeDevise = values[4],
                            CodeUnite = values[6],
                            Puht = Convert.ToDecimal(values[8], cultureFR),
                            PuhtChauffeur = Convert.ToDecimal(values[9], cultureFR),
                            PuhtConduite = Convert.ToDecimal(values[10], cultureFR),
                            MoisDebut = Convert.ToInt32(values[11]),
                            AnneeDebut = Convert.ToInt32(values[12]),
                            MoisFin = !string.IsNullOrEmpty(values[13]) ? (int?)Convert.ToInt32(values[13]) : null,
                            AnneeFin = !string.IsNullOrEmpty(values[14]) ? (int?)Convert.ToInt32(values[14]) : null
                        };

                        baremesOrgaStorm.Add(baremeStorm);
                    }
                }
            }
            catch (Exception ex)
            {
                string msg = string.Format(IEBusiness.FluxErreurRecuperation, importJobId);
                var exception = new FredBusinessException(msg, ex);
                NLog.LogManager.GetCurrentClassLogger().Error(exception, exception.Message);
                throw exception;
            }

            return baremesOrgaStorm;
        }

        /// <summary>
        ///   Transposition
        /// </summary>
        /// <param name="baremesStorm">Liste des barèmes</param>
        public void DataTransform(IEnumerable<BaremeExploitationStormModel> baremesStorm)
        {
            try
            {
                int orgaId = organisationManager.GetOrganisationByCodeAndType(baremesStorm.First().CodeUo, Constantes.OrganisationType.CodeUo).OrganisationId;
                IEnumerable<CIEnt> ciList = ciManager.GetCIList(orgaId);

                foreach (BaremeExploitationStormModel b in baremesStorm)
                {
                    int uniteId = uniteManager.GetUnite(b.CodeUnite).UniteId;
                    int? deviseId = deviseManager.GetDeviseIdByCode(b.CodeDevise);
                    var periodeDebut = new DateTime(b.AnneeDebut, b.MoisDebut, 1);
                    DateTime? periodeFin = null;
                    if (b.AnneeFin.HasValue && b.MoisFin.HasValue)
                    {
                        periodeFin = new DateTime(b.AnneeFin.Value, b.MoisFin.Value, 1);
                    }

                    foreach (CIEnt ci in ciList)
                    {
                        int ressourceId = ressourceManager.GetRessource(b.CodeRessource).RessourceId;
                        int referentielEtenduId = referentielEtenduManager.GetReferentielEtenduByRessourceAndSociete(ressourceId, ci.SocieteId.Value).ReferentielEtenduId;

                        var baremeEnt = new BaremeExploitationCIEnt
                        {
                            CIId = ci.CiId,
                            ReferentielEtenduId = referentielEtenduId,
                            UniteId = uniteId,
                            DeviseId = deviseId.Value,
                            PeriodeDebut = periodeDebut,
                            PeriodeFin = periodeFin,
                            Prix = b.Puht,
                            PrixChauffeur = b.PuhtChauffeur,
                            PrixConduite = b.PuhtConduite,
                            DateCreation = DateTime.UtcNow
                        };

                        listBaremesToImport.Add(baremeEnt);
                    }
                }
            }
            catch (Exception ex)
            {
                string msg = string.Format(IEBusiness.FluxErreurTraitement, importJobId);
                var exception = new FredBusinessException(msg, ex);
                NLog.LogManager.GetCurrentClassLogger().Error(exception, exception.Message);
                throw exception;
            }
        }
    }
}
